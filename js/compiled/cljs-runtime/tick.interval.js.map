{"version":3,"sources":["tick/interval.cljc"],"mappings":"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","names":["tick.interval/make-interval","beginning","end","js/Error","tick.core/<","tick.interval/temporal?","o","java.time.temporal/Temporal","cljs.core/type","tick.interval/temporal-amount?","java.time.temporal/TemporalAmount","x__4487__auto__","m__4488__auto__","tick.interval/temporal-value","goog/typeOf","m__4485__auto__","cljs.core/missing-protocol","tick.interval/ITimeSpanable","_","cljs.core/PROTOCOL_SENTINEL","goog.object/set","G__48519","G__48520","G__48521","G__48522","G__48523","G__48524","f","java.time/Instant","i","s","tick.core/parse","java.time/LocalDate","d","java.time/LocalTime","t","java.time/LocalDateTime","ldt","js/Date","tick.core/instant","java.time/YearMonth","ym","java.time/Year","y","java.time/OffsetDateTime","odt","java.time/ZonedDateTime","zdt","tick.interval/new-interval","v1","v2","t1","tick.core/beginning","t2","tick.core/end","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","tick.interval/extend","ival","dur","tick.core/forward-duration","tick.interval/scale","factor","cljc.java-time.duration/multiplied-by","tick.core/duration","cljs.core/PersistentArrayMap","p1__48528#","cljs.core.update.cljs$core$IFn$_invoke$arity$3","p1__48529#","p1__48530#","tick.core/backward-duration","p1__48531#","date","tick.core/on","zone","tick.core/in","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","tick.interval/bounds","seq48532","self__4777__auto__","cljs.core/seq","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","tick.core/min","cljs.core.map.cljs$core$IFn$_invoke$arity$2","tick.core/max","tick.interval/am","tick.core.noon.cljs$core$IFn$_invoke$arity$1","tick.interval/pm","tick.interval/precedes?","x","tick.interval/equals?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","tick.interval/meets?","tick.interval/overlaps?","and__4174__auto__","tick.core/>","tick.interval/during?","tick.interval/starts?","tick.interval/finishes?","tick.interval/conv","tick.interval/preceded-by?","fexpr__48533","tick.interval/met-by?","fexpr__48534","tick.interval/overlapped-by?","fexpr__48535","tick.interval/finished-by?","fexpr__48536","tick.interval/contains?","fexpr__48537","tick.interval/started-by?","fexpr__48538","tick.interval/relation->kw","tick.interval/basic-relations","this__4439__auto__","k__4440__auto__","this__4441__auto__","k48540","else__4442__auto__","G__48545","cljs.core/Keyword","relations","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__4458__auto__","f__4459__auto__","init__4460__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","ret__4461__auto__","p__48546","vec__48547","k__4462__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","v__4463__auto__","this__4453__auto__","writer__4454__auto__","opts__4455__auto__","pr-pair__4456__auto__","keyval__4457__auto__","cljs.core/pr-sequential-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__48539","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","unused__10555__auto__","self__","G__48550","args48544","cljs.core/aclone","this__4437__auto__","__meta","this__4434__auto__","__hash","this__4443__auto__","cljs.core/count","this__4435__auto__","h__4297__auto__","fexpr__48552","coll__4436__auto__","cljs.core/hash-unordered-coll","this48541","other48542","this__4448__auto__","k__4449__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__4446__auto__","k__4447__auto__","pred__48554","cljs.core/keyword-identical?","expr__48555","G__48557","G__48558","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__4451__auto__","cljs.core/MapEntry","this__4438__auto__","this__4444__auto__","entry__4445__auto__","cljs.core/vector?","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","tick.interval/GeneralRelation","this__4482__auto__","cljs.core/List","writer__4483__auto__","cljs.core/-write","G__48543","extmap__4478__auto__","G__48577","cljs.core/record?","tick.interval/->GeneralRelation","tick.interval/map->GeneralRelation","cljs.core/some","tick.interval/new-relation","seq48584","basic-relations","tick.interval/basic-relation","tick.interval/relation","G__48588","tick.interval/complement-r","r","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/set","tick.interval/not-yet-implemented","tick.interval/compose-r","tick.interval/converse-r","tick.interval/intersection-r","cljs.spec.alpha/*compile-asserts*","cljs.core/deref","cljs.spec.alpha/*runtime-asserts*","cljs.spec.alpha/assert*","p1__48589#","clojure.set.intersection.cljs$core$IFn$_invoke$arity$1","tick.interval/disjoint?","tick.interval.new_relation.cljs$core$IFn$_invoke$arity$variadic","tick.interval/concur?","tick.interval/precedes-or-meets?","tick.interval/slice","tick.interval/splice","tick.interval/split","tick.interval/IIntervalOps","this","tick.interval/split-with-assert","tick.interval/slice-interval","tick.core.max.cljs$core$IFn$_invoke$arity$variadic","tick.core.min.cljs$core$IFn$_invoke$arity$variadic","cljs.core/associative?","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","tick.interval/split-interval","tick.interval/flatten","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","temp__5733__auto__","ivals","intervals","cljs.core/vec","p1__48608#","cljs.core.keep.cljs$core$IFn$_invoke$arity$2","other","this-intervals","other-intervals","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/concat","cljs.core/conj","p1__48612#","p1__48613#","tick.interval/concur","G__48692","tick.interval/concurrencies","seq48702","iter__4582__auto__","s__48704","cljs.core/LazySeq","temp__5735__auto__","xs__6292__auto__","cljs.core/first","iterys__4578__auto__","s__48706","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","b__48708","cljs.core/chunk-buffer","i__48707","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__48705","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__4579__auto__","iter__48703","xi","cljs.core.range.cljs$core$IFn$_invoke$arity$1","yi","cljs.core.get.cljs$core$IFn$_invoke$arity$2","conc","tick.interval/interval","G__48710","fexpr__48709","G__48712","fexpr__48711","G__48714","fexpr__48713","G__48716","fexpr__48715","tick.interval/ordered-disjoint-intervals?","rel","G__48721","vec__48722","seq__48723","first__48724","cljs.core/next","vec__48725","seq__48726","first__48727","xs","G__48729","G__48730","tick.interval/assert-proper-head","vec__48732","initial","subsequent","tick.interval/unite","vec__48743","seq__48744","first__48745","ival1","ival2","G__48747","unite","tick.interval/new-interval-group","tick.interval/normalize","vec__48757","seq__48758","first__48759","G__48761","normalize","tick.interval/union","seq48763","colls","vec__48769","seq__48770","first__48771","c1","c2","p1__48762#","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","G__48772","G__48773","union","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","cljs.core/list","s__48775","b__48777","i__48776","iter__48774","coll","tick.interval/conj","interval","tick.interval.union.cljs$core$IFn$_invoke$arity$variadic","G__48782","tick.interval/intersection","args-arr__4810__auto__","argseq__4811__auto__","seq48779","G__48780","G__48781","self__4776__auto__","s1","s2","ys","G__48786","intersection","sets","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","tick.interval/intersects?","tick.interval.intersection.cljs$core$IFn$_invoke$arity$2","G__48792","tick.interval/difference","seq48789","G__48790","G__48791","vec__48800","vec__48803","G__48806","difference","tick.interval/complement","cljs.core/empty?","tick.core/min-of-type","tick.core/now","tick.core/max-of-type","cljs.core.partition.cljs$core$IFn$_invoke$arity$3","p__48810","vec__48811","G__48817","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","fexpr__48818","p1__48808#","cljs.core/last","fexpr__48823","p1__48809#","G__48828","tick.interval/disjoin","seq48825","G__48826","G__48827","result","G__48831","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","tick.interval/divide-by-apply","G__48832","tick.core.range.cljs$core$IFn$_invoke$arity$2","G__48833","G__48834","G__48835","G__48836","tick.interval/divide-by-duration","tick.core.range.cljs$core$IFn$_invoke$arity$3","p1__48837#","cljs.core.juxt.cljs$core$IFn$_invoke$arity$2","cljs.core/identity","tick.interval/divide-by-period","period","p1__48838#","tick.interval/divide-by-divisor","divisor","cljc.java-time.duration/divided-by","tick.interval/divide-interval","tick.interval/IDivisibleInterval","G__48843","G__48844","G__48845","G__48849","G__48850","G__48851","java.time/Duration","java.time/Period","ld","n","tick.interval/group-by-intervals","intervals-to-group-by","groups","current-intervals","group","G__48871","G__48872","vec__48873","seg1","seg2","vec__48876","vec__48879","G__48882","tick.interval/group-by","tick.interval/IGroupable","grouping","G__48883","G__48884","G__48885","b","G__48886","e","G__48887","tick.core/inc","cljs.core/chunk-first"],"sourcesContent":[";; Copyright \u00a9 2016-2017, JUXT LTD.\r\n\r\n(ns tick.interval\r\n  (:refer-clojure :exclude [contains? complement partition-by group-by conj extend divide flatten])\r\n  (:require\r\n    [clojure.set :as set]\r\n    [clojure.spec.alpha :as s]\r\n    [tick.core :as t]\r\n    [cljc.java-time.duration]\r\n    #?@(:cljs\r\n         [[java.time :refer [Clock ZoneId ZoneOffset Instant Duration Period DayOfWeek Month ZonedDateTime LocalTime\r\n                             LocalDateTime LocalDate Year YearMonth OffsetDateTime OffsetTime]]\r\n          [java.time.temporal :refer [ChronoUnit ChronoField Temporal TemporalAdjusters TemporalAdjusters TemporalAmount]]\r\n          [cljs.java-time.extend-eq-and-compare]]))\r\n  #?(:clj\r\n     (:import\r\n       [java.util Date]\r\n       [java.time Instant Duration Period ZoneId LocalDate LocalTime LocalDateTime Year YearMonth OffsetDateTime ZoneId ZonedDateTime]\r\n       [java.time.temporal Temporal TemporalAmount])))\r\n\r\n;; Use of Allen's Interval Algebra, inspired from a working\r\n;; demonstration of time-count by Eric Evans.\r\n\r\n;; Construction\r\n\r\n(defn- make-interval [beginning end]\r\n  (assert (t/< beginning end))\r\n  {:tick/beginning beginning\r\n   :tick/end end})\r\n\r\n(defn temporal? [o]\r\n  #?(:clj (instance? Temporal o)\r\n     :cljs (.isPrototypeOf Temporal (type o))))\r\n\r\n(defn temporal-amount? [o]\r\n  #?(:clj (instance? TemporalAmount o)\r\n     :cljs (.isPrototypeOf TemporalAmount (type o))))\r\n\r\n(defprotocol ITimeSpanable\r\n  (temporal-value [_] \"Return a value of a type that satisfies t/ITimeSpan\"))\r\n\r\n(extend-protocol ITimeSpanable\r\n  #?(:clj clojure.lang.Fn :cljs function)\r\n  (temporal-value [f] (temporal-value (f)))\r\n\r\n  Instant\r\n  (temporal-value [i] i)\r\n\r\n  #?(:clj String :cljs string)\r\n  (temporal-value [s] (temporal-value (t/parse s)))\r\n\r\n  LocalDate\r\n  (temporal-value [d] d)\r\n\r\n  LocalTime\r\n  (temporal-value [t] t)\r\n\r\n  LocalDateTime\r\n  (temporal-value [ldt] ldt)\r\n\r\n #?(:clj Date :cljs js/Date)\r\n  (temporal-value [d] (t/instant d))\r\n\r\n  YearMonth\r\n  (temporal-value [ym] ym)\r\n\r\n  Year\r\n  (temporal-value [y] y)\r\n\r\n  OffsetDateTime\r\n  (temporal-value [odt] odt)\r\n\r\n  ZonedDateTime\r\n  (temporal-value [zdt] zdt))\r\n\r\n(defn new-interval [v1 v2]\r\n  (let [t1 (t/beginning (temporal-value v1))\r\n        t2 (t/end (temporal-value v2))]\r\n    (if (t/< t1 t2)\r\n      {:tick/beginning t1\r\n       :tick/end t2}\r\n      (throw\r\n        (ex-info\r\n          \"Interval must span between two times, the first must be before the second\"\r\n          {:tick/beginning v1 :tick/end v2})))))\r\n\r\n;; Adjustments\r\n\r\n;; (extend _ & durations) to extend the interval, add durations to the end\r\n;; Durations can be negative, so a retraction is simply an extend with a negative duration.\r\n\r\n(defn extend [ival dur]\r\n  (make-interval\r\n    (t/beginning ival)\r\n    (t/forward-duration (t/end ival) dur)))\r\n\r\n(defn scale [ival factor]\r\n  (make-interval\r\n    (t/beginning ival)\r\n    (t/forward-duration (t/beginning ival) (cljc.java-time.duration/multiplied-by (t/duration ival) factor))))\r\n\r\n(extend-protocol t/ITimeShift\r\n  #?(:clj clojure.lang.APersistentMap :cljs PersistentArrayMap)\r\n  (forward-duration [ival d]\r\n    (-> ival\r\n        (update :tick/beginning #(t/forward-duration % d))\r\n        (update :tick/end #(t/forward-duration % d))))\r\n  (backward-duration [ival d]\r\n    (-> ival\r\n        (update :tick/beginning #(t/backward-duration % d))\r\n        (update :tick/end #(t/backward-duration % d)))))\r\n\r\n;; An interval of duration d to t1 can be constructed like this:\r\n;; (scale (new-interval t1 d) -1)\r\n\r\n;; (>> _ d) to shift the interval into the future by duration d\r\n;; (<< _ d) to shift the interval into the past by duration d\r\n\r\n;; (* _) to duplicate into meeting intervals, into a sequence (possibly need a record container for this, IntervalSeq)\r\n\r\n;; (interpose IntervalSeq d)\r\n\r\n;; / to divide into subintervals\r\n\r\n;; Finally, it should be possible to transduce IntervalSeqs\r\n\r\n\r\n;; Reification\r\n\r\n(extend-protocol t/ITimeReify\r\n  #?(:clj clojure.lang.APersistentMap :cljs PersistentArrayMap)\r\n  (on [i date] (new-interval (t/on (t/beginning i) date) (t/on (t/end i) date)))\r\n  (in [i zone] (new-interval (t/in (t/beginning i) zone) (t/in (t/end i) zone))))\r\n\r\n(defn bounds [& args]\r\n  (make-interval\r\n    (apply t/min (map t/beginning args))\r\n    (apply t/max (map t/end args))))\r\n\r\n(defn am [^LocalDate date]\r\n  (new-interval (t/beginning date) (t/noon date)))\r\n\r\n(defn pm [^LocalDate date]\r\n  (new-interval (t/noon date) (t/end date)))\r\n\r\n;; Allen's Basic Relations\r\n\r\n(defn precedes? [x y]\r\n  (t/< (t/end x) (t/beginning y)))\r\n\r\n(defn equals? [x y]\r\n  (and\r\n    (= (t/beginning x) (t/beginning y))\r\n    (= (t/end x) (t/end y))))\r\n\r\n(defn meets? [x y]\r\n  (= (t/end x) (t/beginning y)))\r\n\r\n(defn overlaps? [x y]\r\n  (and\r\n   (t/< (t/beginning x) (t/beginning y))\r\n   (t/> (t/end x) (t/beginning y))\r\n   (t/< (t/end x) (t/end y))))\r\n\r\n(defn during? [x y]\r\n  (and\r\n   (t/> (t/beginning x) (t/beginning y))\r\n   (t/< (t/end x) (t/end y))))\r\n\r\n(defn starts? [x y]\r\n  (and\r\n   (= (t/beginning x) (t/beginning y))\r\n   (t/< (t/end x) (t/end y))))\r\n\r\n(defn finishes? [x y]\r\n  (and\r\n   (t/> (t/beginning x) (t/beginning y))\r\n   (= (t/end x) (t/end y))))\r\n\r\n;; Six pairs of the relations are converses.  For example, the converse of \"a precedes b\" is \"b preceded by a\"; whenever the first relation is true, its converse is true also.\r\n(defn conv\r\n  \"The converse of a basic relation.\"\r\n  [f]\r\n  (fn [x y]\r\n    (f y x)))\r\n\r\n(defn preceded-by? [x y] ((conv precedes?) x y))\r\n(defn met-by? [x y] ((conv meets?) x y))\r\n(defn overlapped-by? [x y] ((conv overlaps?) x y))\r\n(defn finished-by? [x y] ((conv finishes?) x y))\r\n\r\n;; contains? is semantically similar to tick.core/coincident?\r\n(defn contains? [x y] ((conv during?) x y))\r\n(defn started-by? [x y] ((conv starts?) x y))\r\n\r\n(def relation->kw\r\n  {precedes? :precedes\r\n   meets? :meets\r\n   starts? :starts\r\n   during? :during\r\n   finishes? :finishes\r\n   overlaps? :overlaps\r\n   equals? :equals\r\n   contains? :contains\r\n   started-by? :started-by\r\n   finished-by? :finished-by\r\n   overlapped-by? :overlapped-by\r\n   met-by? :met-by\r\n   preceded-by? :preceded-by})\r\n\r\n(def basic-relations\r\n  [precedes? meets? overlaps? finished-by? contains?\r\n   starts? equals? started-by? during? finishes? overlapped-by?\r\n   met-by? preceded-by?])\r\n\r\n;; Allen's General Relations\r\n\r\n(defrecord GeneralRelation [relations]\r\n  #?(:clj clojure.lang.IFn :cljs cljs.core/IFn)\r\n  (#?(:clj invoke :cljs -invoke) [_ x y]\r\n    (some (fn [f] (when (f x y) f)) relations)))\r\n\r\n;; Relations are 'basic relations' in [ALSPAUGH-2009]. Invoking a\r\n;; general relation on two intervals returns the basic relation that\r\n;; causes the general relation to hold. Note there can only be one\r\n;; such basic relation due to the relations being distinct.\r\n\r\n(defn new-relation [& basic-relations]\r\n  (->GeneralRelation basic-relations))\r\n\r\n(def ^{:doc \"A function to determine the (basic) relation between two intervals.\"}\r\n  basic-relation\r\n  (apply new-relation basic-relations))\r\n\r\n(defn relation [x y]\r\n  (relation->kw (basic-relation x y)))\r\n\r\n;; Operations on relations\r\n\r\n(defn complement-r\r\n  \"Return the complement of the general relation. The complement ~r of\r\n  a relation r is the relation consisting of all basic relations not\r\n  in r.\"\r\n  [^GeneralRelation r]\r\n  (assoc r :relations (remove (set (:relations r)) basic-relations)))\r\n\r\n(defn not-yet-implemented []\r\n  #?(:clj (new UnsupportedOperationException \"Not yet implemented\")\r\n     :cljs (js/Error. \"Not yet implemented\")))\r\n\r\n(defn compose-r\r\n  \"Return the composition of r and s\"\r\n  [r s]\r\n  (throw (not-yet-implemented)))\r\n\r\n(defn converse-r\r\n  \"Return the converse of the given general relation. The converse !r\r\n  of a relation r is the relation consisting of the converses of all\r\n  basic relations in r.\"\r\n  [^GeneralRelation r]\r\n  (assoc r :relations (map conv (:relations r))))\r\n\r\n(defn intersection-r\r\n  \"Return the intersection of the r with s\"\r\n  [^GeneralRelation r ^GeneralRelation s]\r\n  (s/assert r #(instance? GeneralRelation %))\r\n  (->GeneralRelation (set/intersection (set (:relations r))))\r\n  (throw (not-yet-implemented)))\r\n\r\n;; Useful named general relations\r\n\r\n(def disjoint? (new-relation precedes? preceded-by? meets? met-by?))\r\n(def concur? (complement-r disjoint?))\r\n(def precedes-or-meets? (new-relation precedes? meets?))\r\n\r\n;; Functions that make use of Allens' Interval Algebra\r\n\r\n(defprotocol IIntervalOps\r\n  (slice [this beginning end] \"Fit the interval between beginning and end, slicing off one or both ends as necessary\")\r\n  (splice [this ival] \"Splice another interval on to this one\")\r\n  (split [this t] \"Split ival into 2 intervals at t, returned as a 2-element vector\"))\r\n\r\n(defn split-with-assert [ival t]\r\n  (assert\r\n    (and (t/< (t/beginning ival) t)\r\n         (t/< t (t/end ival))))\r\n  (split ival t))\r\n\r\n(defn slice-interval [ival beginning end]\r\n  (let [beginning (t/max (t/beginning ival) beginning)\r\n        end (t/min (t/end ival) end)]\r\n    (when (t/< beginning end)\r\n      (if (associative? ival)\r\n        (assoc ival :tick/beginning beginning :tick/end end)\r\n        (make-interval beginning end)))))\r\n\r\n(defn split-interval [ival t]\r\n  [(slice-interval ival (t/beginning ival) t)\r\n   (slice-interval ival t (t/end ival))])\r\n\r\n;; Maps either represent single intervals, having :tick/beginning and\r\n;; :tick/end, or with a :tick/intervals entry containing groups of\r\n;; time-ordered disjoint intervals. Support groups using plain maps\r\n;; helps preserve data in both maps being spliced together.\r\n;;\r\n;; Recursive structures not yet possible.\r\n\r\n;; I'm unhappy that I haven't been able to write a recursive\r\n;; implementation of flatten.\r\n(defn flatten [s]\r\n  (mapcat\r\n    (fn [x]\r\n      (if-let [ivals (:tick/intervals x)]\r\n        ivals [x]))\r\n    s))\r\n\r\n(extend-protocol IIntervalOps\r\n  #?(:clj clojure.lang.APersistentMap :cljs PersistentArrayMap)\r\n  (slice [this beginning end]\r\n    (if-let [intervals (:tick/intervals this)]\r\n      (assoc this :tick/intervals (vec (keep #(slice % beginning end) intervals)))\r\n      (slice-interval this beginning end)))\r\n  (splice [this other]\r\n    (let [this-intervals (:tick/intervals this)\r\n          other-intervals (:tick/intervals other)]\r\n      (cond\r\n        (and this-intervals other-intervals)\r\n        (update this :tick/intervals concat other-intervals)\r\n        this-intervals\r\n        (update this :tick/intervals clojure.core/conj other)\r\n        other-intervals\r\n        (update other :tick/intervals clojure.core/conj this)\r\n        :else\r\n        {:tick/intervals [this other]})))\r\n  (split [this t]\r\n    (if-let [intervals (:tick/intervals this)]\r\n      [(assoc this :tick/intervals\r\n              (vec (keep #(slice % (t/beginning this) t) intervals)))\r\n       (assoc this :tick/intervals\r\n              (vec (keep #(slice % t (t/end this)) intervals)))]\r\n      (split-interval this t)))\r\n\r\n  LocalDate\r\n  (slice [this beginning end]\r\n    (slice-interval this beginning end))\r\n  (splice [this ival]\r\n    (throw (ex-info \"splice not implemented\" {:this this :interval ival})))\r\n  (split [this t]\r\n    (split-interval this t))\r\n\r\n  YearMonth\r\n  (slice [this beginning end]\r\n    (slice-interval this beginning end))\r\n  (splice [this ival]\r\n    (throw (ex-info \"splice not implemented\" {:this this :interval ival})))\r\n  (split [this t]\r\n    (split-interval this t))\r\n\r\n  Year\r\n  (slice [this beginning end]\r\n    (slice-interval this beginning end))\r\n  (splice [this ival]\r\n    (throw (ex-info \"splice not implemented\" {:this this :interval ival})))\r\n  (split [this t]\r\n    (split-interval this t)))\r\n\r\n(defn concur\r\n  \"Return the interval representing the interval, if there is one,\r\n  representing the interval of time the given intervals are\r\n  concurrent.\"\r\n  [x y]\r\n  (case (relation x y)\r\n    :overlaps (slice x (t/beginning y) (t/end x))\r\n    :overlapped-by (slice x (t/beginning x) (t/end y))\r\n    (:starts :finishes :during :equals) x\r\n    (:started-by :finished-by :contains) (slice x (t/beginning y) (t/end y))\r\n    nil))\r\n\r\n(defn ^:experimental concurrencies\r\n  \"Return a sequence of occurances where intervals coincide (having\r\n  non-nil concur intervals).\"\r\n  [& intervals]\r\n  (let [intervals (vec intervals)]\r\n    (for [xi (range (count intervals))\r\n          yi (range (count intervals))\r\n          :when (< xi yi)\r\n          :let [x (get intervals xi)\r\n                y (get intervals yi)\r\n                conc (concur x y)]\r\n          :when conc]\r\n      {:x x :y y :relation (relation x y) :concur conc})))\r\n\r\n;; Comparison. We have now built up the capability of comparing\r\n;; intervals using the normal <, >, <=, >= operators.\r\n\r\n(defn interval [t]\r\n  (new-interval (t/beginning t) (t/end t)))\r\n\r\n(extend-protocol t/ITimeComparison\r\n  #?(:clj clojure.lang.APersistentMap :cljs PersistentArrayMap)\r\n  (< [x y] (#{precedes? meets?} (basic-relation x y)))\r\n  (<= [x y] (#{precedes? meets? equals? starts? overlaps? finished-by?} (basic-relation x y)))\r\n  (> [x y] (#{preceded-by? met-by?} (basic-relation x y)))\r\n  (>= [x y] (#{preceded-by? met-by? equals? started-by? overlapped-by? finishes?} (basic-relation x y))))\r\n\r\n;; Interval sequences - time-ordered sequences of disjoint intervals\r\n\r\n(defn ordered-disjoint-intervals?\r\n  \"Are all the intervals in the given set time-ordered and\r\n  disjoint? This is a useful property of a collection of\r\n  intervals. The given collection must contain proper intervals (that\r\n  is, intervals that have finite greater-than-zero durations).\"\r\n  [s]\r\n  (let [rel (new-relation precedes? meets?)]\r\n    (some?\r\n     (loop [[x & xs] s]\r\n       (if (or (nil? x) (nil? (first xs))) true\r\n           (when (rel x (first xs))\r\n             (recur xs)))))))\r\n\r\n(defn- assert-proper-head\r\n  \"Is the first interval in a sequence time-ordered and disjoint with\r\n  respect to the second? Note, only compares first two in a\r\n  sequence. Used by functions to ensure the head of the (possibly\r\n  lazy) sequence satisfies this invariant.\"\r\n  [s]\r\n  (let [[initial subsequent] s]\r\n    (when (and (nil? initial) subsequent)\r\n      (throw (ex-info \"Unexpected nil in sequence\" {:nil-before subsequent})))\r\n    (when subsequent\r\n      (when-not (precedes-or-meets? initial subsequent)\r\n        (throw\r\n          (ex-info\r\n            \"Intervals in sequence violate requirement that intervals are time-ordered and disjoint\"\r\n            {:interval1 initial\r\n             :interval2 subsequent}))))\r\n    s))\r\n\r\n(defn unite\r\n  \"Unite concurrent intervals. Intervals must be ordered by beginning\r\n  but not necessarily disjoint (the purpose of this function is to\r\n  splice together intervals that are concurrent resulting in a\r\n  time-ordered sequence of disjoint intervals that is returned.\"\r\n  [intervals]\r\n  (letfn [(unite [intervals]\r\n            (lazy-seq\r\n              (let [[ival1 ival2 & r] intervals]\r\n                (cond\r\n                  (nil? ival2) (if ival1 (list ival1) (list))\r\n                  :else\r\n                  (case (relation ival1 ival2)\r\n                    (:precedes :meets)\r\n                    (cons ival1 (unite (rest intervals)))\r\n                    (:overlaps :contains :starts :started-by :finished-by)\r\n                    (unite (cons (splice ival1 ival2) r))\r\n                    (throw\r\n                      (ex-info \"Intervals in sequence violate requirement that intervals are time-ordered\" {:interval1 ival1\r\n                                                                                                            :interval2 ival2\r\n                                                                                                            :relation (relation ival1 ival2)})))))))]\r\n    (unite intervals)))\r\n\r\n(defn new-interval-group\r\n  \"Return an interval group. Interval groups are maps with\r\n  a :tick/intervals entry that contain a time-ordered sequence of\r\n  disjoint intervals.\"\r\n  [x]\r\n  (if (:tick/intervals x)\r\n    x\r\n    {:tick/intervals [x]}))\r\n\r\n(defn normalize\r\n  \"Within a time-ordered sequence of disjoint intervals, return a\r\n  sequence of interval groups, splicing together meeting intervals.\"\r\n  [intervals]\r\n  (letfn [(normalize [intervals]\r\n            (lazy-seq\r\n              (let [[ival1 ival2 & r] intervals]\r\n                (if (nil? ival2) (if ival1 (list (new-interval-group ival1)) (list))\r\n                    (case (relation ival1 ival2)\r\n                      :meets (normalize (cons (splice ival1 ival2) r))\r\n                      (cons (new-interval-group ival1)\r\n                            (normalize (assert-proper-head (rest intervals)))))))))]\r\n    (normalize (assert-proper-head intervals))))\r\n\r\n(defn union\r\n  \"Merge multiple time-ordered sequences of disjoint intervals into a\r\n  single sequence of time-ordered disjoint intervals.\"\r\n  [& colls]\r\n  (letfn [(union [colls]\r\n            (lazy-seq\r\n              (if (<= (count colls) 1)\r\n                (first colls)\r\n                (let [[c1 c2 & r] (sort-by #(t/beginning (first %)) (remove nil? colls))]\r\n                  (if (nil? c2)\r\n                    c1\r\n                    (if (disjoint? (first c1) (first c2))\r\n                      (cons (first c1) (union (apply list (next c1) c2 r)))\r\n                      (union (apply list\r\n                                    (cons (splice (first c1) (first c2))\r\n                                          (next c1))\r\n                                    (next c2)\r\n                                    r))))))))]\r\n    (union (for [coll colls :when coll] (sort-by t/beginning coll)))))\r\n\r\n(defn conj [coll interval]\r\n  (union coll [interval]))\r\n\r\n(defn intersection\r\n  \"Return a time-ordered sequence of disjoint intervals where two or\r\n  more intervals of the given sequences are concurrent. Arguments must\r\n  be time-ordered sequences of disjoint intervals.\"\r\n  ;; Single arity\r\n  ([s1] s1)\r\n  ;; 2-arity\r\n  ([s1 s2]\r\n   (letfn\r\n       [(intersection [xs ys]\r\n          (lazy-seq\r\n            (let [x (first xs)\r\n                  y (first ys)]\r\n              (if (and x y)\r\n                (case (relation x y)\r\n                  (:precedes :meets)\r\n                  (intersection (assert-proper-head (next xs)) ys)\r\n\r\n                  (:preceded-by :met-by)\r\n                  (intersection xs (assert-proper-head (next ys)))\r\n\r\n                  :started-by\r\n                  (cons (slice x (t/beginning y) (t/end y))\r\n                        (intersection\r\n                          (assert-proper-head (cons (slice x (t/end y) (t/end x)) (next xs)))\r\n                          (assert-proper-head (next ys))))\r\n\r\n                  :finished-by\r\n                  (cons (slice x (t/beginning y) (t/end y))\r\n                        (intersection\r\n                          (assert-proper-head (next xs))\r\n                          (assert-proper-head (next ys))))\r\n\r\n                  :overlaps\r\n                  (cons (slice x (t/beginning y) (t/end x))\r\n                        (intersection\r\n                          (assert-proper-head (cons (slice x (t/beginning y) (t/end x)) (next xs)))\r\n                          (assert-proper-head (cons (slice y (t/end x) (t/end y)) (next ys)))))\r\n\r\n\r\n                  :overlapped-by\r\n                  (cons (slice x (t/beginning x) (t/end y))\r\n                        (intersection\r\n                          (assert-proper-head (cons (slice x (t/end y) (t/end x)) (next xs)))\r\n                          (assert-proper-head (next ys))))\r\n\r\n                  :contains\r\n                  (cons (slice x (t/beginning y) (t/end y))\r\n                        (intersection\r\n                          (assert-proper-head (cons (slice x (t/end y) (t/end x)) (next xs)))\r\n                          (assert-proper-head (next ys))))\r\n\r\n                  :during\r\n                  (cons x\r\n                        (intersection\r\n                          (assert-proper-head (next xs))\r\n                          (assert-proper-head (cons (slice y (t/end x) (t/end y)) (next ys)))))\r\n\r\n                  :equals\r\n                  (cons x\r\n                        (intersection\r\n                          (assert-proper-head (next xs))\r\n                          (assert-proper-head (next ys))))\r\n\r\n                  :finishes\r\n                  (cons x\r\n                        (intersection\r\n                          (assert-proper-head (next xs))\r\n                          (assert-proper-head (next ys))))\r\n\r\n                  :starts\r\n                  (cons x\r\n                        (intersection\r\n                          (assert-proper-head (next xs))\r\n                          (assert-proper-head (cons (slice y (t/end x) (t/end y))\r\n                                                    (next ys))))))\r\n\r\n                ;; List of nothing because one of the collections is\r\n                ;; empty, so the intersection must be empty too.\r\n                (list)))))]\r\n\r\n       (intersection\r\n         (assert-proper-head s1)\r\n         (assert-proper-head s2))))\r\n\r\n  ([s1 s2 & sets]\r\n   (reduce intersection s1 (clojure.core/conj sets s2))))\r\n\r\n(defn intersects? [ivals interval]\r\n  (not-empty (intersection ivals [interval])))\r\n\r\n(defn difference\r\n  \"Return an interval set that is the first set without elements of\r\n  the remaining sets.\"\r\n  ([s1] s1)\r\n  ([s1 s2]\r\n   (letfn [(difference [xs ys]\r\n             (let [[x] xs [y] ys]\r\n               (if x\r\n                 (if y\r\n                   (lazy-seq\r\n                     (case (relation x y)\r\n                       (:precedes :meets)\r\n                       (cons x (difference (assert-proper-head (next xs)) ys))\r\n\r\n                       (:preceded-by :met-by)\r\n                       (difference xs (assert-proper-head (next ys)))\r\n\r\n                       (:finishes :during :equals)\r\n                       (difference\r\n                         (assert-proper-head (next xs))\r\n                         (assert-proper-head ys))\r\n\r\n                       :starts\r\n                       (difference\r\n                         (assert-proper-head (next xs))\r\n                         ys)\r\n\r\n                       (:started-by :overlapped-by)\r\n                       (difference\r\n                         (assert-proper-head\r\n                           (cons (slice x (t/end y) (t/end x)) (next xs)))\r\n                         (assert-proper-head (next ys)))\r\n\r\n                       :finished-by\r\n                       (cons (slice x (t/beginning x) (t/beginning y))\r\n                             (difference\r\n                               (assert-proper-head (next xs))\r\n                               (assert-proper-head (next ys))))\r\n\r\n                       :overlaps\r\n                       (cons (slice x (t/beginning x) (t/beginning y))\r\n                             (difference\r\n                               (assert-proper-head (next xs))\r\n                               ys))\r\n\r\n                       :contains\r\n                       (cons (slice x (t/beginning x) (t/beginning y))\r\n                             (difference\r\n                               (assert-proper-head\r\n                                 (cons (slice x (t/end y) (t/end x)) (next xs)))\r\n                               (assert-proper-head (next ys))))))\r\n                   ;; If xs but no ys\r\n                   xs)\r\n                 ;; If no xs or ys\r\n                 (list))))]\r\n\r\n     (assert-proper-head s1)\r\n     (assert-proper-head s2)\r\n\r\n     (difference s1 s2)))\r\n\r\n  ([s1 s2 & sets]\r\n   (reduce difference s1 (clojure.core/conj sets s2))))\r\n\r\n(defn complement [coll]\r\n  (if (empty? coll)\r\n    [(new-interval (t/min-of-type (t/now)) (t/max-of-type (t/now)))]\r\n    (let [r (->> coll\r\n                 (partition 2 1)\r\n                 (keep (fn [[x y]]\r\n                         (when-not (meets? x y)\r\n                           (new-interval (t/end x) (t/beginning y))))))]\r\n      (cond-> r\r\n        (not= (t/beginning (first coll)) (t/min-of-type (t/beginning (first coll))))\r\n        (#(concat [(new-interval (t/min-of-type (t/beginning (first coll))) (t/beginning (first coll)))] %))\r\n        (not= (t/end (last coll)) (t/max-of-type (t/end (last coll))))\r\n        (#(concat % [(new-interval (t/end (last coll)) (t/max-of-type (t/end (last coll))))]))))))\r\n\r\n(defn disjoin\r\n  \"Split s1 across the grating defined by s2\"\r\n  ([s1] s1)\r\n  ([s1 s2]\r\n   (loop [xs s1\r\n          ys s2\r\n          result []]\r\n     (if (not-empty xs)\r\n       (if (not-empty ys)\r\n         (let [x (first xs) y (first ys)]\r\n           (case (relation x y)\r\n             (:precedes :meets) (recur (next xs) ys (clojure.core/conj result x))\r\n;; TODO:\r\n;;             (:preceded-by :met-by) (recur xs (next ys) result)\r\n;;             (:finishes :during :equals) (recur (next xs) (next ys) result)\r\n;;             :starts (recur (next xs) ys result)\r\n;;             (:started-by :overlapped-by)\r\n;;             (recur (cons (slice x (t/end y) (t/end x)) (next xs)) (next ys) result)\r\n;;             :finished-by (recur (next xs) (next ys) (clojure.core/conj result (slice x (t/beginning x) (t/beginning y))))\r\n;;            :overlaps (recur (next xs) ys (clojure.core/conj result (slice x (t/beginning x) (t/beginning y))))\r\n;;            :contains\r\n             #_(recur (cons (slice x (t/end y) (t/end x)) (next xs))\r\n                    (next ys)\r\n                    (clojure.core/conj result (slice x (t/beginning x) (t/beginning y))))))\r\n         (apply clojure.core/conj result xs))\r\n       result)))\r\n  ([s1 s2 & sets]\r\n   (reduce difference s1 (clojure.core/conj sets s2))))\r\n\r\n;; Division\r\n\r\n(defn- divide-by-apply\r\n  \"Return a lazy sequence of java.time.Temporal instances over the\r\n  given (local) interval.\"\r\n  [ival f]\r\n  (cond->\r\n      (t/range\r\n        (f (t/beginning ival))\r\n        (f (t/end ival)))\r\n    ;; Since range is exclusive, we must add one more value, but only\r\n    ;; if it concurs rather than merely meets.\r\n    (concur (f (t/end ival)) ival)\r\n    (concat [(f (t/end ival))])))\r\n\r\n(defn divide-by-duration\r\n  \"Divide an interval by a duration, returning a sequence of\r\n  intervals. If the interval cannot be wholly sub-divided by the\r\n  duration divisor, the last interval will represent the 'remainder'\r\n  of the division and not be as long as the other preceeding\r\n  intervals.\"\r\n  [ival dur]\r\n  (->> (t/range\r\n         (t/beginning ival)\r\n         (t/end ival)\r\n         dur)\r\n       ;; Bound by given interval, last will become a remainder.\r\n       (map (juxt identity #(t/min (t/forward-duration % dur) (t/end ival))))))\r\n\r\n(defn divide-by-period\r\n  [ival period]\r\n  (->> (t/range\r\n         (t/beginning ival)\r\n         (t/end ival)\r\n         period)\r\n       ;; Bound by given interval, last will become a remainder.\r\n       (map (juxt identity #(t/min (t/forward-duration % period) (t/end ival))))))\r\n\r\n(defn divide-by-divisor [ival divisor]\r\n  (divide-by-duration ival (cljc.java-time.duration/divided-by (t/duration ival) divisor)))\r\n\r\n(defprotocol IDivisibleInterval\r\n  (divide-interval [divisor ival] \"Divide an interval by a given divisor\"))\r\n\r\n(extend-protocol IDivisibleInterval\r\n  #?(:clj clojure.lang.Fn :cljs function)\r\n  (divide-interval [f ival] (divide-by-apply ival f))\r\n  Duration\r\n  (divide-interval [dur ival] (divide-by-duration ival dur))\r\n  Period\r\n  (divide-interval [period ival] (divide-by-period ival period))\r\n  #?(:clj Long :cljs number)\r\n  (divide-interval [divisor ival] (divide-by-divisor ival divisor)))\r\n\r\n;; TODO: hours-over, minutes-over, seconds-over, millis-over?,\r\n\r\n(extend-protocol t/IDivisible\r\n  LocalDate\r\n  (divide [ld d] (divide-interval d ld))\r\n  Year\r\n  (divide [n d] (divide-interval d n))\r\n  YearMonth\r\n  (divide [n d] (divide-interval d n))\r\n  #?(:clj clojure.lang.APersistentMap :cljs PersistentArrayMap)\r\n  (divide [ival o] (divide-interval o ival)))\r\n\r\n;; Grouping (similar to Division)\r\n\r\n;; TODO: tag literals data_readers.clj for tick?\r\n;; #tick/instant \"\"\r\n;; #tick/local-date-time \"\"\r\n;; #tick/local-date \"\"\r\n\r\n(defn group-by-intervals\r\n  \"Divide intervals in s1 by (disjoint ordered) intervals in s2,\r\n  splitting if necessary, grouping by s2. Complexity is O(n) rather\r\n  than O(n^2)\"\r\n  [intervals-to-group-by ivals]\r\n  {:pre [(ordered-disjoint-intervals? intervals-to-group-by)\r\n         (ordered-disjoint-intervals? ivals)]}\r\n  (loop [intervals ivals\r\n         groups intervals-to-group-by\r\n         result {}\r\n         current-intervals []]\r\n    (if (not-empty intervals)\r\n      (if (not-empty groups)\r\n        (let [ival (first intervals)\r\n              group (first groups)]\r\n\r\n          (case (relation ival group)\r\n            ;; If precedes or meets, discard ival\r\n            (:precedes :meets)\r\n            (recur (next intervals) groups result current-intervals)\r\n\r\n            (:preceded-by :met-by)\r\n            (recur\r\n              intervals (next groups)\r\n              (cond-> result\r\n                (not-empty current-intervals)\r\n                (assoc group current-intervals))\r\n              [])\r\n\r\n            :finishes\r\n            (recur\r\n              (next intervals)\r\n              (next groups)\r\n              (assoc result group (clojure.core/conj current-intervals ival))\r\n              [])\r\n\r\n            :equals\r\n            (recur\r\n              (next intervals)\r\n              (next groups)\r\n              (assoc result group (clojure.core/conj current-intervals ival))\r\n              [])\r\n\r\n            :finished-by\r\n            (let [[seg1 seg2] (split-with-assert ival (t/beginning group))]\r\n              (recur\r\n                (next intervals)\r\n                (next groups)\r\n                (assoc result group (clojure.core/conj current-intervals seg2))\r\n                []))\r\n\r\n            :started-by\r\n            (let [[seg1 seg2] (split-with-assert ival (t/end group))]\r\n              (recur\r\n                (cons seg2 (next intervals))\r\n                (next groups)\r\n                (assoc result group (clojure.core/conj current-intervals seg1))\r\n                []))\r\n\r\n            :overlapped-by\r\n            (let [[seg1 seg2] (split-with-assert ival (t/end group))]\r\n              (recur\r\n                (cons seg2 (next intervals))\r\n                (next groups)           ; end of this group\r\n                (assoc result group (clojure.core/conj current-intervals seg1))\r\n                []))\r\n\r\n            (:starts :during)\r\n            (recur\r\n              (next intervals)\r\n              groups\r\n              result\r\n              (clojure.core/conj current-intervals ival))\r\n\r\n            (:contains)\r\n            (recur\r\n              (next intervals)\r\n              (next groups)\r\n              (assoc result group [(slice ival (t/beginning group) (t/end group))])\r\n              [])\r\n\r\n            (:overlaps)\r\n            (recur\r\n              (next intervals)\r\n              groups\r\n              result\r\n              (clojure.core/conj current-intervals (slice ival (t/beginning group) (t/end ival))))))\r\n\r\n        ;; No more groups\r\n        result)\r\n\r\n      ;; No more intervals\r\n      (cond-> result\r\n        (and (first groups) (not-empty current-intervals))\r\n        (assoc (first groups) current-intervals)))))\r\n\r\n(defprotocol IGroupable\r\n  (group-by [grouping ivals]))\r\n\r\n(extend-protocol IGroupable\r\n  #?(:clj clojure.lang.Fn :cljs function)\r\n  (group-by [f ivals]\r\n    (if (empty? ivals)\r\n      {}\r\n      (let [r (apply bounds ivals)\r\n            b (f (t/beginning r))\r\n            e (f (t/end r))\r\n            groups (t/range b (t/inc e))]\r\n        (group-by groups ivals))))\r\n  #?(:clj Iterable :cljs LazySeq)\r\n  (group-by [groups ivals]\r\n    (group-by-intervals groups ivals))\r\n  #?(:cljs PersistentVector)\r\n  #?(:cljs\r\n     (group-by [groups ivals]\r\n       (group-by-intervals groups ivals))))\r\n"]}