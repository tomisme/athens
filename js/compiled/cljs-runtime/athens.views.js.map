{"version":3,"sources":["athens/views.cljs"],"mappings":";;;;;;;;;;;;;;;;AAqBA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKA;AAUL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AAYL,AAAA,AAAMC;AAAN,AAEE,AAAMC,AAAO,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACC,AAAAA,AAAAA;;AAAd,AACE,AAAU,AAAA,AAAAC,AAAA,AAAOH;AAAjB;;AAAA,AACE,AAACI,AAAS,AAAA,AAAAD,AAAMH;;AAChB,AAAAK,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACC,AAAAA,AAAAA;;;AAGP,AAAA,AAAMC,AACHC;AADH,AAEE,AAAMC,AAAG,AAAAC;AACHC,AAAK,AAAA,AAAA,AAAA,AAAIH;AADf,AAEE,AAAA,AAAAI,AAAM,AAAUH;AAAhB,AAAqB,AAAAI,AAAA,AAAA,AAAyB,AAAA,AAAAD;AAAzB,AAAA,AAAAC,AAAAA,AAACP,AAAAA,AAAAA;;;AACtB,AAAaG,AAAGE;;AAMpB,AAAA,AAAMG;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA;;AAMA,AAAA,AAAMC;AAAN,AAEE;AAAA,AAAA,AAKGC,AAAMC;;;AAGX,AAAA,AAAMC;AAAN,AAEE,AAAMM,AAAc,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACvB,AAAAA,AAAAA;;AACfwB,AAAc,AAAA,AAAA,AAAA,AAAA,AAAAvB,AAAKqB;AADzBL,AAAA,AAAAhB,AAE+C,AAAA2B,AAAMb;AAANc,AAAA,AAAA;AAAAC,AAAA,AAAA,AAA+BN;AAA/B,AAAA,AAAAI,AAAAC,AAAAC,AAAAF,AAAAC,AAAAC,AAACC,AAAAA,AAAAA;;AAFhDd,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAEcQ;AAFd,AAAAJ,AAAAJ,AAAA,AAEyBS;AAFzB,AAAAL,AAAAJ,AAAA,AAEsCU;AAFtC,AAGE,AACEF;AADF,AACSO,AAAoBL;;AAD7B,AAEED;AAFF,AAEUO,AAAqBN;;AAF/B,AAAA,AAAA,AAAA;;;;;AAMJ;;;;AAAA,AAAMO,AAGHC;AAHH,AAAA,AAIG,AAAAC,AAAMD;AAANC,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AACSxB;;;AADT;AAEQ0B;;;AAFR;AAGSzB;;;AAHT;AAIQG;;;;AACNsB;;;;;AAGL,AAAA,AAAMC;AAAN,AAEE,AAAMjB,AAAc,AAAAkB,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACxC,AAAAA,AAAAA;;AACfyC,AAAQ,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC1C,AAAAA,AAAAA;;AADf,AAEE;AAAA,AACE,AAAMmC,AAAW,AAAA,AAAA,AAAA,AAAA,AAAAlC,AAAKqB;AAAtB,AAAA,AAAA,AAAA,AAAA,AAEIzB,AACA8C,AACD,AAAA,AAAA1C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKwC,AACFG,AACK,AAACC,AAAUlD,AACfmD,AACK,AAAA,AAAA,AAACC,AAAUnD,AACY,AAAA,AAAA,AAAM,AAAA,AAACoD,AAAEb,AACPc,AAC7Bf,AAAYC,AACbe,AACAC","names":["athens.views/app-wrapper-style","athens.views/main-content-style","athens.views/alert","alert-","G__57939","re-frame.core/subscribe","cljs.core/deref","js/alert","G__57940","re-frame.core/dispatch","athens.views/file-cb","e","fr","js/FileReader","file","p1__57941#","G__57942","athens.views/about-panel","athens.views/pages-panel","athens.views.all-pages/table","athens.db/dsdb","athens.views/page-panel","map__57943","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","current-route","G__57944","uid","title","string","id","G__57945","G__57946","G__57947","posh.reagent/pull","athens.views.node-page/node-page-component","athens.views.block-page/block-page-component","athens.views/match-panel","route-name","G__57949","cljs.core/Keyword","athens.views.daily-notes/daily-notes-panel","athens.views/main-panel","G__57950","loading","G__57951","athens.views.athena/athena-component","athens.views.spinner/initial-spinner-component","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$1","athens.views.left-sidebar/left-sidebar","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","athens.views.daily-notes/db-scroll-daily-notes","athens.views.right-sidebar/right-sidebar-component","athens.views.devtool/devtool-component"],"sourcesContent":["(ns athens.views\n  (:require\n    [athens.db :as db]\n    [athens.subs]\n    [athens.views.all-pages :refer [table]]\n    [athens.views.athena :refer [athena-component]]\n    [athens.views.block-page :refer [block-page-component]]\n    [athens.views.daily-notes :refer [daily-notes-panel db-scroll-daily-notes]]\n    [athens.views.devtool :refer [devtool-component]]\n    [athens.views.left-sidebar :refer [left-sidebar]]\n    [athens.views.node-page :refer [node-page-component]]\n    [athens.views.right-sidebar :refer [right-sidebar-component]]\n    [athens.views.spinner :refer [initial-spinner-component]]\n    [posh.reagent :refer [pull]]\n    [re-frame.core :refer [subscribe dispatch]]\n    [stylefy.core :refer [use-style]]))\n\n\n;;; Styles\n\n\n(def app-wrapper-style\n  {:display \"grid\"\n   :grid-template-areas\n   \"'left-sidebar main-content secondary-content'\n   'devtool devtool devtool'\"\n   :grid-template-columns \"auto 1fr auto\"\n   :grid-template-rows \"1fr auto\"\n   :height \"100vh\"})\n\n\n(def main-content-style\n  {:flex \"1 1 100%\"\n   :grid-area \"main-content\"\n   :align-items \"flex-start\"\n   :justify-content \"stretch\"\n   :display \"flex\"\n   :overflow-y \"auto\"})\n\n\n;;; Components\n\n\n(defn alert\n  []\n  (let [alert- (subscribe [:alert])]\n    (when-not (nil? @alert-)\n      (js/alert (str @alert-))\n      (dispatch [:alert/unset]))))\n\n\n(defn file-cb\n  [e]\n  (let [fr (js/FileReader.)\n        file (.. e -target -files (item 0))]\n    (set! (.-onload fr) #(dispatch [:parse-datoms (.. % -target -result)]))\n    (.readAsText fr file)))\n\n\n;; Panels\n\n\n(defn about-panel\n  []\n  [:div\n   [:h1 \"About Panel\"]])\n\n\n(defn pages-panel\n  []\n  (fn []\n    ;;[:div\n    ;; [:input.input-file {:type      \"file\"\n    ;;                     :name      \"file-input\"\n    ;;                     :on-change (fn [e] (file-cb e))}]]\n    [table db/dsdb]))\n\n\n(defn page-panel\n  []\n  (let [current-route (subscribe [:current-route])\n        uid           (-> @current-route :path-params :id)\n        {:keys [node/title block/string db/id]} @(pull db/dsdb '[*] [:block/uid uid])]\n    (cond\n      title [node-page-component id]\n      string [block-page-component id]\n      :else [:h3 \"404: This page doesn't exist\"])))\n\n\n(defn match-panel\n  \"When app initializes, `route-name` is `nil`. Side effect of this is that a daily page for today is automatically\n  created when app inits. This is expected, but perhaps shouldn't be a side effect here.\"\n  [route-name]\n  [(case route-name\n     :about about-panel\n     :home daily-notes-panel\n     :pages pages-panel\n     :page page-panel\n     daily-notes-panel)])\n\n\n(defn main-panel\n  []\n  (let [current-route (subscribe [:current-route])\n        loading (subscribe [:loading?])]\n    (fn []\n      (let [route-name (-> @current-route :data :name)]\n        [:<>\n         [alert]\n         [athena-component]\n         (if @loading\n           [initial-spinner-component]\n           [:div (use-style app-wrapper-style)\n            [left-sidebar]\n            [:div (use-style main-content-style\n                             {:on-scroll (when (= route-name :home)\n                                           db-scroll-daily-notes)})\n             [match-panel route-name]]\n            [right-sidebar-component]\n            [devtool-component]])]))))\n"]}