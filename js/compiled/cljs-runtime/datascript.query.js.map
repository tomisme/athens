{"version":3,"sources":["datascript/query.cljc"],"mappings":"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","names":["datascript.query/lru-cache-size","this__4439__auto__","k__4440__auto__","this__4441__auto__","k65143","else__4442__auto__","G__65148","cljs.core/Keyword","rels","sources","rules","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__4458__auto__","f__4459__auto__","init__4460__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","ret__4461__auto__","p__65149","vec__65150","k__4462__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","v__4463__auto__","this__4453__auto__","writer__4454__auto__","opts__4455__auto__","pr-pair__4456__auto__","keyval__4457__auto__","cljs.core/pr-sequential-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__65142","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4437__auto__","__meta","this__4434__auto__","__hash","this__4443__auto__","cljs.core/count","this__4435__auto__","h__4297__auto__","fexpr__65153","coll__4436__auto__","cljs.core/hash-unordered-coll","this65144","other65145","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","this__4448__auto__","k__4449__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__4446__auto__","k__4447__auto__","pred__65154","cljs.core/keyword-identical?","expr__65155","G__65157","G__65158","G__65159","G__65160","G__65161","G__65162","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__4451__auto__","cljs.core/seq","cljs.core/MapEntry","this__4438__auto__","this__4444__auto__","entry__4445__auto__","cljs.core/vector?","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","datascript.query/Context","this__4482__auto__","cljs.core/List","writer__4483__auto__","cljs.core/-write","G__65146","extmap__4478__auto__","G__65163","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/record?","datascript.query/->Context","datascript.query/map->Context","k65165","G__65169","attrs","tuples","p__65170","vec__65171","G__65164","fexpr__65174","this65166","other65167","pred__65175","expr__65176","G__65178","G__65179","G__65180","G__65181","datascript.query/Relation","G__65168","G__65183","datascript.query/->Relation","datascript.query/map->Relation","datascript.query/single","coll","js/Error","cljs.core/next","cljs.core/first","datascript.query/intersect-keys","attrs1","attrs2","clojure.set.intersection.cljs$core$IFn$_invoke$arity$2","cljs.core/set","cljs.core/keys","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","datascript.query/concatv","seq65184","self__4777__auto__","xs","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core/cat","G__65189","datascript.query/zip","args-arr__4810__auto__","argseq__4811__auto__","seq65186","G__65187","G__65188","self__4776__auto__","a","b","cljs.core.mapv.cljs$core$IFn$_invoke$arity$3","cljs.core/vector","rest","cljs.core.apply.cljs$core$IFn$_invoke$arity$5","cljs.core/mapv","datascript.query/same-keys?","p1__65190#","cljs.core/every?","p1__65191#","datascript.query/looks-like?","pattern","form","cljs.core/sequential?","cljs.core/Symbol","cljs.core/last","p__65201","vec__65206","pattern-el","form-el","cljs.core.map.cljs$core$IFn$_invoke$arity$3","cljs.core/butlast","p__65229","vec__65231","datascript.query/source?","sym","cljs.core/name","datascript.query/free-var?","datascript.query/attr?","datascript.query/lookup-ref?","datascript.query/join-tuples","t1","idxs1","t2","idxs2","l1","l2","res","me.tonsky.persistent-sorted-set.arrays/make-array","n__4666__auto__","i","datascript.query/sum-rel","map__65242","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","map__65243","attrs-a","tuples-a","attrs-b","tuples-b","cljs.core/vec","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","cljs.core/number?","cljs.core/vals","idxb->idxa","iter__4582__auto__","s__65247","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","b__65249","cljs.core/chunk-buffer","i__65248","vec__65250","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__65246","cljs.core/chunk-rest","vec__65253","cljs.core/cons","cljs.core/rest","idx-b","tlen","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core/max","tuples'","cljs.core/persistent!","acc","tuple-b","tuple'","seq__65256","chunk__65257","count__65258","i__65259","vec__65275","c__4609__auto__","cljs.core/chunk-first","vec__65280","idx-a","cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/transient","all-attrs","cljs.core/zipmap","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core.range.cljs$core$IFn$_invoke$arity$0","G__65285","G__65286","G__65283","G__65284","G__65291","datascript.query/prod-rel","rel1","rel2","cljs.core/to-array","cljs.core.map.cljs$core$IFn$_invoke$arity$2","datascript.query/-differ?","seq65294","l","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.take.cljs$core$IFn$_invoke$arity$2","cljs.core.drop.cljs$core$IFn$_invoke$arity$2","datascript.query/-get-else","db","e","else-val","temp__5737__auto__","datom","datascript.db/-search","datascript.query/-get-some","seq65314","G__65315","G__65316","as","_","temp__5739__auto__","cljs.core/reduced","datascript.query/-missing?","datascript.impl.entity/entity","datascript.query/and-fn","seq65317","args","datascript.query/or-fn","seq65318","cljs.core//","datascript.query/built-ins","cljs.core/=","cljs.core/==","cljs.core/not=","cljs.core/<","cljs.core/>","cljs.core/<=","cljs.core/>=","cljs.core/+","cljs.core/-","cljs.core/*","cljs.core/quot","cljs.core/rem","cljs.core/mod","cljs.core/inc","cljs.core/dec","cljs.core/min","cljs.core/zero?","cljs.core/pos?","cljs.core/neg?","cljs.core/even?","cljs.core/odd?","cljs.core/compare","cljs.core/rand","cljs.core/rand-int","cljs.core/true?","cljs.core/false?","cljs.core/nil?","cljs.core/some?","cljs.core/not","cljs.core/complement","cljs.core/identical?","cljs.core/identity","cljs.core/meta","cljs.core/namespace","cljs.core/type","cljs.core/list","cljs.core/array-map","cljs.core/range","cljs.core/empty","cljs.core/str","cljs.core/pr-str","cljs.core/print-str","cljs.core/println-str","cljs.core/prn-str","cljs.core/subs","cljs.core/re-find","cljs.core/re-matches","cljs.core/re-seq","cljs.core/re-pattern","clojure.string/blank?","clojure.string/includes?","clojure.string/starts-with?","clojure.string/ends-with?","datascript.query/built-in-aggregates","sum","terms","cljs.core.sort.cljs$core$IFn$_invoke$arity$1","size","med","G__65361","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","mean","avg","s__65363","b__65365","i__65364","iter__65362","x","delta","js/Math.sqrt","variance","median","stddev","n","cljs.core.sort.cljs$core$IFn$_invoke$arity$2","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core/rand-nth","cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2","cljs.core/shuffle","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","datascript.query/parse-rules","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","cljs.core/group-by","cljs.core/ffirst","datascript.query/empty-rel","binding","vars","datascript.parser/collect-vars-distinct","x__4487__auto__","m__4488__auto__","datascript.query/in->rel","goog/typeOf","m__4485__auto__","cljs.core/missing-protocol","datascript.query/IBinding","value","datascript.parser/BindIgnore","datascript.query.prod_rel.cljs$core$IFn$_invoke$arity$0","datascript.parser/BindScalar","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","datascript.parser/BindColl","datascript.db/seqable?","datascript.parser/source","cljs.core/empty?","p1__65403#","datascript.parser/BindTuple","p1__65404#","p2__65405#","p__65406","vec__65407","datascript.query/resolve-in","context","datascript.parser/SrcVar","cljs.core.update.cljs$core$IFn$_invoke$arity$5","cljs.core/assoc","datascript.parser/RulesVar","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/conj","datascript.query/resolve-ins","bindings","values","datascript.query/*lookup-attrs*","datascript.query/*implicit-source*","datascript.query/getter-fn","attr","idx","tuple","eid","datascript.db/entid","me.tonsky.persistent-sorted-set.arrays/array?","datascript.query/tuple-key-fn","getters","cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$1","p1__65439#","datascript.query/hash-attrs","key-fn","hash-table","key","cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3","datascript.query/hash-join","tuples1","tuples2","common-attrs","common-gtrs1","p1__65441#","common-gtrs2","p1__65442#","keep-attrs1","keep-attrs2","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","keep-idxs1","keep-idxs2","key-fn1","hash","key-fn2","new-tuples","tuple2","tuple1","datascript.query/subtract-rel","map__65449","map__65450","getters-b","p1__65446#","key-fn-b","getters-a","p1__65447#","key-fn-a","p1__65448#","cljs.core/filterv","G__65453","datascript.query/lookup-pattern-db","search-pattern","p1__65454#","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","datoms","attr->prop","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","p__65458","vec__65459","s","datascript.query/matches-pattern?","and__4174__auto__","t","p","datascript.query/lookup-pattern-coll","data","p1__65465#","attr->idx","p__65466","vec__65467","datascript.query/normalize-pattern-clause","clause","datascript.query/lookup-pattern","source","cljs.core/native-satisfies?","datascript.db/ISearch","datascript.query/collapse-rels","new-rel","rel","datascript.query/rel-with-attr","p1__65474#","cljs.core/some","datascript.query/context-resolve-val","fexpr__65475","datascript.query/rel-contains-attrs?","p1__65476#","datascript.query/rel-prod-by-attrs","p1__65477#","production","p1__65478#","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","datascript.query/-call-fn","f","len","static-args","tuples-args","arg","me.tonsky.persistent-sorted-set.arrays/aclone","tuple-idx","v","datascript.query/resolve-sym","datascript.query/filter-by-pred","vec__65480","vec__65483","seq__65484","first__65485","vec__65486","pred","or__4185__auto__","cljs.core/symbol?","tuple-pred","p1__65479#","datascript.query/bind-by-fn","vec__65489","vec__65492","seq__65493","first__65494","vec__65495","out","datascript.parser/parse-binding","fun","tuple-fn","s__65499","b__65501","i__65500","iter__65498","val","datascript.query.prod_rel.cljs$core$IFn$_invoke$arity$2","datascript.query/rule?","cljs.core/second","datascript.query/rule-seqid","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","datascript.query/expand-rule","used-args","vec__65503","seq__65504","first__65505","rule","call-args","seqid","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","branches","s__65507","b__65509","i__65508","vec__65510","seq__65511","first__65512","vec__65513","seq__65514","first__65515","iter__65506","vec__65516","seq__65517","first__65518","vec__65519","seq__65520","first__65521","branch","rule-args","clauses","replacements","p1__65502#","clojure.walk/postwalk","x__60288__auto__","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","datascript.query/remove-pairs","ys","pairs","p__65522","vec__65523","y","datascript.query/rule-gen-guards","rule-clause","vec__65526","seq__65527","first__65528","prev-call-args","s__65530","b__65532","i__65531","vec__65533","iter__65529","vec__65536","prev-args","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","datascript.query/walk-collect","cljs.core/deref","p1__65539#","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","datascript.query/collect-vars","datascript.query/split-guards","guards","bound-vars","p__65541","vec__65543","vec__65546","seq__65547","first__65548","datascript.query/solve-rule","final-attrs","final-attrs-map","solve","prefix-context","datascript.query/-resolve-clause","empty-rels?","p1__65550#","stack","frame","vec__65582","vec__65585","seq__65586","first__65587","next-clauses","p1__65551#","cljs.core/split-with","datascript.query/-collect","vec__65588","seq__65589","first__65590","vec__65591","active-gs","pending-gs","p1__65553#","prefix-clauses","s__65595","b__65597","i__65596","iter__65594","datascript.query.concatv.cljs$core$IFn$_invoke$arity$variadic","datascript.query/resolve-pattern-lookup-refs","datascript.db/IDB","vec__65604","tx","datascript.db/entid-strict","datascript.db/ref?","cljs.core.subvec.cljs$core$IFn$_invoke$arity$3","datascript.query/dynamic-lookup-attrs","vec__65610","G__65613","datascript.query/limit-rel","attrs'","cljs.core/select-keys","datascript.query/limit-context","p1__65614#","cljs.core.keep.cljs$core$IFn$_invoke$arity$2","datascript.query/check-bound","bound","p1__65615#","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","clojure.set/subset?","missing","G__65629","datascript.query._resolve_clause.cljs$core$IFn$_invoke$arity$3","orig-clause","pred__65630","expr__65631","G__65633","G__65634","G__65635","G__65636","G__65638","G__65639","G__65645","G__65646","G__65651","G__65652","G__65663","G__65664","G__65670","G__65671","G__65675","G__65676","G__65686","G__65687","G__65691","G__65692","vec__65640","seq__65641","first__65642","source-sym","*implicit-source*-orig-val__65643","*implicit-source*-temp-val__65644","vec__65647","seq__65648","first__65649","contexts","p1__65623#","datascript.query/resolve-clause","p1__65624#","vec__65653","seq__65654","first__65655","vec__65656","seq__65657","first__65658","req-vars","cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3","vec__65666","seq__65667","first__65668","join-context","p1__65625#","p1__65626#","sum-rel","vec__65672","seq__65673","first__65674","vec__65677","seq__65678","first__65679","p1__65627#","negation-vars","context'","negation-context","negation","vec__65688","seq__65689","first__65690","relation","*lookup-attrs*-orig-val__65693","*lookup-attrs*-temp-val__65694","*implicit-source*-orig-val__65698","*implicit-source*-temp-val__65699","G__65701","G__65702","datascript.query._resolve_clause.cljs$core$IFn$_invoke$arity$2","datascript.query/-q","*implicit-source*-orig-val__65704","*implicit-source*-temp-val__65705","G__65708","symbols","datascript.query._collect.cljs$core$IFn$_invoke$arity$3","keep-attrs","copy-map","p1__65706#","s__65712","xs__6292__auto__","iterys__4578__auto__","s__65714","b__65716","i__65715","iter__65713","fs__4579__auto__","iter__65711","cljs.core/aclone","datascript.query/collect","datascript.query._collect.cljs$core$IFn$_invoke$arity$2","datascript.query/-context-resolve","datascript.query/IContextResolve","var","datascript.parser/Variable","datascript.parser/PlainSymbol","datascript.parser/Constant","datascript.query/-aggregate","find-elements","cljs.core.mapv.cljs$core$IFn$_invoke$arity$4","element","fixed-value","datascript.parser/aggregate?","p1__65724#","vals","p1__65725#","datascript.query/idxs-of","p1__65729#","p2__65730#","datascript.query/aggregate","resultset","group-idxs","group-fn","p1__65738#","grouped","s__65740","b__65742","i__65741","vec__65743","iter__65739","vec__65746","datascript.query/-post-process","datascript.query/IPostProcess","find","datascript.parser/FindRel","datascript.parser/FindColl","cljs.core.map.cljs$core$IFn$_invoke$arity$1","datascript.parser/FindScalar","datascript.parser/FindTuple","datascript.query/pull","resolved","s__65779","b__65781","i__65780","iter__65778","datascript.parser/pull?","datascript.pull-parser/parse-pull","s__65783","b__65785","i__65784","iter__65782","env","el","vec__65786","vec__65789","src","spec","datascript.pull-api/pull-spec","datascript.query/query-cache","cljs.core/volatile!","datascript.lru/lru","datascript.query/memoized-parse-query","q","cached","qp","datascript.parser/parse-query","datascript.query/q","seq65799","G__65800","inputs","parsed-q","datascript.parser/find-elements","find-vars","datascript.parser/find-vars","result-arity","with","all-vars","G__65801","datascript.parser/query->map","wheres","G__65802","p1__65798#"],"sourcesContent":["(ns ^:no-doc datascript.query\n  (:require\n   [#?(:cljs cljs.reader :clj clojure.edn) :as edn]\n   [clojure.set :as set]\n   [clojure.string :as str]\n   [clojure.walk :as walk]\n   [datascript.db :as db #?(:cljs :refer-macros :clj :refer) [raise]]\n   [me.tonsky.persistent-sorted-set.arrays :as da]\n   [datascript.lru]\n   [datascript.impl.entity :as de]\n   [datascript.parser :as dp #?@(:cljs [:refer [BindColl BindIgnore BindScalar BindTuple Constant\n                                                FindColl FindRel FindScalar FindTuple PlainSymbol\n                                                RulesVar SrcVar Variable]])]\n   [datascript.pull-api :as dpa]\n   [datascript.pull-parser :as dpp])\n  #?(:clj (:import [datascript.parser BindColl BindIgnore BindScalar BindTuple\n                    Constant FindColl FindRel FindScalar FindTuple PlainSymbol\n                    RulesVar SrcVar Variable])))\n\n;; ----------------------------------------------------------------------------\n\n(def ^:const lru-cache-size 100)\n\n(declare -collect -resolve-clause resolve-clause)\n\n;; Records\n\n(defrecord Context [rels sources rules])\n\n;; attrs:\n;;    {?e 0, ?v 1} or {?e2 \"a\", ?age \"v\"}\n;; tuples:\n;;    [ #js [1 \"Ivan\" 5 14] ... ]\n;; or [ (Datom. 2 \"Oleg\" 1 55) ... ]\n(defrecord Relation [attrs tuples])\n\n\n;; Utilities\n\n(defn single [coll]\n  (assert (nil? (next coll)) \"Expected single element\")\n  (first coll))\n\n(defn intersect-keys [attrs1 attrs2]\n  (set/intersection (set (keys attrs1))\n                    (set (keys attrs2))))\n\n(defn concatv [& xs]\n  (into [] cat xs))\n\n(defn zip\n  ([a b] (mapv vector a b))\n  ([a b & rest] (apply mapv vector a b rest)))\n\n(defn same-keys? [a b]\n  (and (= (count a) (count b))\n       (every? #(contains? b %) (keys a))\n       (every? #(contains? b %) (keys a))))\n\n(defn- looks-like? [pattern form]\n  (cond\n    (= '_ pattern)\n      true\n    (= '[*] pattern)\n      (sequential? form)\n    (symbol? pattern)\n      (= form pattern)\n    (sequential? pattern)\n      (if (= (last pattern) '*)\n        (and (sequential? form)\n             (every? (fn [[pattern-el form-el]] (looks-like? pattern-el form-el))\n                     (map vector (butlast pattern) form)))\n        (and (sequential? form)\n             (= (count form) (count pattern))\n             (every? (fn [[pattern-el form-el]] (looks-like? pattern-el form-el))\n                     (map vector pattern form))))\n    :else ;; (predicate? pattern)\n      (pattern form)))\n\n(defn source? [sym]\n  (and (symbol? sym)\n       (= \\$ (first (name sym)))))\n\n(defn free-var? [sym]\n  (and (symbol? sym)\n       (= \\? (first (name sym)))))\n\n(defn attr? [form]\n  (or (keyword? form) (string? form)))\n\n(defn lookup-ref? [form]\n  (looks-like? [attr? '_] form))\n\n;; Relation algebra\n\n(defn join-tuples [t1 #?(:cljs idxs1\n                         :clj  ^{:tag \"[[Ljava.lang.Object;\"} idxs1)\n                   t2 #?(:cljs idxs2\n                         :clj  ^{:tag \"[[Ljava.lang.Object;\"} idxs2)]\n  (let [l1  (alength idxs1)\n        l2  (alength idxs2)\n        res (da/make-array (+ l1 l2))]\n    (dotimes [i l1]\n      (aset res i (#?(:cljs da/aget :clj get) t1 (aget idxs1 i)))) ;; FIXME aget\n    (dotimes [i l2]\n      (aset res (+ l1 i) (#?(:cljs da/aget :clj get) t2 (aget idxs2 i)))) ;; FIXME aget\n    res))\n\n(defn sum-rel [a b]\n  (let [{attrs-a :attrs, tuples-a :tuples} a\n        {attrs-b :attrs, tuples-b :tuples} b]\n    (cond\n      (= attrs-a attrs-b)\n      (Relation. attrs-a (into (vec tuples-a) tuples-b))\n\n      (not (same-keys? attrs-a attrs-b))\n      (raise \"Can\u2019t sum relations with different attrs: \" attrs-a \" and \" attrs-b\n             {:error :query/where})\n\n      (every? number? (vals attrs-a)) ;; can\u2019t conj into BTSetIter\n      (let [idxb->idxa (vec (for [[sym idx-b] attrs-b]\n                              [idx-b (attrs-a sym)]))\n            tlen    (->> (vals attrs-a) (reduce max) (inc)) \n            tuples' (persistent!\n                      (reduce\n                        (fn [acc tuple-b]\n                          (let [tuple' (da/make-array tlen)]\n                            (doseq [[idx-b idx-a] idxb->idxa]\n                              (aset tuple' idx-a (#?(:cljs da/aget :clj get) tuple-b idx-b)))\n                            (conj! acc tuple')))\n                        (transient (vec tuples-a))\n                        tuples-b))]\n        (Relation. attrs-a tuples'))\n\n      :else\n      (let [all-attrs (zipmap (keys (merge attrs-a attrs-b)) (range))]\n        (-> (Relation. all-attrs [])\n            (sum-rel a)\n            (sum-rel b))))))\n\n(defn prod-rel\n  ([] (Relation. {} [(da/make-array 0)]))\n  ([rel1 rel2]\n    (let [attrs1 (keys (:attrs rel1))\n          attrs2 (keys (:attrs rel2))\n          idxs1  (to-array (map (:attrs rel1) attrs1))\n          idxs2  (to-array (map (:attrs rel2) attrs2))]\n      (Relation.\n        (zipmap (concat attrs1 attrs2) (range))\n        (persistent!\n          (reduce\n            (fn [acc t1]\n              (reduce (fn [acc t2]\n                        (conj! acc (join-tuples t1 idxs1 t2 idxs2)))\n                      acc (:tuples rel2)))\n            (transient []) (:tuples rel1)))\n        ))))\n\n;; built-ins\n\n(defn- -differ? [& xs]\n  (let [l (count xs)]\n    (not= (take (/ l 2) xs) (drop (/ l 2) xs))))\n\n(defn- -get-else\n  [db e a else-val]\n  (when (nil? else-val)\n    (raise \"get-else: nil default value is not supported\" {:error :query/where}))\n  (if-some [datom (first (db/-search db [e a]))]\n    (:v datom)\n    else-val))\n\n(defn- -get-some\n  [db e & as]\n  (reduce\n   (fn [_ a]\n     (when-some [datom (first (db/-search db [e a]))]\n       (reduced [(:a datom) (:v datom)])))\n   nil\n   as))\n\n(defn- -missing?\n  [db e a]\n  (nil? (get (de/entity db e) a)))\n\n(defn- and-fn [& args]\n  (reduce (fn [a b]\n            (if b b (reduced b))) true args))\n            \n(defn- or-fn [& args]\n  (reduce (fn [a b]\n            (if b (reduced b) b)) nil args))\n\n(def built-ins {\n  '= =, '== ==, 'not= not=, '!= not=, '< <, '> >, '<= <=, '>= >=, '+ +, '- -,\n  '* *, '/ /, 'quot quot, 'rem rem, 'mod mod, 'inc inc, 'dec dec, 'max max, 'min min,\n  'zero? zero?, 'pos? pos?, 'neg? neg?, 'even? even?, 'odd? odd?, 'compare compare,\n  'rand rand, 'rand-int rand-int,\n  'true? true?, 'false? false?, 'nil? nil?, 'some? some?, 'not not, 'and and-fn, 'or or-fn,\n  'complement complement, 'identical? identical?,\n  'identity identity, 'meta meta, 'name name, 'namespace namespace, 'type type,\n  'vector vector, 'list list, 'set set, 'hash-map hash-map, 'array-map array-map,\n  'count count, 'range range, 'not-empty not-empty, 'empty? empty, 'contains? contains?,\n  'str str, 'pr-str pr-str, 'print-str print-str, 'println-str println-str, 'prn-str prn-str, 'subs subs,\n  're-find re-find, 're-matches re-matches, 're-seq re-seq, 're-pattern re-pattern,\n  '-differ? -differ?, 'get-else -get-else, 'get-some -get-some, 'missing? -missing?, 'ground identity,\n  'clojure.string/blank? str/blank?, 'clojure.string/includes? str/includes?,\n  'clojure.string/starts-with? str/starts-with?, 'clojure.string/ends-with? str/ends-with?\n})\n\n(def built-in-aggregates\n (letfn [(sum [coll] (reduce + 0 coll))\n         (avg [coll] (/ (sum coll) (count coll)))\n         (median\n           [coll]\n           (let [terms (sort coll)\n                 size (count coll)\n                 med (bit-shift-right size 1)]\n             (cond-> (nth terms med)\n               (even? size)\n               (-> (+ (nth terms (dec med)))\n                   (/ 2)))))\n         (variance\n           [coll]\n           (let [mean (avg coll)\n                 sum  (sum (for [x coll\n                                 :let [delta (- x mean)]]\n                             (* delta delta)))]\n             (/ sum (count coll))))\n         (stddev \n           [coll] \n           (#?(:cljs js/Math.sqrt :clj Math/sqrt) (variance coll)))]\n   {'avg      avg\n    'median   median\n    'variance variance\n    'stddev   stddev\n    'distinct set\n    'min      (fn\n                ([coll] (reduce (fn [acc x]\n                                  (if (neg? (compare x acc))\n                                    x acc))\n                                (first coll) (next coll)))\n                ([n coll]\n                  (vec\n                    (reduce (fn [acc x]\n                              (cond\n                                (< (count acc) n)\n                                  (sort compare (conj acc x))\n                                (neg? (compare x (last acc)))\n                                  (sort compare (conj (butlast acc) x))\n                                :else acc))\n                            [] coll))))\n    'max      (fn\n                ([coll] (reduce (fn [acc x]\n                                  (if (pos? (compare x acc))\n                                    x acc))\n                                (first coll) (next coll)))\n                ([n coll]\n                  (vec\n                    (reduce (fn [acc x]\n                              (cond\n                                (< (count acc) n)\n                                  (sort compare (conj acc x))\n                                (pos? (compare x (first acc)))\n                                  (sort compare (conj (next acc) x))\n                                :else acc))\n                            [] coll))))\n    'sum      sum\n    'rand     (fn\n                ([coll] (rand-nth coll))\n                ([n coll] (vec (repeatedly n #(rand-nth coll)))))\n    'sample   (fn [n coll]\n                (vec (take n (shuffle coll))))\n    'count    count\n    'count-distinct (fn [coll] (count (distinct coll)))}))\n\n\n;;\n\n(defn parse-rules [rules]\n  (let [rules (if (string? rules) (edn/read-string rules) rules)] ;; for datascript.js interop\n    (group-by ffirst rules)))\n\n(defn empty-rel [binding]\n  (let [vars (->> (dp/collect-vars-distinct binding)\n               (map :symbol))]\n    (Relation. (zipmap vars (range)) [])))\n\n(defprotocol IBinding\n  (in->rel [binding value]))\n\n(extend-protocol IBinding\n  BindIgnore\n  (in->rel [_ _]\n    (prod-rel))\n  \n  BindScalar\n  (in->rel [binding value]\n    (Relation. {(get-in binding [:variable :symbol]) 0} [(into-array [value])]))\n  \n  BindColl\n  (in->rel [binding coll]\n    (cond\n      (not (db/seqable? coll))\n        (raise \"Cannot bind value \" coll \" to collection \" (dp/source binding)\n               {:error :query/binding, :value coll, :binding (dp/source binding)})\n      (empty? coll)\n        (empty-rel binding)\n      :else\n        (->> coll\n          (map #(in->rel (:binding binding) %))\n          (reduce sum-rel))))\n  \n  BindTuple\n  (in->rel [binding coll]\n    (cond\n      (not (db/seqable? coll))\n        (raise \"Cannot bind value \" coll \" to tuple \" (dp/source binding)\n               {:error :query/binding, :value coll, :binding (dp/source binding)})\n      (< (count coll) (count (:bindings binding)))\n        (raise \"Not enough elements in a collection \" coll \" to bind tuple \" (dp/source binding)\n               {:error :query/binding, :value coll, :binding (dp/source binding)})\n      :else\n        (reduce prod-rel\n          (map #(in->rel %1 %2) (:bindings binding) coll)))))\n\n(defn resolve-in [context [binding value]]\n  (cond\n    (and (instance? BindScalar binding)\n         (instance? SrcVar (:variable binding)))\n      (update context :sources assoc (get-in binding [:variable :symbol]) value)\n    (and (instance? BindScalar binding)\n         (instance? RulesVar (:variable binding)))\n      (assoc context :rules (parse-rules value))\n    :else\n      (update context :rels conj (in->rel binding value))))\n\n(defn resolve-ins [context bindings values]\n  (reduce resolve-in context (zipmap bindings values)))\n\n;;\n\n(def ^{:dynamic true\n       :doc \"List of symbols in current pattern that might potentiall be resolved to refs\"}\n  *lookup-attrs* nil)\n\n(def ^{:dynamic true\n       :doc \"Default pattern source. Lookup refs, patterns, rules will be resolved with it\"}\n  *implicit-source* nil)\n\n(defn getter-fn [attrs attr]\n  (let [idx (attrs attr)]\n    (if (contains? *lookup-attrs* attr)\n      (fn [tuple]\n        (let [eid (#?(:cljs da/aget :clj get) tuple idx)]\n          (cond\n            (number? eid)     eid ;; quick path to avoid fn call\n            (sequential? eid) (db/entid *implicit-source* eid)\n            (da/array? eid)   (db/entid *implicit-source* eid)\n            :else             eid)))\n      (fn [tuple]\n        (#?(:cljs da/aget :clj get) tuple idx)))))\n\n(defn tuple-key-fn [getters]\n  (if (== (count getters) 1)\n    (first getters)\n    (let [getters (to-array getters)]\n      (fn [tuple]\n        (list* #?(:cljs (.map getters #(% tuple))\n                  :clj  (to-array (map #(% tuple) getters))))))))\n\n(defn hash-attrs [key-fn tuples]\n  (loop [tuples     tuples\n         hash-table (transient {})]\n    (if-some [tuple (first tuples)]\n      (let [key (key-fn tuple)]\n        (recur (next tuples)\n               (assoc! hash-table key (conj (get hash-table key '()) tuple))))\n      (persistent! hash-table))))\n\n(defn hash-join [rel1 rel2]\n  (let [tuples1       (:tuples rel1)\n        tuples2       (:tuples rel2)\n        attrs1        (:attrs rel1)\n        attrs2        (:attrs rel2)\n        common-attrs  (vec (intersect-keys (:attrs rel1) (:attrs rel2)))\n        common-gtrs1  (map #(getter-fn attrs1 %) common-attrs)\n        common-gtrs2  (map #(getter-fn attrs2 %) common-attrs)\n        keep-attrs1   (keys attrs1)\n        keep-attrs2   (vec (set/difference (set (keys attrs2)) (set (keys attrs1))))\n        keep-idxs1    (to-array (map attrs1 keep-attrs1))\n        keep-idxs2    (to-array (map attrs2 keep-attrs2))\n        key-fn1       (tuple-key-fn common-gtrs1)\n        hash          (hash-attrs key-fn1 tuples1)\n        key-fn2       (tuple-key-fn common-gtrs2)\n        new-tuples    (->>\n                        (reduce (fn [acc tuple2]\n                                  (let [key (key-fn2 tuple2)]\n                                    (if-some [tuples1 (get hash key)]\n                                      (reduce (fn [acc tuple1]\n                                                (conj! acc (join-tuples tuple1 keep-idxs1 tuple2 keep-idxs2)))\n                                              acc tuples1)\n                                      acc)))\n                          (transient []) tuples2)\n                        (persistent!))]\n    (Relation. (zipmap (concat keep-attrs1 keep-attrs2) (range))\n               new-tuples)))\n\n(defn subtract-rel [a b]\n  (let [{attrs-a :attrs, tuples-a :tuples} a\n        {attrs-b :attrs, tuples-b :tuples} b\n        attrs     (intersect-keys attrs-a attrs-b)\n        getters-b (map #(getter-fn attrs-b %) attrs)\n        key-fn-b  (tuple-key-fn getters-b)\n        hash      (hash-attrs key-fn-b tuples-b)\n        getters-a (map #(getter-fn attrs-a %) attrs)\n        key-fn-a  (tuple-key-fn getters-a)]\n    (assoc a\n      :tuples (filterv #(nil? (hash (key-fn-a %))) tuples-a))))\n\n(defn lookup-pattern-db [db pattern]\n  ;; TODO optimize with bound attrs min/max values here\n  (let [search-pattern (mapv #(if (symbol? %) nil %) pattern)\n        datoms         (db/-search db search-pattern)\n        attr->prop     (->> (map vector pattern [\"e\" \"a\" \"v\" \"tx\"])\n                            (filter (fn [[s _]] (free-var? s)))\n                            (into {}))]\n    (Relation. attr->prop datoms)))\n\n(defn matches-pattern? [pattern tuple]\n  (loop [tuple   tuple\n         pattern pattern]\n    (if (and tuple pattern)\n      (let [t (first tuple)\n            p (first pattern)]\n        (if (or (symbol? p) (= t p))\n          (recur (next tuple) (next pattern))\n          false))\n      true)))\n\n(defn lookup-pattern-coll [coll pattern]\n  (let [data       (filter #(matches-pattern? pattern %) coll)\n        attr->idx  (->> (map vector pattern (range))\n                        (filter (fn [[s _]] (free-var? s)))\n                        (into {}))]\n    (Relation. attr->idx (mapv to-array data)))) ;; FIXME to-array\n\n(defn normalize-pattern-clause [clause]\n  (if (source? (first clause))\n    clause\n    (concat ['$] clause)))\n\n(defn lookup-pattern [source pattern]\n  (cond\n    (satisfies? db/ISearch source)\n      (lookup-pattern-db source pattern)\n    :else\n      (lookup-pattern-coll source pattern)))\n\n(defn collapse-rels [rels new-rel]\n  (loop [rels    rels\n         new-rel new-rel\n         acc     []]\n    (if-some [rel (first rels)]\n      (if (not-empty (intersect-keys (:attrs new-rel) (:attrs rel)))\n        (recur (next rels) (hash-join rel new-rel) acc)\n        (recur (next rels) new-rel (conj acc rel)))\n      (conj acc new-rel))))\n\n(defn- rel-with-attr [context sym]\n  (some #(when (contains? (:attrs %) sym) %) (:rels context)))\n\n(defn- context-resolve-val [context sym]\n  (when-some [rel (rel-with-attr context sym)]\n    (when-some [tuple (first (:tuples rel))]\n      (#?(:cljs da/aget :clj get) tuple ((:attrs rel) sym)))))\n\n(defn- rel-contains-attrs? [rel attrs]\n  (some #(contains? (:attrs rel) %) attrs))\n\n(defn- rel-prod-by-attrs [context attrs]\n  (let [rels       (filter #(rel-contains-attrs? % attrs) (:rels context))\n        production (reduce prod-rel rels)]\n    [(update context :rels #(remove (set rels) %)) production]))\n\n(defn -call-fn [context rel f args]\n  (let [sources     (:sources context)\n        attrs       (:attrs rel)\n        len         (count args)\n        static-args (da/make-array len)\n        tuples-args (da/make-array len)]\n    (dotimes [i len]\n      (let [arg (nth args i)]\n        (if (symbol? arg) \n          (if-some [source (get sources arg)]\n            (da/aset static-args i source)\n            (da/aset tuples-args i (get attrs arg)))\n          (da/aset static-args i arg))))\n    ;; CLJS `apply` + `vector` will hold onto mutable array of arguments directly\n    ;; https://github.com/tonsky/datascript/issues/262\n    (if #?(:clj  false\n           :cljs (identical? f vector))\n      (fn [tuple]\n        ;; TODO raise if not all args are bound\n        (let [args (da/aclone static-args)]\n          (dotimes [i len]\n            (when-some [tuple-idx (aget tuples-args i)]\n              (let [v (#?(:cljs da/aget :clj get) tuple tuple-idx)]\n                (da/aset args i v))))\n          (apply f args)))\n      (fn [tuple]\n        ;; TODO raise if not all args are bound\n        (dotimes [i len]\n          (when-some [tuple-idx (aget tuples-args i)]\n            (let [v (#?(:cljs da/aget :clj get) tuple tuple-idx)]\n              (da/aset static-args i v))))\n        (apply f static-args)))))\n\n(defn- resolve-sym [sym]\n  #?(:cljs nil\n     :clj (when (namespace sym)\n            (when-some [v (resolve sym)] @v))))\n\n(defn filter-by-pred [context clause]\n  (let [[[f & args]] clause\n        pred         (or (get built-ins f)\n                         (context-resolve-val context f)\n                         (resolve-sym f)\n                         (when (nil? (rel-with-attr context f))\n                           (raise \"Unknown predicate '\" f \" in \" clause\n                                  {:error :query/where, :form clause, :var f})))\n        [context production] (rel-prod-by-attrs context (filter symbol? args))\n        new-rel      (if pred\n                       (let [tuple-pred (-call-fn context production pred args)]\n                         (update production :tuples #(filter tuple-pred %)))\n                       (assoc production :tuples []))]\n    (update context :rels conj new-rel)))\n\n(defn bind-by-fn [context clause]\n  (let [[[f & args] out] clause\n        binding  (dp/parse-binding out)\n        fun      (or (get built-ins f)\n                     (context-resolve-val context f)\n                     (resolve-sym f)\n                     (when (nil? (rel-with-attr context f))\n                       (raise \"Unknown function '\" f \" in \" clause\n                              {:error :query/where, :form clause, :var f})))\n        [context production] (rel-prod-by-attrs context (filter symbol? args))\n        new-rel  (if fun\n                   (let [tuple-fn (-call-fn context production fun args)\n                        rels     (for [tuple (:tuples production)\n                                       :let  [val (tuple-fn tuple)]\n                                       :when (not (nil? val))]\n                                   (prod-rel (Relation. (:attrs production) [tuple])\n                                             (in->rel binding val)))]\n                     (if (empty? rels)\n                       (prod-rel production (empty-rel binding))\n                       (reduce sum-rel rels)))\n                   (prod-rel (assoc production :tuples []) (empty-rel binding)))]\n    (update context :rels collapse-rels new-rel)))\n\n;;; RULES\n\n(defn rule? [context clause]\n  (and (sequential? clause)\n       (contains? (:rules context)\n                  (if (source? (first clause))\n                    (second clause)\n                    (first clause)))))\n\n(def rule-seqid (atom 0))\n\n(defn expand-rule [clause context used-args]\n  (let [[rule & call-args] clause\n        seqid              (swap! rule-seqid inc)\n        branches           (get (:rules context) rule)]\n    (for [branch branches\n          :let [[[_ & rule-args] & clauses] branch\n                replacements (zipmap rule-args call-args)]]\n      (walk/postwalk\n       #(if (free-var? %)\n          (db/some-of\n            (replacements %)\n            (symbol (str (name %) \"__auto__\" seqid)))\n          %)\n        clauses))))\n\n(defn remove-pairs [xs ys]\n  (let [pairs (->> (map vector xs ys)\n                   (remove (fn [[x y]] (= x y))))]\n    [(map first pairs)\n     (map second pairs)]))\n\n(defn rule-gen-guards [rule-clause used-args]\n  (let [[rule & call-args] rule-clause\n        prev-call-args     (get used-args rule)]\n    (for [prev-args prev-call-args\n          :let [[call-args prev-args] (remove-pairs call-args prev-args)]]\n      [(concat ['-differ?] call-args prev-args)])))\n\n(defn walk-collect [form pred]\n  (let [res (atom [])]\n    (walk/postwalk #(do (when (pred %) (swap! res conj %)) %) form)\n    @res))\n\n(defn collect-vars [clause]\n  (set (walk-collect clause free-var?)))\n\n(defn split-guards [clauses guards]\n  (let [bound-vars (collect-vars clauses)\n        pred       (fn [[[_ & vars]]] (every? bound-vars vars))]\n    [(filter pred guards)\n     (remove pred guards)]))\n\n(defn solve-rule [context clause]\n  (let [final-attrs     (filter free-var? clause)\n        final-attrs-map (zipmap final-attrs (range))\n;;         clause-cache    (atom {}) ;; TODO\n        solve           (fn [prefix-context clauses]\n                          (reduce -resolve-clause prefix-context clauses))\n        empty-rels?     (fn [context]\n                          (some #(empty? (:tuples %)) (:rels context)))]\n    (loop [stack (list {:prefix-clauses []\n                        :prefix-context context\n                        :clauses        [clause]\n                        :used-args      {}\n                        :pending-guards {}})\n           rel   (Relation. final-attrs-map [])]\n      (if-some [frame (first stack)]\n        (let [[clauses [rule-clause & next-clauses]] (split-with #(not (rule? context %)) (:clauses frame))]\n          (if (nil? rule-clause)\n\n            ;; no rules -> expand, collect, sum\n            (let [context (solve (:prefix-context frame) clauses)\n                  tuples  (-collect context final-attrs)\n                  new-rel (Relation. final-attrs-map tuples)]\n              (recur (next stack) (sum-rel rel new-rel)))\n\n            ;; has rule -> add guards -> check if dead -> expand rule -> push to stack, recur\n            (let [[rule & call-args]     rule-clause\n                  guards                 (rule-gen-guards rule-clause (:used-args frame))\n                  [active-gs pending-gs] (split-guards (concat (:prefix-clauses frame) clauses)\n                                                       (concat guards (:pending-guards frame)))]\n              (if (some #(= % '[(-differ?)]) active-gs) ;; trivial always false case like [(not= [?a ?b] [?a ?b])]\n\n                ;; this branch has no data, just drop it from stack\n                (recur (next stack) rel)\n\n                (let [prefix-clauses (concat clauses active-gs)\n                      prefix-context (solve (:prefix-context frame) prefix-clauses)]\n                  (if (empty-rels? prefix-context)\n\n                    ;; this branch has no data, just drop it from stack\n                    (recur (next stack) rel)\n\n                    ;; need to expand rule to branches\n                    (let [used-args  (assoc (:used-args frame) rule\n                                       (conj (get (:used-args frame) rule []) call-args))\n                          branches   (expand-rule rule-clause context used-args)]\n                      (recur (concat\n                               (for [branch branches]\n                                 {:prefix-clauses prefix-clauses\n                                  :prefix-context prefix-context\n                                  :clauses        (concatv branch next-clauses)\n                                  :used-args      used-args\n                                  :pending-guards pending-gs})\n                               (next stack))\n                             rel))))))))\n        rel))))\n\n(defn resolve-pattern-lookup-refs [source pattern]\n  (if (satisfies? db/IDB source)\n    (let [[e a v tx] pattern]\n      (->\n        [(if (or (lookup-ref? e) (attr? e)) (db/entid-strict source e) e)\n         a\n         (if (and v (attr? a) (db/ref? source a) (or (lookup-ref? v) (attr? v))) (db/entid-strict source v) v)\n         (if (lookup-ref? tx) (db/entid-strict source tx) tx)]\n        (subvec 0 (count pattern))))\n    pattern))\n\n(defn dynamic-lookup-attrs [source pattern]\n  (let [[e a v tx] pattern]\n    (cond-> #{}\n      (free-var? e) (conj e)\n      (free-var? tx) (conj tx)\n      (and\n        (free-var? v)\n        (not (free-var? a))\n        (db/ref? source a)) (conj v))))\n\n(defn limit-rel [rel vars]\n  (when-some [attrs' (not-empty (select-keys (:attrs rel) vars))]\n    (assoc rel :attrs attrs')))\n\n(defn limit-context [context vars]\n  (assoc context\n    :rels (->> (:rels context)\n               (keep #(limit-rel % vars)))))\n\n(defn check-bound [context vars form]\n  (let [bound (into #{} (mapcat #(keys (:attrs %)) (:rels context)))]\n    (when-not (set/subset? vars bound)\n      (let [missing (set/difference (set vars) bound)]\n        (raise \"Insufficient bindings: \" missing \" not bound in \" form\n               {:error :query/where\n                :form  form\n                :vars  missing})))))\n\n(defn -resolve-clause\n  ([context clause]\n    (-resolve-clause context clause clause))\n  ([context clause orig-clause]\n   (condp looks-like? clause\n     [[symbol? '*]] ;; predicate [(pred ?a ?b ?c)]\n     (filter-by-pred context clause)\n     \n     [[symbol? '*] '_] ;; function [(fn ?a ?b) ?res]\n     (bind-by-fn context clause)\n     \n     [source? '*] ;; source + anything\n     (let [[source-sym & rest] clause]\n       (binding [*implicit-source* (get (:sources context) source-sym)]\n         (-resolve-clause context rest clause)))\n     \n     '[or *] ;; (or ...)\n     (let [[_ & branches] clause\n           contexts (map #(resolve-clause context %) branches)\n           rels     (map #(reduce hash-join (:rels %)) contexts)]\n       (assoc (first contexts) :rels [(reduce sum-rel rels)]))\n     \n     '[or-join [[*] *] *] ;; (or-join [[req-vars] vars] ...)\n     (let [[_ [req-vars & vars] & branches] clause]\n       (check-bound context req-vars orig-clause)\n       (recur context (list* 'or-join (concat req-vars vars) branches) clause))\n     \n     '[or-join [*] *] ;; (or-join [vars] ...)\n     ;; TODO required vars\n     (let [[_ vars & branches] clause\n           vars         (set vars)\n           join-context (limit-context context vars)\n           contexts     (map #(-> join-context (resolve-clause %) (limit-context vars)) branches)\n           rels         (map #(reduce hash-join (:rels %)) contexts)\n           sum-rel      (reduce sum-rel rels)]\n       (update context :rels collapse-rels sum-rel))\n     \n     '[and *] ;; (and ...)\n     (let [[_ & clauses] clause]\n       (reduce resolve-clause context clauses))\n     \n     '[not *] ;; (not ...)\n     (let [[_ & clauses] clause\n           bound-vars       (set (mapcat #(keys (:attrs %)) (:rels context)))\n           negation-vars    (collect-vars clauses)\n           _                (when (empty? (set/intersection bound-vars negation-vars))\n                              (raise \"Insufficient bindings: none of \" negation-vars \" is bound in \" orig-clause\n                                {:error :query/where\n                                 :form  orig-clause}))\n           context'         (assoc context :rels [(reduce hash-join (:rels context))])\n           negation-context (reduce resolve-clause context' clauses)\n           negation         (subtract-rel\n                              (single (:rels context'))\n                              (reduce hash-join (:rels negation-context)))]\n       (assoc context' :rels [negation]))\n     \n     '[not-join [*] *] ;; (not-join [vars] ...)\n     (let [[_ vars & clauses] clause\n           _                (check-bound context vars orig-clause)\n           context'         (assoc context :rels [(reduce hash-join (:rels context))])\n           join-context     (limit-context context' vars)\n           negation-context (-> (reduce resolve-clause join-context clauses)\n                                (limit-context vars))\n           negation         (subtract-rel\n                              (single (:rels context'))\n                              (reduce hash-join (:rels negation-context)))]\n       (assoc context' :rels [negation]))\n     \n     '[*] ;; pattern\n     (let [source   *implicit-source*\n           pattern  (resolve-pattern-lookup-refs source clause)\n           relation (lookup-pattern source pattern)]\n       (binding [*lookup-attrs* (if (satisfies? db/IDB source)\n                                  (dynamic-lookup-attrs source pattern)\n                                  *lookup-attrs*)]\n         (update context :rels collapse-rels relation))))))\n\n(defn resolve-clause [context clause]\n  (if (rule? context clause)\n    (if (source? (first clause))\n      (binding [*implicit-source* (get (:sources context) (first clause))]\n        (resolve-clause context (next clause)))\n      (update context :rels collapse-rels (solve-rule context clause)))\n    (-resolve-clause context clause)))\n\n(defn -q [context clauses]\n  (binding [*implicit-source* (get (:sources context) '$)]\n    (reduce resolve-clause context clauses)))\n\n(defn -collect\n  ([context symbols]\n    (let [rels (:rels context)]\n      (-collect [(da/make-array (count symbols))] rels symbols)))\n  ([acc rels symbols]\n    (if-some [rel (first rels)]\n      (let [keep-attrs (select-keys (:attrs rel) symbols)]\n        (if (empty? keep-attrs)\n          (recur acc (next rels) symbols)\n          (let [copy-map (to-array (map #(get keep-attrs %) symbols))\n                len      (count symbols)]\n            (recur (for [#?(:cljs t1\n                            :clj ^{:tag \"[[Ljava.lang.Object;\"} t1) acc\n                         t2 (:tuples rel)]\n                     (let [res (aclone t1)]\n                       (dotimes [i len]\n                         (when-some [idx (aget copy-map i)]\n                           (aset res i (#?(:cljs da/aget :clj get) t2 idx))))\n                       res))\n                   (next rels)\n                   symbols))))\n      acc)))\n\n(defn collect [context symbols]\n  (->> (-collect context symbols)\n       (map vec)\n       set))\n\n(defprotocol IContextResolve\n  (-context-resolve [var context]))\n\n(extend-protocol IContextResolve\n  Variable\n  (-context-resolve [var context]\n    (context-resolve-val context (.-symbol var)))\n  SrcVar\n  (-context-resolve [var context]\n    (get-in context [:sources (.-symbol var)]))\n  PlainSymbol\n  (-context-resolve [var _]\n    (or (get built-in-aggregates (.-symbol var))\n        (resolve-sym (.-symbol var))))\n  Constant\n  (-context-resolve [var _]\n    (.-value var)))\n\n(defn -aggregate [find-elements context tuples]\n  (mapv (fn [element fixed-value i]\n          (if (dp/aggregate? element)\n            (let [f    (-context-resolve (:fn element) context)\n                  args (map #(-context-resolve % context) (butlast (:args element)))\n                  vals (map #(nth % i) tuples)]\n              (apply f (concat args [vals])))\n            fixed-value))\n    find-elements\n    (first tuples)\n    (range)))\n\n(defn- idxs-of [pred coll]\n  (->> (map #(when (pred %1) %2) coll (range))\n       (remove nil?)))\n\n(defn aggregate [find-elements context resultset]\n  (let [group-idxs (idxs-of (complement dp/aggregate?) find-elements)\n        group-fn   (fn [tuple]\n                     (map #(nth tuple %) group-idxs))\n        grouped    (group-by group-fn resultset)]\n    (for [[_ tuples] grouped]\n      (-aggregate find-elements context tuples))))\n\n(defprotocol IPostProcess\n  (-post-process [find tuples]))\n\n(extend-protocol IPostProcess\n  FindRel\n  (-post-process [_ tuples] tuples)\n  FindColl\n  (-post-process [_ tuples] (into [] (map first) tuples))\n  FindScalar\n  (-post-process [_ tuples] (ffirst tuples))\n  FindTuple\n  (-post-process [_ tuples] (first tuples)))\n\n(defn- pull [find-elements context resultset]\n  (let [resolved (for [find find-elements]\n                   (when (dp/pull? find)\n                     [(-context-resolve (:source find) context)\n                      (dpp/parse-pull\n                        (-context-resolve (:pattern find) context))]))]\n    (for [tuple resultset]\n      (mapv (fn [env el]\n              (if env\n                (let [[src spec] env]\n                  (dpa/pull-spec src spec [el] false))\n                el))\n            resolved\n            tuple))))\n\n(def ^:private query-cache (volatile! (datascript.lru/lru lru-cache-size)))\n\n(defn memoized-parse-query [q]\n  (if-some [cached (get @query-cache q nil)]\n    cached\n    (let [qp (dp/parse-query q)]\n      (vswap! query-cache assoc q qp)\n      qp)))\n\n(defn q [q & inputs]\n  (let [parsed-q      (memoized-parse-query q)\n        find          (:qfind parsed-q)\n        find-elements (dp/find-elements find)\n        find-vars     (dp/find-vars find)\n        result-arity  (count find-elements)\n        with          (:qwith parsed-q)\n        ;; TODO utilize parser\n        all-vars      (concat find-vars (map :symbol with))\n        q             (cond-> q\n                        (sequential? q) dp/query->map)\n        wheres        (:where q)\n        context       (-> (Context. [] {} {})\n                        (resolve-ins (:qin parsed-q) inputs))\n        resultset     (-> context\n                        (-q wheres)\n                        (collect all-vars))]\n    (cond->> resultset\n      (:with q)\n        (mapv #(vec (subvec % 0 result-arity)))\n      (some dp/aggregate? find-elements)\n        (aggregate find-elements context)\n      (some dp/pull? find-elements)\n        (pull find-elements context)\n      true\n        (-post-process find))))\n"]}