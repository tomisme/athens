{"version":3,"sources":["spec_tools/impl.cljc"],"mappings":"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","names":["spec-tools.impl/cljs-sym","x","cljs.core/map?","spec-tools.impl/clj-sym","cljs.core/var?","v","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","spec-tools.impl/->sym","spec-tools.impl/unfn","cljs?","expr","cljs.core/seq?","cljs.core/Symbol","cljs.core/first","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/name","vec__47321","seq__47322","cljs.core/seq","first__47323","cljs.core/next","vec__47324","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","s","form","cljs.core/rest","cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic","clojure.walk/postwalk-replace","spec-tools.impl/polish","cljs.core/flatten","cljs.core.keep.cljs$core$IFn$_invoke$arity$2","spec-tools.impl/polish-un","G__47327","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","spec-tools.impl/un-key","G__47328","p__47329","map__47330","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","spec-tools.impl/with-key->spec","req","req-un","opt","opt-un","data","key->spec","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.juxt.cljs$core$IFn$_invoke$arity$2","cljs.core/identity","cljs.core.into.cljs$core$IFn$_invoke$arity$2","un-key->spec","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","p__47332","map__47333","spec-tools.impl/with-real-keys","G__47335","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/mapv","spec-tools.impl/parse-keys","m","G__47339","G__47340","p1__47336#","p1__47337#","p1__47338#","spec-tools.impl/extract-keys","map__47341","G__47342","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","spec-tools.impl/extract-pred-and-info","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","spec-tools.impl/strip-fn-if-needed","head","cljs.core/count","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","spec-tools.impl/normalize-symbol","kw","G__47344","cljs.core/namespace","spec-tools.impl/extract-form","spec","cljs.spec.alpha/form","spec-tools.impl/qualified-name","key","cljs.core/Keyword","temp__5733__auto__","nn","spec-tools.impl/nilable-spec?","and__4174__auto__","cljs.core/boolean","G__47345","fexpr__47346","js/Error","spec-tools.impl/unwrap","coll","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","spec-tools.impl/deep-merge","seq47347","self__4777__auto__","values","cljs.core/every?","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/merge-with","cljs.core/coll?","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core/into","cljs.core/last","spec-tools.impl/unlift-keys","ns-name","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__47348","vec__47349","acc","k","spec-tools.impl/register-spec!","cljs.spec.alpha/def-impl","spec-tools.impl/coll-of-spec","pred","type","spec-tools.form/resolve-form","cljs.core.sequence.cljs$core$IFn$_invoke$arity$1","cljs.core/List","cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4","spec-tools.impl/map-of-spec","kpred","vpred","forms","tuple","cljs.spec.alpha.tuple_impl.cljs$core$IFn$_invoke$arity$2","_","p__47354","map__47355","spec-tools.impl/keys-spec","req-specs","opt-specs","req-keys","opt-keys","pred-exprs","p1__47352#","p1__47353#","cljs.core/contains?","pred-forms","cljs.core/vec","cljs.core.concat.cljs$core$IFn$_invoke$arity$1","keys-pred","p","or__4185__auto__","cljs.core/reduced","cljs.spec.alpha/map-spec-impl","spec-tools.impl/nilable-spec","cljs.spec.alpha/nilable-impl","spec-tools.impl/or-spec","ks","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","preds","cljs.core/second","cljs.spec.alpha/or-spec-impl"],"sourcesContent":["(ns spec-tools.impl\n  (:refer-clojure :exclude [resolve])\n  #?(:cljs (:require-macros [spec-tools.impl :refer [resolve]]))\n  (:require\n    #?(:cljs [cljs.analyzer.api])\n    [clojure.spec.alpha :as s]\n    [spec-tools.form :as form]\n    [clojure.walk :as walk])\n  (:import\n    #?@(:clj\n        [(clojure.lang Var)])))\n\n#?(:clj\n   (defn in-cljs? [env]\n     (:ns env)))\n\n;; ClojureScript 1.9.655 and later have a resolve macro - maybe this can be\n;; eventually converted to use it.\n#?(:clj\n   (defmacro resolve\n     [env sym]\n     `(if (in-cljs? ~env)\n        ((clojure.core/resolve 'cljs.analyzer.api/resolve) ~env ~sym)\n        (clojure.core/resolve ~env ~sym))))\n\n(defn- cljs-sym [x]\n  (if (map? x)\n    (:name x)\n    x))\n\n(defn- clj-sym [x]\n  (if (var? x)\n    (let [^Var v x]\n      (symbol (str (.name (.ns v)))\n              (str (.sym v))))\n    x))\n\n(defn ->sym [x]\n  #?(:clj  (clj-sym x)\n     :cljs (cljs-sym x)))\n\n(defn- unfn [cljs? expr]\n  (if (clojure.core/and (seq? expr)\n                        (symbol? (first expr))\n                        (= \"fn*\" (name (first expr))))\n    (let [[[s] & form] (rest expr)]\n      (conj (walk/postwalk-replace {s '%} form) '[%] (if cljs? 'cljs.core/fn 'clojure.core/fn)))\n    expr))\n\n#?(:clj\n   (defn cljs-resolve [env symbol]\n     (clojure.core/or (->> symbol (resolve env) cljs-sym) symbol)))\n\n(defn polish [x]\n  (cond\n    (seq? x) (flatten (keep polish x))\n    (symbol? x) nil\n    :else x))\n\n(defn polish-un [x]\n  (some-> x polish name keyword))\n\n(defn un-key [x]\n  (some-> x name keyword))\n\n(defn with-key->spec [{:keys [req req-un opt opt-un] :as data}]\n  (let [key->spec (->> (concat opt req) (map (juxt identity identity)) (into {}))\n        un-key->spec (->> (concat opt-un req-un) (map (juxt un-key identity)) (into {}))]\n    (assoc data :key->spec (merge key->spec un-key->spec))))\n\n(defn with-real-keys [{:keys [req-un opt-un] :as data}]\n  (cond-> data\n          req-un (update :req-un (partial mapv un-key))\n          opt-un (update :opt-un (partial mapv un-key))))\n\n(defn parse-keys [form]\n  (let [m (some->> form (rest) (apply hash-map))]\n    (cond-> m\n            (:req m) (update :req #(->> % flatten (keep polish) (into [])))\n            (:req-un m) (update :req-un #(->> % flatten (keep polish) (into [])))\n            (:opt-un m) (update :opt-un #(->> % (keep polish) (into [])))\n            true (-> with-key->spec with-real-keys))))\n\n(defn extract-keys [form]\n  (let [{:keys [req opt req-un opt-un]} (some->> form (rest) (apply hash-map))]\n    (flatten (map polish (concat req opt req-un opt-un)))))\n\n#?(:clj\n   (defn resolve-form [env pred]\n     (let [cljs? (in-cljs? env)\n           res (if cljs? (partial cljs-resolve env) clojure.core/resolve)]\n       (->> pred\n            (walk/postwalk\n              (fn [x]\n                (if (symbol? x)\n                  (or (some->> x res ->sym) x)\n                  x)))\n            (unfn cljs?)))))\n\n(defn extract-pred-and-info [x]\n  (if (map? x)\n    [(:spec x) (dissoc x :spec)]\n    [x {}]))\n\n(defn strip-fn-if-needed [form]\n  (let [head (first form)]\n    ;; Deal with the form (clojure.core/fn [%] (foo ... %))\n    ;; We should just use core.match...\n    (if (and (= (count form) 3) (= head #?(:clj 'clojure.core/fn :cljs 'cljs.core/fn)))\n      (nth form 2)\n      form)))\n\n(defn normalize-symbol [kw]\n  (case (and (symbol? kw) (namespace kw))\n    \"spec-tools.spec\" (symbol \"clojure.core\" (name kw))\n    \"cljs.core\" (symbol \"clojure.core\" (name kw))\n    \"cljs.spec.alpha\" (symbol \"clojure.spec.alpha\" (name kw))\n    kw))\n\n(defn extract-form [spec]\n  (if (seq? spec) spec (s/form spec)))\n\n(defn qualified-name [key]\n  (if (keyword? key)\n    (if-let [nn (namespace key)]\n      (str nn \"/\" (name key))\n      (name key))\n    key))\n\n(defn nilable-spec? [spec]\n  (let [form (and spec (s/form spec))]\n    (boolean\n      (if (seq? form)\n        (some-> form\n                seq\n                first\n                #{'clojure.spec.alpha/nilable\n                  'cljs.spec.alpha/nilable})))))\n\n(defn unwrap\n  \"Unwrap [x] to x. Asserts that coll has exactly one element.\"\n  [coll]\n  {:pre [(= 1 (count coll))]}\n  (first coll))\n\n(defn deep-merge [& values]\n  (cond\n    (every? map? values)\n    (apply merge-with deep-merge values)\n\n    (every? coll? values)\n    (reduce into values)\n\n    :else\n    (last values)))\n\n(defn unlift-keys [data ns-name]\n  (reduce\n    (fn [acc [k v]]\n      (if (= ns-name (namespace k))\n        (assoc acc (keyword (name k)) v)\n        acc))\n    {} data))\n\n;;\n;; FIXME: using ^:skip-wiki functions from clojure.spec. might break.\n;;\n\n(defn register-spec! [k s]\n  (s/def-impl k (s/form s) s))\n\n;;\n;; functional clojure.spec\n;;\n\n(defn coll-of-spec [pred type]\n  (let [form (form/resolve-form pred)]\n    (clojure.spec.alpha/every-impl\n      form\n      pred\n      {:into type\n       ::s/conform-all true\n       ::s/describe `(s/coll-of ~form :into ~type),\n       ::s/cpred coll?,\n       ::s/kind-form (quote nil)}\n      nil)))\n\n(defn map-of-spec [kpred vpred]\n  (let [forms (map form/resolve-form [kpred vpred])\n        tuple (s/tuple-impl forms [kpred vpred])]\n    (clojure.spec.alpha/every-impl\n      `(s/tuple ~@forms)\n      tuple\n      {:into {}\n       :conform-keys true\n       ::s/kfn (fn [_ v] (nth v 0))\n       ::s/conform-all true\n       ::s/describe `(s/map-of ~@forms :conform-keys true),\n       ::s/cpred coll?,\n       ::s/kind-form (quote nil)}\n      nil)))\n\n(defn keys-spec [{:keys [req opt req-un opt-un]}]\n  (let [req-specs (flatten (map polish (concat req req-un)))\n        opt-specs (flatten (map polish (concat opt opt-un)))\n        req-keys (flatten (concat (map polish req) (map polish-un req-un)))\n        opt-keys (flatten (concat (map polish opt) (map polish-un opt-un)))\n        pred-exprs (concat\n                     [#(map? %)]\n                     (map (fn [x] #(contains? % x)) req-keys))\n        pred-forms (concat\n                     [`(fn [~'%] (map? ~'%))]\n                     (map (fn [k] `(fn [~'%] (contains? ~'% ~k))) req-keys))\n        keys-pred (fn [x]\n                    (reduce\n                      (fn [_ p]\n                        (clojure.core/or (p x) (reduced false)))\n                      true\n                      pred-exprs))]\n\n    (s/map-spec-impl\n      {:req-un req-un\n       :opt-un opt-un\n       :pred-exprs pred-exprs\n       :keys-pred keys-pred\n       :opt-keys opt-keys\n       :req-specs req-specs\n       :req req\n       :req-keys req-keys\n       :opt-specs opt-specs\n       :pred-forms pred-forms\n       :opt opt})))\n\n(defn nilable-spec [pred]\n  (let [form (form/resolve-form pred)]\n    (s/nilable-impl form pred nil)))\n\n(defn or-spec [v]\n  (let [ks (mapv first v)\n        preds (mapv second v)\n        forms (mapv form/resolve-form preds)]\n    (s/or-spec-impl ks forms preds nil)))\n"]}