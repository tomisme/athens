{
"version":3,
"file":"module$node_modules$marked$src$Lexer.js",
"lineCount":13,
"mappings":"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",
"sources":["node_modules/marked/src/Lexer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$marked$src$Lexer\"] = function(global,require,module,exports) {\nconst Tokenizer = require('./Tokenizer.js');\nconst { defaults } = require('./defaults.js');\nconst { block, inline } = require('./rules.js');\n\n/**\n * smartypants text replacement\n */\nfunction smartypants(text) {\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n}\n\n/**\n * mangle email addresses\n */\nfunction mangle(text) {\n  let out = '',\n    i,\n    ch;\n\n  const l = text.length;\n  for (i = 0; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n}\n\n/**\n * Block Lexer\n */\nmodule.exports = class Lexer {\n  constructor(options) {\n    this.tokens = [];\n    this.tokens.links = Object.create(null);\n    this.options = options || defaults;\n    this.options.tokenizer = this.options.tokenizer || new Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n\n    const rules = {\n      block: block.normal,\n      inline: inline.normal\n    };\n\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n\n  /**\n   * Expose Rules\n   */\n  static get rules() {\n    return {\n      block,\n      inline\n    };\n  }\n\n  /**\n   * Static Lex Method\n   */\n  static lex(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.lex(src);\n  }\n\n  /**\n   * Preprocessing\n   */\n  lex(src) {\n    src = src\n      .replace(/\\r\\n|\\r/g, '\\n')\n      .replace(/\\t/g, '    ');\n\n    this.blockTokens(src, this.tokens, true);\n\n    this.inline(this.tokens);\n\n    return this.tokens;\n  }\n\n  /**\n   * Lexing\n   */\n  blockTokens(src, tokens = [], top = true) {\n    src = src.replace(/^ +$/gm, '');\n    let token, i, l;\n\n    while (src) {\n      // newline\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        if (token.type) {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.code(src, tokens)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // fences\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // heading\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // table no leading pipe (gfm)\n      if (token = this.tokenizer.nptable(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // hr\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // blockquote\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        token.tokens = this.blockTokens(token.text, [], top);\n        tokens.push(token);\n        continue;\n      }\n\n      // list\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        l = token.items.length;\n        for (i = 0; i < l; i++) {\n          token.items[i].tokens = this.blockTokens(token.items[i].text, [], false);\n        }\n        tokens.push(token);\n        continue;\n      }\n\n      // html\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // def\n      if (top && (token = this.tokenizer.def(src))) {\n        src = src.substring(token.raw.length);\n        if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title\n          };\n        }\n        continue;\n      }\n\n      // table (gfm)\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // lheading\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // top-level paragraph\n      if (top && (token = this.tokenizer.paragraph(src))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // text\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    return tokens;\n  }\n\n  inline(tokens) {\n    let i,\n      j,\n      k,\n      l2,\n      row,\n      token;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n      switch (token.type) {\n        case 'paragraph':\n        case 'text':\n        case 'heading': {\n          token.tokens = [];\n          this.inlineTokens(token.text, token.tokens);\n          break;\n        }\n        case 'table': {\n          token.tokens = {\n            header: [],\n            cells: []\n          };\n\n          // header\n          l2 = token.header.length;\n          for (j = 0; j < l2; j++) {\n            token.tokens.header[j] = [];\n            this.inlineTokens(token.header[j], token.tokens.header[j]);\n          }\n\n          // cells\n          l2 = token.cells.length;\n          for (j = 0; j < l2; j++) {\n            row = token.cells[j];\n            token.tokens.cells[j] = [];\n            for (k = 0; k < row.length; k++) {\n              token.tokens.cells[j][k] = [];\n              this.inlineTokens(row[k], token.tokens.cells[j][k]);\n            }\n          }\n\n          break;\n        }\n        case 'blockquote': {\n          this.inline(token.tokens);\n          break;\n        }\n        case 'list': {\n          l2 = token.items.length;\n          for (j = 0; j < l2; j++) {\n            this.inline(token.items[j].tokens);\n          }\n          break;\n        }\n        default: {\n          // do nothing\n        }\n      }\n    }\n\n    return tokens;\n  }\n\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src, tokens = [], inLink = false, inRawBlock = false) {\n    let token;\n\n    while (src) {\n      // escape\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // tag\n      if (token = this.tokenizer.tag(src, inLink, inRawBlock)) {\n        src = src.substring(token.raw.length);\n        inLink = token.inLink;\n        inRawBlock = token.inRawBlock;\n        tokens.push(token);\n        continue;\n      }\n\n      // link\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        if (token.type === 'link') {\n          token.tokens = this.inlineTokens(token.text, [], true, inRawBlock);\n        }\n        tokens.push(token);\n        continue;\n      }\n\n      // reflink, nolink\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        if (token.type === 'link') {\n          token.tokens = this.inlineTokens(token.text, [], true, inRawBlock);\n        }\n        tokens.push(token);\n        continue;\n      }\n\n      // strong\n      if (token = this.tokenizer.strong(src)) {\n        src = src.substring(token.raw.length);\n        token.tokens = this.inlineTokens(token.text, [], inLink, inRawBlock);\n        tokens.push(token);\n        continue;\n      }\n\n      // em\n      if (token = this.tokenizer.em(src)) {\n        src = src.substring(token.raw.length);\n        token.tokens = this.inlineTokens(token.text, [], inLink, inRawBlock);\n        tokens.push(token);\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // br\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // del (gfm)\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        token.tokens = this.inlineTokens(token.text, [], inLink, inRawBlock);\n        tokens.push(token);\n        continue;\n      }\n\n      // autolink\n      if (token = this.tokenizer.autolink(src, mangle)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // url (gfm)\n      if (!inLink && (token = this.tokenizer.url(src, mangle))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // text\n      if (token = this.tokenizer.inlineText(src, inRawBlock, smartypants)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    return tokens;\n  }\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","smartypants","text","replace","mangle","out","i","l","length","ch","charCodeAt","Math","random","toString","Tokenizer","defaults","block","inline","constructor","options","tokens","links","Object","create","tokenizer","rules","normal","pedantic","gfm","breaks","lex","src","lexer","Lexer","blockTokens","top","token","space","substring","raw","type","push","code","fences","heading","nptable","hr","blockquote","list","items","html","def","tag","href","title","table","lheading","paragraph","errMsg","silent","console","error","Error","j","k","inlineTokens","header","cells","l2","row","inLink","inRawBlock","escape","link","reflink","strong","em","codespan","br","del","autolink","url","inlineText"]
}
