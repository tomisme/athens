{"version":3,"sources":["athens/views/data_browser.cljs"],"mappings":"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","names":["athens.views.data-browser/attr-unique?","attr","cljs.core/contains?","cljs.core.get.cljs$core$IFn$_invoke$arity$2","athens.db/schema","athens.views.data-browser/attr-many?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","athens.views.data-browser/attr-ref?","athens.views.data-browser/attr-reverse?","cljs.core/Keyword","clojure.string/starts-with?","cljs.core/name","athens.views.data-browser/headings","data","mode","G__58338","js/Error","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/count","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/max","cljs.core.range.cljs$core$IFn$_invoke$arity$1","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","cljs.core/keys","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","athens.views.data-browser/coll-rows","coll","row","p__58339","vec__58340","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","idx","value","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","cljs.core/vector","athens.views.data-browser/reverse-refs-for-attr","eid","G__58343","G__58344","cljs.core/deref","G__58345","G__58346","datascript.core/q","athens.db/dsdb","athens.views.data-browser/reverse-attr","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core/namespace","athens.views.data-browser/wrap-with-db-id","athens.views.data-browser/reverse-refs","ref-attrs","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","iter__4582__auto__","s__58348","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","b__58350","cljs.core/chunk-buffer","i__58349","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__58347","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","p__58351","map__58352","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","id","athens.views.data-browser/reverse-rows","athens.views.data-browser/map-rows","m","p__58354","vec__58355","k","v","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","athens.views.data-browser/tuple-rows","tuples","p__58358","vec__58359","values","heading","athens.views.data-browser/maps-rows","ms","hs","s__58363","b__58365","i__58364","iter__58362","s__58367","b__58369","i__58368","iter__58366","s__58371","b__58373","i__58372","iter__58370","h","athens.views.data-browser/get-rows","G__58374","p__58375","map__58376","athens.views.data-browser/cell","athens.views.data-browser/table-style","athens.style/COLORS","garden.color/opacify","athens.style/HSL-COLORS","athens.views.data-browser/footer-style","p__58378","map__58379","cljs.core.get.cljs$core$IFn$_invoke$arity$3","athens.views.data-browser/table-view","limit","cell-fn","rows","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$1","s__58382","b__58384","i__58383","iter__58381","s__58386","b__58388","i__58387","iter__58385","cljs.core.take.cljs$core$IFn$_invoke$arity$2","s__58390","b__58392","i__58391","map__58393","iter__58389","map__58395","s__58398","b__58400","i__58399","map__58401","iter__58397","map__58403","c","athens.views.data-browser/coll-of-maps?","x","cljs.core/coll?","cljs.core/every?","cljs.core/associative?","cljs.core/sequential?","athens.views.data-browser/tuples?","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","athens.views.data-browser/browser","p__58407","vec__58408","seq58405","G__58406","cljs.core/next","self__4776__auto__","_","opts","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","increase-limit","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/+","result","cljs.core/map?","cljs.core/chunk-first"],"sourcesContent":["(ns athens.views.data-browser\n  (:require\n    [athens.db :as db]\n    [athens.style :refer [COLORS HSL-COLORS]]\n    [clojure.string :as str]\n    [datascript.core :as d]\n    [garden.color :refer [opacify]]\n    [reagent.core :as r]\n    [stylefy.core :as stylefy :refer [use-style]]))\n\n\n(defn attr-unique?\n  [attr]\n  (contains? (get db/schema attr) :db/unique))\n\n\n(defn attr-many?\n  [attr]\n  (= (get-in db/schema [attr :db/cardinality])\n     :db.cardinality/many))\n\n\n(defn attr-ref?\n  [attr]\n  (= (get-in db/schema [attr :db/valueType])\n     :db.type/ref))\n\n\n(defn attr-reverse?\n  [attr]\n  (when (keyword? attr)\n    (str/starts-with? (name attr) \"_\")))\n\n\n(defn headings\n  [data mode]\n  (case mode\n    :coll [\"idx\" \"val\"]\n    :map [\"key\" \"val\"]\n    :tuples (into [\"idx\"] (->> data\n                               (map count)\n                               (apply max)\n                               range))\n    :maps (into [\"idx\"] (->> data\n                             (mapcat keys)\n                             (distinct)))))\n\n\n(defn coll-rows\n  [coll]\n  (let [row (fn [[idx value]]\n              [{:value idx\n                :heading \"idx\"\n                :idx idx}\n               {:value value\n                :heading \"val\"\n                :idx idx}])]\n    (->> coll\n         (map-indexed vector)\n         (map row))))\n\n\n(defn reverse-refs-for-attr\n  [attr eid]\n  (d/q '[:find [?parent ...]\n         :in $ ?attr ?eid\n         :where [?parent :block/children ?eid]]\n       @db/dsdb attr eid))\n\n\n(defn reverse-attr\n  [attr]\n  (keyword (str (namespace attr) \"/_\" (name attr))))\n\n\n(defn wrap-with-db-id\n  [eid]\n  {:db/id eid})\n\n\n(defn reverse-refs\n  [eid]\n  (let [ref-attrs (->> db/schema\n                       keys\n                       (filter attr-ref?))]\n    (into {}\n          (for [attr ref-attrs]\n            [(reverse-attr attr)\n             (map wrap-with-db-id (reverse-refs-for-attr attr eid))]))))\n\n\n(defn reverse-rows\n  [{:keys [:db/id]}]\n  (when id\n    (reverse-refs id)))\n\n\n(defn map-rows\n  [m]\n  (let [row (fn [[k v]]\n              [{:value k\n                :heading \"key\"\n                :idx k}\n               {:value v\n                :attr k\n                :heading \"val\"\n                :idx k}])]\n    (concat (map row m)\n            (map row (reverse-rows m)))))\n\n\n(defn tuple-rows\n  [tuples]\n  (let [row (fn [[idx values]]\n              (into\n                [{:value idx\n                  :heading \"idx\"\n                  :idx idx}]\n                (map-indexed\n                  (fn [heading value]\n                    {:value value\n                     :heading (str heading)\n                     :idx idx})\n                  values)))]\n    (->> tuples\n         (map-indexed vector)\n         (map row))))\n\n\n(defn maps-rows\n  [ms]\n  (let [hs (headings ms :maps)]\n    (for [idx (-> ms count range)]\n      (into [{:value idx\n              :heading \"idx\"\n              :idx idx}]\n            (for [h (rest hs)]\n              {:value (get-in ms [idx h])\n               :attr h\n               :heading (str h)\n               :idx idx})))))\n\n\n(defn get-rows\n  [data mode]\n  (case mode\n    :coll (coll-rows data)\n    :map (map-rows data)\n    :tuples (tuple-rows data)\n    :maps (maps-rows data)))\n\n\n(defn cell\n  [{:keys [value]}]\n  (str value))\n\n\n(def table-style\n  {:border-collapse \"collapse\"\n   :font-size \"12px\"\n   :font-family \"IBM Plex Sans Condensed\"\n   :letter-spacing \"-0.01em\"\n   :margin \"8px 0 0\"\n   :min-width \"100%\"\n   ::stylefy/manual [[:td {:border-top (str \"1px solid \" (:panel-color COLORS))\n                           :padding \"2px\"}]\n                     [:tbody {:vertical-align \"top\"}]\n                     [:th {:text-align \"left\" :padding \"2px 2px\"}]\n                     [:tr {:transition \"all 0.05s ease\"}]\n                     [:td:first-child :th:first-child {:padding-left \"8px\"}]\n                     [:td:last-child :th-last-child {:padding-right \"8px\"}]\n                     [:tbody [:tr:hover {:background (opacify (:panel-color HSL-COLORS) 0.15)\n                                         :color (:header-text-color COLORS)}]]\n                     [:td>ul {:padding \"0\"\n                              :margin \"0\"\n                              :list-style \"none\"}]\n                     [:td [:li {:margin \"0 0 4px\"\n                                :padding-top \"4px\";\n                                :border-top (str \"1px solid \" (:panel-color COLORS))}]]\n                     [:td [:li:first-child {:border-top \"none\" :margin-top \"0\" :padding-top \"0\"}]]\n                     [:a {:color (:link-color COLORS)}]\n                     [:a:hover {:text-decoration \"underline\"}]]})\n\n\n(def footer-style\n  {:margin \"8px 0\"\n   ::stylefy/manual [[:a {:color (:link-color COLORS)}]]})\n\n\n(defn table-view\n  [data mode limit {:keys [cell-fn]\n                    :or {cell-fn cell}}]\n  (let [hs (headings data mode)\n        rows (get-rows data mode)]\n    [:div {:style {:overflow-x \"auto\"}}\n     [:table (use-style table-style)\n      [:thead\n       [:tr (for [h hs]\n              ^{:key (str \"heading-\" h)}\n              [:th (str h)])]]\n      [:tbody\n       (for [row (if (= mode :map)\n                   rows\n                   (take limit rows))]\n         ^{:key (str \"row-\" (-> row first :idx))}\n         [:tr (for [{:keys [idx heading] :as c} row]\n                ^{:key (str idx heading)}\n                [:td {:style {:background-color \"none\"}}\n                 (cell-fn c)])])]]]))\n\n\n(defn coll-of-maps?\n  [x]\n  (and (coll? x)\n       (every? associative? x)\n       (not (every? sequential? x))))\n\n\n(defn tuples?\n  [x]\n  (and (coll? x)\n       (every? sequential? x)))\n\n\n(defn browser\n  [_ & [opts]]\n  (let [limit (r/atom 10)\n        increase-limit #(swap! limit + 10)]\n    (fn [result & _]\n      [:div\n       [:div (cond\n\n               (coll-of-maps? result)\n               (table-view result :maps @limit opts)\n\n               (and (associative? result)\n                    (not (sequential? result)))\n               (table-view result :map @limit opts)\n\n               (tuples? result)\n               (table-view result :tuples @limit opts)\n\n               (coll? result)\n               (table-view result :coll @limit opts)\n\n               :else\n               (str result))]\n       [:div (use-style footer-style)\n        (when (and (coll? result)\n                   (not (map? result))\n                   (< @limit (count result)))\n          [:span (str \"Showing \" @limit \" out of \" (count result) \" rows \")\n           [:a {:on-click increase-limit\n                :style {:cursor :pointer}}\n            \"load more\"]])]])))\n"]}