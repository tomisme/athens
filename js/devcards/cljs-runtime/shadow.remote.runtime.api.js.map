{"version":3,"sources":["shadow/remote/runtime/api.cljc"],"mappings":"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","names":["x__4487__auto__","m__4488__auto__","shadow.remote.runtime.api/relay-msg","goog/typeOf","m__4485__auto__","cljs.core/missing-protocol","shadow.remote.runtime.api/add-extension","shadow.remote.runtime.api/del-extension","shadow.remote.runtime.api/IRuntime","runtime","msg","key","spec","p__60626","map__60627","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","shadow.remote.runtime.api/reply","mid","tid","res","G__60629","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","shadow.remote.runtime.api/describe","temp__5733__auto__","cljs.core/meta","meta-impl__4486__auto__","shadow.remote.runtime.api/Inspectable","thing","opts"],"sourcesContent":["(ns shadow.remote.runtime.api)\n\n(defprotocol IRuntime\n  (relay-msg [runtime msg])\n  (add-extension [runtime key spec])\n  (del-extension [runtime key]))\n\n(defn reply [runtime {:keys [mid tid]} res]\n  (let [res (-> res\n                (cond->\n                  mid\n                  (assoc :mid mid)\n                  tid\n                  (assoc :tid tid)))]\n    (relay-msg runtime res)))\n\n(defprotocol Inspectable\n  :extend-via-metadata true\n  (describe [thing opts] \"returns a map descriptor that tells system how to handle things further\"))\n\n(comment\n  ;; nav feels limited by being in metadata\n  ;; and coupled to the result of datafy\n  ;; also has no notion of async built-in which could be a problem for CLJS\n\n  ;; will still be used as the default descriptor impl\n\n  ;; I would like to transmit metadata to the UI but by nav/datafy potentially\n  ;; being in metadata I have to filter it first, which seems like a bad default\n\n  ;; returns one-line text summary of something. default to edn preview, could be custom\n  {::preview-self (fn [opts])\n   ;; returns map description. similar to :summary view right now\n   ::summary (fn [opts]) => {:entries 123 :obj-type \"cljs.core/PersistentArrayMap\"}\n   ::preview-entry (fn [idx opts])\n   ;; similar to nav, but navs by idx\n   ::nav (fn [idx opts callback])})\n\n"]}