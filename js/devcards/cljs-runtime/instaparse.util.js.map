{"version":3,"sources":["instaparse/util.cljc"],"mappings":";;AAIA,AAAA,AAAA,AAAAA,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAME,AACDI;AADL,AAEE,AAAcC,AAAK,AAACC,AAAMC,AAAIH;AAA9B,AACE,AAAIC;;;AAHR,AAAA,AAAA,AAAML;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC,AAAAF;;;AAAA,AAOA,AAAA,AAAA,AAAAP,AAAMc;AAAN,AAAA,AAAAb,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAa,AAAAV;;;AAAA,AAAA,AAAA,AAAA,AAAMU,AACDJ;AADL,AAEE,AAAcC,AAAK,AAACC,AAAMC,AAAIH;AAA9B,AACE,AAAIC;;;AAHR,AAAA,AAAA,AAAMG;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAN,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC,AAAAM;;;AAAA,AAQI,AAAA,AAAMC,AAAcC;AAApB,AACE,AAAAC,AAAA;AAAAA,AAAA,AAAAA,AACE,AAAcD,AAAI,AAAAC,AAAA;AADpBA,AAAA,AAAAA,AAEE,AAAaD,AAAI,AAAAC,AAAA;AAFnB,AAAA,AAGE,AAAWD;AAAI,AAAAC,AAAA;;AAHjBA","names":["var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","instaparse.util/throw-runtime-exception","seq55927","self__4777__auto__","cljs.core/seq","message","text","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/str","instaparse.util/throw-illegal-argument-exception","seq55928","instaparse.util/regexp-flags","re","G__55929"],"sourcesContent":["(ns instaparse.util)\r\n\r\n;; Both appear to be called with several strings as separate\r\n;; arguments:\r\n(defn throw-runtime-exception\r\n  [& message]\r\n  (let [^String text (apply str message)]\r\n    (-> text\r\n        #?(:clj RuntimeException.)\r\n        throw)))\r\n\r\n(defn throw-illegal-argument-exception\r\n  [& message]\r\n  (let [^String text (apply str message)]\r\n    (-> text\r\n        #?(:clj IllegalArgumentException.)\r\n        throw)))\r\n\r\n#?(:cljs\r\n    (defn regexp-flags [re]\r\n      (cond-> \"\"\r\n        (.-ignoreCase re) (str \"i\")\r\n        (.-multiline re) (str \"m\")\r\n        (.-unicode re) (str \"u\"))))\r\n"]}