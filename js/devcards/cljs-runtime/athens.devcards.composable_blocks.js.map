{"version":3,"sources":["athens/devcards/composable_blocks.cljs"],"mappings":";;;;;;;;;;;;;;AAgBA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;;AAIA,AAAA,AAAME,AAAWC;AAAjB,AAAA,AAAAF,AACG,AAAAG,AAAMI;AAANH,AAAA,AAAA;AAAAC,AAAA,AAAA,AAA+BH;AAA/B,AAAA,AAAAC,AAAAC,AAAAC,AAAAF,AAAAC,AAAAC,AAACC,AAAAA,AAAAA;;;AAGJ,AAAA,AAAME,AAAYC;AAAlB,AACE,AAAMC,AAAQ,AAACC;AAAf,AACE,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAE0CF,AAEGD;AAJ7C,AAAA,AAAAG,AAAAA,AAACC,AAAAA,AAAAA;;AAKDH;;AAGJ,AAAA,AAAKI;AACL,AAAA,AAAAC,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAiB,AAACX,AAAWM;;AACtC,AAAAlB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAsB,AAACI,AAAUkB;;AAGjC,AAAKC,AACH,AAAA,AAAA,AAAiBD;AACnB,AAAA,AAAAJ,AAAAC,AAAAC,AAAAI;AAAA;AAAA,AAAA,AAASC,AAAuB,AAACd,AAAWY;;AAC5C,AAAKG,AAAmB,AAACtB,AAAUqB;AACnC,AAAA1B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAA4B0B;;AAC5B,AAAA3B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAkB,AAAAC,AAAAC,AAAAO;AAAA;AAAA,AAAA,AAAA;;;;;;;;;;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAAC;;AAAA,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAD,AAAAE;;;AAAA,AAAA,AAAA,AAAAF,AAAA,AAAAC;;AAAA,AAAA,AAAAA,AAAA;AAAA,AAAAC;;;AAAA,AAAA,AAAA,AAAAF,AAAAG;;AAAA,AAAA,AAAA,AAAAH,AAAA,AAAAI,AAAAC;;AAAA,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAAE,AAAA,AACGU,AAAgB,AAAA,AAAQnB;AAD3B,AAAA,AAAA,AAAAU,AAAAD;AAAA,AAAAE,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAAJ,AAAAE,AAAAC;;;AAAA,AAAAC,AAAAJ;;AAAA,AAAA,AAAAlC,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA+B;;;AAAA,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAA;;;AAAA,AAAA,AAAAA,AAAA;;AAAA,AAAA,AAAAA,AAAA;;AAAA,AAAA,AAAAA,AAAA,AAAAY,AAAAC,AAAAC;AAAA,AAAA,AAAAC,AAAAF,AAAA;;;AAAA;;;AAAAG,AAAA,AAAAd;AAAA,AAAA,AAAAF,AAAAE;;;AAAAF;;AAAA,AAAAA,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;AAIA,AAAA,AAAKkB;AAWL,AAAA,AAAA5B,AAAAC,AAAAC,AAAA2B;AAAA;AAAA,AAAA,AAASC,AAAmB,AAACrC,AAAWmC;;AACxC,AAAKG,AAAe,AAAC7C,AAAU4C;AAC/B,AAAAjD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAwBiD;;AACxB,AAAAlD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAkB,AAAAC,AAAAC,AAAA8B;AAAA;AAAA,AAAA,AAAA;;;;;;;;;;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAAC;;AAAA,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAD,AAAAE;;;AAAA,AAAA,AAAA,AAAAF,AAAA,AAAAC;;AAAA,AAAA,AAAAA,AAAA;AAAA,AAAAC;;;AAAA,AAAA,AAAA,AAAAF,AAAApB;;AAAA,AAAA,AAAA,AAAAoB,AAAA,AAAAnB,AAAAC;;AAAA,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAAE,AAAA,AACGU,AAAgB,AAAA,AAAQI;AAD3B,AAAA,AAAA,AAAAb,AAAAD;AAAA,AAAAE,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAAJ,AAAAE,AAAAC;;;AAAA,AAAAC,AAAAJ;;AAAA,AAAA,AAAAlC,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA+B;;;AAAA,AAAA,AAAAkB,AAAA;AAAA,AAAA,AAAA;;;AAAA,AAAA,AAAAA,AAAA;;AAAA,AAAA,AAAAA,AAAA;;AAAA,AAAA,AAAAA,AAAA,AAAAX,AAAAC,AAAAC;AAAA,AAAA,AAAAC,AAAAF,AAAA;;;AAAA;;;AAAAa,AAAA,AAAAD;AAAA,AAAA,AAAAF,AAAAE;;;AAAAF;;AAAA,AAAAA,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;AAIA,AAAKI,AAAc,AAAA,AAAA,AAAUP;AAC7B,AAAA,AAAA9B,AAAAC,AAAAC,AAAAoC;AAAA;AAAA,AAAA,AAASC,AAAU,AAAC9C,AAAW4C;;AAC/B,AAAKG,AAAM,AAACtD,AAAUqD;AACtB,AAAA1D,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAe0D;;AACf,AAAKC,AAAa,AAACC,AAAoB,AAAA,AAAeF;AACtD,AAAA3D,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAsB2D;;AACtB,AAAKE,AAAkB,AAAA,AAACC,AAAQ,AAACC,AAAyBJ;AAC1D,AAAA5D,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAA2B6D;;AAO3B;;;AAAA,AAAOG,AAEJC;AAFH,AAGE,AAAI,AAACC,AAAQD;AAEX,AAAI,AAACE,AAAK,AAACC,AAAOH;AAChB,AAACI,AAAI,AAAA,AAACC,AAAOL;;AACb,AAACI,AAAI,AAAA,AAACC,AAAOL;;;AAEfA;;;AAKJ;;;;AAAA,AAAOM,AAGJN,AAAKO;AAHR,AAME,AAAI,AAACN,AAAQD;AACX,AAAI,AAACE,AAAK,AAACC,AAAOH;AAChB,AAACH,AAAK,AAAA,AAAA,AAACW,AAAOR,AAAUO;;AACxB,AAACE,AAAMC,AAAO,AAACC,AAAMX,AAAMO;;;AAC7BA;;;AAGJ;;;AAAA,AAAMK,AAEHC;AAFH,AAGE,AAACC,AAAWC,AACAhB,AACAO,AACAO;;AAMd,AAAA,AAAMG,AACHC,AAAKC;AADR,AAEE,AAAA,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAACE,AAAgBH,AAAqBC;AADxC,AAAA,AAAAC,AAESE;AAFT,AAAAF,AAEkBG;AAFlB,AAGIA;;AAHJ,AAAA,AAAAH;;;;AAMF,AAAA,AAAMI,AAAQC;AAAd,AACE,AAAOC,AAAI,AAACb,AAAWY;;AAAvB,AACE,AAAI,AAACE,AAASD;AACZ,AAACE,AAASF;;AACV,AAAO,AAAMzB,AAAK,AAAC2B,AAASF;AAArB,AACE,AAAI,AAAA,AAACG,AAAuB,AAACjB,AAAMX;AACjC,AAAMiB,AAAK,AAAA,AAACY,AAAK,AAAC1B,AAAOH;AAAzB,AAAA,AACMkB,AAAgB,AAAA,AAAIO,AAAIK,AAAWC;AACnCC,AAAO,AAAChB,AAAkBC,AAAKC;AAFrC,AAGE,AAACN,AAAWoB;;AACd,AAACC,AAASR;;;;;;;;;AAG3B,AAAKS,AAAe,AAACX,AAAO3B;AAC5B,AAAA9D,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAwBmG;;AACxB,AAAApG,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAkB,AAAAC,AAAAC,AAAAgF;AAAA;AAAA,AAAA,AAAA;;;;;;;;;;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAAC;;AAAA,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAD,AAAAE;;;AAAA,AAAA,AAAA,AAAAF,AAAA,AAAAC;;AAAA,AAAA,AAAAA,AAAA;AAAA,AAAAC;;;AAAA,AAAA,AAAA,AAAAF,AAAAtE;;AAAA,AAAA,AAAA,AAAAsE,AAAA,AAAArE,AAAAC;;AAAA,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAAE,AAAkCgE;AAAlC,AAAA,AAAA,AAAA/D,AAAAD;AAAA,AAAAE,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAAJ,AAAAE,AAAAC;;;AAAA,AAAAC,AAAAJ;;AAAA,AAAA,AAAAlC,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA+B;;;AAAA,AAAA,AAAAoE,AAAA;AAAA,AAAA,AAAA;;;AAAA,AAAA,AAAAA,AAAA;;AAAA,AAAA,AAAAA,AAAA;;AAAA,AAAA,AAAAA,AAAA,AAAA7D,AAAAC,AAAAC;AAAA,AAAA,AAAAC,AAAAF,AAAA;;;AAAA;;;AAAA+D,AAAA,AAAAD;AAAA,AAAA,AAAAF,AAAAE;;;AAAAF;;AAAA,AAAAA,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;AACA,AAAAtG,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAkB,AAAAC,AAAAC,AAAAqF;AAAA;AAAA,AAAA,AAAA;;;;;;;;;;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAAC;;AAAA,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAD,AAAAE;;;AAAA,AAAA,AAAA,AAAAF,AAAA,AAAAC;;AAAA,AAAA,AAAAA,AAAA;AAAA,AAAAC;;;AAAA,AAAA,AAAA,AAAAF,AAAA3E;;AAAA,AAAA,AAAA,AAAA2E,AAAA,AAAA1E,AAAAC;;AAAA,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAAE,AAAA,AACGU,AAAgB,AAAA,AAAQa;AAD3B,AAAA,AAAA,AAAAtB,AAAAD;AAAA,AAAAE,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAAJ,AAAAE,AAAAC;;;AAAA,AAAAC,AAAAJ;;AAAA,AAAA,AAAAlC,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA+B;;;AAAA,AAAA,AAAAyE,AAAA;AAAA,AAAA,AAAA;;;AAAA,AAAA,AAAAA,AAAA;;AAAA,AAAA,AAAAA,AAAA;;AAAA,AAAA,AAAAA,AAAA,AAAAlE,AAAAC,AAAAC;AAAA,AAAA,AAAAC,AAAAF,AAAA;;;AAAA;;;AAAAoE,AAAA,AAAAD;AAAA,AAAA,AAAAF,AAAAE;;;AAAAF;;AAAA,AAAAA,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA","names":["devcards.core/register-card","devcards.core/card-base","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","devcards.core/assert-options-map","cljs.core/deref","athens.devcards.composable-blocks/get-block","uid","G__60478","G__60479","G__60480","posh.reagent/pull","athens.db/dsdb","athens.devcards.composable-blocks/add-block!","s","new-uid","athens.util/gen-block-uid","G__60481","re-frame.core/dispatch-sync","athens.devcards.composable-blocks/normal-block-content","js/athens","js/athens.devcards","js/athens.devcards.composable-blocks","js/athens.devcards.composable-blocks.normal-block-uid","athens.devcards.composable-blocks/normal-block-uid","athens.devcards.composable-blocks/normal-embed-block-content","js/athens.devcards.composable-blocks.normal-embed-block-uid","athens.devcards.composable-blocks/normal-embed-block-uid","athens.devcards.composable-blocks/normal-embed-block","js/athens.devcards.composable-blocks.t_athens$devcards$composable_blocks60482","athens.devcards.composable-blocks/t_athens$devcards$composable_blocks60482","_60484","meta60483","cljs.core/PROTOCOL_SENTINEL","this__42228__auto__","devcard-opts__42229__auto__","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","v__42247__auto__","cljs.core/fn?","data-atom__42248__auto__","owner__42249__auto__","reagent.core/as-element","this__4428__auto__","writer__4429__auto__","opt__4430__auto__","cljs.core/-write","athens.devcards.composable-blocks/->t_athens$devcards$composable_blocks60482","athens.views.blocks/block-component","athens.devcards.composable-blocks/modifier-block-content","js/athens.devcards.composable-blocks.modifier-block-uid","athens.devcards.composable-blocks/modifier-block-uid","athens.devcards.composable-blocks/modifier-block","js/athens.devcards.composable-blocks.t_athens$devcards$composable_blocks60485","athens.devcards.composable-blocks/t_athens$devcards$composable_blocks60485","_60487","meta60486","athens.devcards.composable-blocks/->t_athens$devcards$composable_blocks60485","athens.devcards.composable-blocks/block-content","js/athens.devcards.composable-blocks.block-uid","athens.devcards.composable-blocks/block-uid","athens.devcards.composable-blocks/block","athens.devcards.composable-blocks/parsed-block","athens.parser/parse-to-ast","athens.devcards.composable-blocks/transformed-block","cljs.core.into.cljs$core$IFn$_invoke$arity$2","athens.parse-renderer/transform","athens.devcards.composable-blocks/children","node","cljs.core/vector?","cljs.core/map?","cljs.core/second","cljs.core/seq","cljs.core.subvec.cljs$core$IFn$_invoke$arity$2","athens.devcards.composable-blocks/make","children","cljs.core.subvec.cljs$core$IFn$_invoke$arity$3","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/vector","cljs.core/first","athens.devcards.composable-blocks/hiccup-zip","root","clojure.zip/zipper","cljs.core/sequential?","athens.devcards.composable-blocks/eval-sci-modifier","code","context","e60488","sci.core.eval_string.cljs$core$IFn$_invoke$arity$2","js/Error","e","athens.devcards.composable-blocks/modify","tree","loc","clojure.zip/end?","clojure.zip/node","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","clojure.zip/remove","clojure.zip/root","result","clojure.zip/next","athens.devcards.composable-blocks/modified-block","js/athens.devcards.composable-blocks.t_athens$devcards$composable_blocks60489","athens.devcards.composable-blocks/t_athens$devcards$composable_blocks60489","_60491","meta60490","athens.devcards.composable-blocks/->t_athens$devcards$composable_blocks60489","js/athens.devcards.composable-blocks.t_athens$devcards$composable_blocks60492","athens.devcards.composable-blocks/t_athens$devcards$composable_blocks60492","_60494","meta60493","athens.devcards.composable-blocks/->t_athens$devcards$composable_blocks60492"],"sourcesContent":["(ns athens.devcards.composable-blocks\n  (:require\n    [athens.db :as db]\n    [athens.effects]\n    [athens.events]\n    [athens.parse-renderer :as parse-renderer]\n    [athens.parser :as parser]\n    [athens.util :refer [gen-block-uid]]\n    [athens.views.blocks :refer [block-component]]\n    [clojure.zip :as zip]\n    [devcards.core :as devcards :refer [defcard defcard-rg]]\n    [posh.reagent :refer [pull]]\n    [re-frame.core :as rf]\n    [sci.core :as sci]))\n\n\n(defcard \"## Composable Blocks\")\n\n\n\n(defn get-block [uid]\n  @(pull db/dsdb '[*] [:block/uid uid]))\n\n\n(defn add-block! [s]\n  (let [new-uid (gen-block-uid)]\n    (rf/dispatch-sync [:transact [{:db/id -1\n                                   :block/children []\n                                   :block/uid new-uid\n                                   :block/open false\n                                   :block/string s}]])\n    new-uid))\n\n\n(def normal-block-content \"Alice\")\n(defonce normal-block-uid (add-block! normal-block-content))\n(defcard normal-block (get-block normal-block-uid))\n\n\n(def normal-embed-block-content\n  (str \"Hello, ((\" normal-block-uid \"))\"))\n(defonce normal-embed-block-uid (add-block! normal-embed-block-content))\n(def normal-embed-block (get-block normal-embed-block-uid))\n(defcard normal-embed-block normal-embed-block)\n(defcard-rg normal-embed-render\n  [block-component (:db/id normal-embed-block)])\n\n\n(def modifier-block-content\n  #_(let [{:keys [block]} *1]\n      [:div\n       [:input {:type \"checkbox\"}]\n       [:span {:style {:margin-left 10}}\n        block]])\n  \":sci (let [{:keys [block]} *1]\n          [:div\n           [:input {:type \\\"checkbox\\\"}]\n           [:span {:style {:margin-left 10}}\n            block]])\")\n(defonce modifier-block-uid (add-block! modifier-block-content))\n(def modifier-block (get-block modifier-block-uid))\n(defcard modifier-block modifier-block)\n(defcard-rg modifier-block-render\n  [block-component (:db/id modifier-block)])\n\n\n(def block-content (str \"((\" modifier-block-uid \")) collect eggs\"))\n(defonce block-uid (add-block! block-content))\n(def block (get-block block-uid))\n(defcard block block)\n(def parsed-block (parser/parse-to-ast (:block/string block)))\n(defcard parsed-block parsed-block)\n(def transformed-block (into [] (parse-renderer/transform parsed-block)))\n(defcard transformed-block transformed-block)\n\n\n;; EPL Licensed -- Copyright \u00a9 2012 David Santiago\n;; BEGIN copy-paste from https://github.com/davidsantiago/hickory\n\n\n(defn- children\n  \"Takes a hiccup node (normalized or not) and returns its children nodes.\"\n  [node]\n  (if (vector? node)\n    ;; It's a hiccup node vector.\n    (if (map? (second node)) ;; There is an attr map in second slot.\n      (seq (subvec node 2))  ;; So skip tag and attr vec.\n      (seq (subvec node 1))) ;; Otherwise, just skip tag.\n    ;; Otherwise, must have a been a node list\n    node))\n\n;; Note, it's not made clear at all in the docs for clojure.zip, but as far as\n;; I can tell, you are given a node potentially with existing children and\n;; the sequence of children that should totally replace the existing children.\n(defn- make\n  \"Takes a hiccup node (normalized or not) and a sequence of children nodes,\n   and returns a new node that has the the children argument as its children.\"\n  [node children]\n  ;; The node might be either a vector (hiccup form) or a seq (which is like a\n  ;; node-list).\n  (if (vector? node)\n    (if (map? (second node))                 ;; Again, check for normalized vec.\n      (into (subvec node 0 2) children)      ;; Attach children after tag&attrs.\n      (apply vector (first node) children))  ;; Otherwise, attach after tag.\n    children))   ;; We were given a list for node, so just return the new list.\n\n\n(defn hiccup-zip\n  \"Returns a zipper for Hiccup forms, given a root form.\"\n  [root]\n  (zip/zipper sequential?\n              children\n              make\n              root))\n\n\n;; END copy-paste\n\n\n(defn eval-sci-modifier\n  [code context]\n  (try\n    (sci/eval-string code {:bindings {'*1 context}})\n    (catch js/Error e\n      e)))\n\n\n(defn modify [tree]\n  (loop [loc (hiccup-zip tree)]\n    (if (zip/end? loc)\n      (zip/node loc)\n      (recur (let [node (zip/node loc)]\n               (if (= :athens/sci-modifier (first node))\n                 (let [code (subs (second node) 4)\n                       context {:block (-> loc zip/remove zip/root)}\n                       result (eval-sci-modifier code context)]\n                   (hiccup-zip result))\n                 (zip/next loc)))))))\n\n\n(def modified-block (modify transformed-block))\n(defcard modified-block modified-block)\n(defcard-rg modified-block-render modified-block)\n(defcard-rg block-render\n  [block-component (:db/id block)])\n"]}