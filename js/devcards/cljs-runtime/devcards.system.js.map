{"version":3,"sources":["devcards/system.cljs"],"mappings":"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","names":["devcards.system/l","x","js/console","devcards.system/devcards-app-element-id","devcards.system/devcards-rendered-card-class","devcards.system/prevent->","f","e","devcards.system/get-element-by-id","id","js/document","devcards.system/devcards-app-node","devcards.system/path->unique-card-id","path","clojure.string.join.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/name","cljs.core/cons","devcards.system/create-element*","tag","style-text","el","js/document.createElement","js/document.createTextNode","devcards.system/create-style-element","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","devcards.system/create-script-element","devcards.system/prepend-child","node","node2","temp__5733__auto__","first-child","devcards.system/add-css-if-necessary!","heads","head","G__41784","G__41785","G__41786","G__41787","G__41788","G__41789","G__41790","G__41791","or__4185__auto__","goog.labs.userAgent.device/isMobile","G__41792","G__41793","devcards.system/render-base-if-necessary!","js/devcards","js/devcards.system","js/devcards.system.history","devcards.system/history","devcards.util.utils/html-env?","h","js/goog.History","devcards.system/path->token","devcards.system/token->path","token","cljs.core/vec","cljs.core/keyword","clojure.string/replace-first","clojure.string.split.cljs$core$IFn$_invoke$arity$2","devcards.system/hash-navigate","devcards.system/hash-routing-init","state-atom","G__41795","G__41796","G__41797","p1__41794#","goog.events/listen","goog.history.EventType/NAVIGATE","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","devcards.system/set-current-path","temp__5735__auto__","goog.object/get","js/location","devcards.system/devcard?","d","and__4174__auto__","cljs.core/map?","devcards.system/path-collision","state","c","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/butlast","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core/last","devcards.system/register-collision","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","cljs.core/inc","js/devcards.system.dev-trans","method-table__4672__auto__","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","prefer-table__4673__auto__","method-cache__4674__auto__","cached-hierarchy__4675__auto__","hierarchy__4676__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$3","fexpr__41798","cljs.core/MultiFn","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","devcards.system/dev-trans","cljs.core/first","msg","p__41799","vec__41800","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","map__41803","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","_","options","func","position","new-path","dc","devcards.system/devcard-initial-data","js/devcards.system.app-state","devcards.system/app-state","devcards.system/valid-path?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","devcards.system/enforce-valid-path","p__41805","map__41806","devcards.system/add-to-current-path","current-path","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","p__41808","map__41809","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","devcards.system/set-current-path!","devcards.system/current-page","data","devcards.system/display-single-card?","devcards.system/display-dir-paths","cur","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/complement","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core/second","devcards.system/display-cards","p1__41811#","cljs.core/not","devcards.system/*devcard-data*","p__41812","map__41813","devcards.system/card-template","card","js/React.createElement","sablono.interpreter/interpret","*devcard-data*-orig-val__41815","*devcard-data*-temp-val__41816","devcards.system/render-cards","cards","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","devcards.system/main-cards-template","cljs.core/deref","p__41817","map__41818","devcards.system/breadcrumbs","cpath","crumbs","cljs.core.juxt.cljs$core$IFn$_invoke$arity$2","cljs.core/rest","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","i","v","cljs.core.subvec.cljs$core$IFn$_invoke$arity$3","cljs.core.take.cljs$core$IFn$_invoke$arity$2","cljs.core/count","cljs.core.repeat.cljs$core$IFn$_invoke$arity$1","devcards.system/breadcrumbs-templ","counter","sep-fn","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core.interleave.cljs$core$IFn$_invoke$arity$2","cljs.core/iterate","p__41820","vec__41821","n","devcards.system/cljs-logo","devcards.system/navigate-to-path","key","s","new-s","devcards.system/dir-links","dirs","cljs.core/empty?","attrs41828","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","sablono.interpreter/attributes","sablono.normalize.merge_with_class.cljs$core$IFn$_invoke$arity$variadic","p__41832","vec__41833","child-tree","p__41839","vec__41840","devcards.system/main-template","attrs41846","attrs41850","attrs41851","clojure.string/replace","dir-paths","ctor__41563__auto__","props__41560__auto__","this__41561__auto__","js/React.Component","js/goog.inherits","x41858","devcards.system/DevcardsRoot","this","cljs.core/add-watch","devcards.system/renderer","js/ReactDOM.render","devcards.system/merge-in-new-data","new-state","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","devcards.system/off-the-books","channel","start-data","first-message","initial-data","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","c__37014__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__37015__auto__","switch__36947__auto__","state_41906","state_val_41907","inst_41902","statearr-41908","inst_41859","inst_41860","statearr-41909","statearr-41910","inst_41867","statearr-41911","statearr-41912","statearr-41913","statearr-41914","inst_41897","statearr-41915","statearr-41916","inst_41904","cljs.core.async.impl.ioc-helpers/return-chan","statearr-41917","inst_41862","inst_41863","cljs.core/PersistentVector","inst_41864","inst_41865","statearr-41919","cljs.core.async/ioc-alts!","inst_41885","statearr-41920","inst_41876","inst_41883","statearr-41921","statearr-41922","inst_41875","inst_41877","inst_41878","inst_41879","statearr-41923","statearr-41924","statearr-41925","inst_41888","inst_41889","inst_41890","inst_41891","statearr-41926","statearr-41927","inst_41895","statearr-41928","inst_41899","statearr-41929","inst_41881","statearr-41930","statearr-41931","state-machine__36948__auto__","ret-value__36949__auto__","result__36950__auto__","cljs.core/keyword-identical?","e41932","js/Object","ex__36951__auto__","statearr-41933","cljs.core.async.impl.ioc-helpers/process-exception","state__37016__auto__","statearr-41934","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs.core.async/timeout","devcards.system/load-data-from-channel!","state_41942","state_val_41943","inst_41935","inst_41936","inst_41937","cljs.core.async.impl.ioc-helpers/take!","inst_41939","inst_41940","statearr-41944","e41945","statearr-41946","statearr-41947","cljs.core/reset!","devcards.system/start-ui-with-renderer","renderer","js/devcards.system.devcards-ui-setup","devcards.system/devcards-ui-setup","js/React","js/React.initializeTouchEvents","state_41972","state_val_41973","statearr-41974","inst_41948","inst_41970","inst_41957","inst_41959","inst_41960","inst_41950","inst_41951","inst_41952","inst_41953","inst_41954","statearr-41975","statearr-41976","inst_41962","inst_41963","inst_41964","statearr-41977","statearr-41978","statearr-41979","statearr-41980","statearr-41981","inst_41968","statearr-41982","statearr-41983","e41984","statearr-41985","statearr-41987","js/setTimeout","devcards.system/start-ui","state_42017","state_val_42018","statearr-42019","inst_41990","inst_42013","inst_41999","inst_42001","inst_42002","inst_41992","inst_41993","inst_41994","inst_41995","inst_41996","statearr-42020","statearr-42021","inst_42004","inst_42005","inst_42006","statearr-42023","statearr-42024","statearr-42027","statearr-42028","statearr-42029","inst_42011","statearr-42030","statearr-42031","e42032","statearr-42033","statearr-42034","devcards.system/cljs-logo-svg"],"sourcesContent":["(ns devcards.system\n  (:require\n   [clojure.string :as string]\n   [cljs.core.async :refer [put! <! chan timeout]]\n   [sablono.core :as sab]\n   [devcards.util.edn-renderer :as edn-rend]\n   [goog.object :as gobj]\n   [goog.events :as events]\n   [goog.history.EventType :as EventType]\n   [goog.labs.userAgent.device :as device]\n   [devcards.util.utils :as utils :refer-macros [define-react-class]]\n   [react :as react]\n   [react-dom :as react-dom])\n  (:require-macros\n   [cljs.core.async.macros :refer [go go-loop]]\n   [devcards.system :refer [inline-resouce-file]])\n  (:import\n   [goog History]))\n\n(defn l [x]\n  (.log js/console x)\n  x)\n\n(def devcards-app-element-id \"com-rigsomelight-devcards-main\")\n\n(def devcards-rendered-card-class \"com-rigsomelight-devcards_rendered-card\")\n\n(defn prevent-> [f] (fn [e] (.preventDefault e) (f e)))\n\n(defn get-element-by-id [id] (.getElementById js/document id))\n\n(defn devcards-app-node [] (get-element-by-id devcards-app-element-id))\n\n(defn path->unique-card-id [path]\n  (string/join \".\" (map (fn [x] (str \"[\" x \"]\"))\n                        (map name (cons :cardpath path)))))\n\n#_(defn unique-card-id->path [card-id]\n  (mapv keyword\n       (-> (subs card-id 1\n                 (dec (count card-id)))\n           (string/split #\"\\].\\[\")\n           rest)))\n\n(defn create-element* [tag id style-text]\n  (let [el (js/document.createElement tag)]\n    (set! (.-id el) id)\n    (.appendChild el (js/document.createTextNode style-text))\n    el))\n\n(def create-style-element (partial create-element* \"style\"))\n(def create-script-element (partial create-element* \"script\"))\n\n(defn prepend-child [node node2]\n  (if-let [first-child (.-firstChild node)]\n    (.insertBefore node node2 first-child)\n    (.appendChild node node2)))\n\n(defn add-css-if-necessary! []\n  (if-let [heads (.getElementsByTagName js/document \"head\")]\n    (let [head (aget heads 0)]\n      (when-not (get-element-by-id \"com-rigsomelight-code-highlight-css\")\n        (.appendChild head\n                      (create-style-element \"com-rigsomelight-code-highlight-css\"\n                                            (inline-resouce-file \"public/devcards/css/com_rigsomelight_github_highlight.css\"))))\n\n\n      (when-not (get-element-by-id \"com-rigsomelight-devcards-css\")\n        (.appendChild head (create-style-element \"com-rigsomelight-devcards-css\"\n                                                 (inline-resouce-file \"public/devcards/css/com_rigsomelight_devcards.css\"))))\n      (when-not (get-element-by-id \"com-rigsomelight-devcards-addons-css\")\n        (.appendChild head (create-style-element \"com-rigsomelight-devcards-addons-css\"\n                                                 (inline-resouce-file \"public/devcards/css/com_rigsomelight_devcards_addons.css\"))))\n      (when-not (get-element-by-id \"com-rigsomelight-edn-css\")\n        (.appendChild head\n                      (create-style-element \"com-rigsomelight-edn-css\"\n                                            (inline-resouce-file \"public/devcards/css/com_rigsomelight_edn_flex.css\"))))\n\n      ;; we are injecting conditionally so that we can skip mobile\n      ;; and skip node\n      ;; really not diggin this but ...\n      (when-not (or (get-element-by-id \"com-rigsomelight-code-highlighting\")\n                    (device/isMobile))\n        (.appendChild head\n                      (create-script-element \"com-rigsomelight-code-highlighting\"\n                                             (inline-resouce-file \"public/devcards/js/highlight.pack.js\")))))))\n\n(defn render-base-if-necessary! []\n  (add-css-if-necessary!)\n  (when-not (devcards-app-node)\n    (let [el (js/document.createElement \"div\")]\n      (set! (.-id el) devcards-app-element-id)\n      (prepend-child (.-body js/document) el))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; Hashbang routing\n\n(declare set-current-path history)\n\n(defonce history\n  (when (utils/html-env?)\n    (let [h (History.)]\n      (.setEnabled h true)\n      h)))\n\n(defn path->token [path]\n  (str \"!/\" (string/join \"/\" (map name path))))\n\n(defn token->path [token]\n  (vec (map keyword\n            (-> token\n              (string/replace-first #\"#\" \"\")\n              (string/replace-first #\"!/\" \"\")\n              (string/split #\"/\")))))\n\n#_(prn (token->path (.getToken history)))\n\n#_(prn (token->path (gobj/get js/location \"hash\")))\n\n(defn hash-navigate [path]\n  (.setToken history (path->token path)))\n\n(defn hash-routing-init [state-atom]\n  (events/listen history EventType/NAVIGATE\n                 #(swap! state-atom set-current-path (token->path (.-token %))))\n  ;; we should probably just get the location and parse this out to\n  ;; avoid the initial race condition where .getToken isn't populated\n  (when-let [token (gobj/get js/location \"hash\")]\n    (swap! state-atom set-current-path (token->path token))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn devcard? [d]\n  (and (map? d)\n       #_(:data-atom d)\n       (:func d)\n       (:path d)\n       (:position d)\n       d))\n\n(defn path-collision [state path]\n  (if-let [c (get (:path-collision-count state) path)]\n    (vec (concat (butlast (vec path))\n                 [(keyword (str (name (last path)) \"-\" c))]))\n    path))\n\n(defn register-collision [state path]\n  (update-in state [:path-collision-count path] inc))\n\n(defmulti dev-trans first)\n\n(defmethod dev-trans :default [msg state] state)\n\n(defmethod dev-trans :register-card [[_ {:keys [path options func]}] state]\n  (let [position (:position state)\n        new-path (path-collision state path)]\n    (-> state\n        (update-in [:position] inc)\n        (update-in (cons :cards new-path)\n                   (fn [dc]\n                     { :path new-path\n                       :func func\n                       :position position }))\n        (register-collision path))))\n\n(def devcard-initial-data { :current-path []\n                            :position 0\n                            :cards {}\n                            :path-collision-count {}\n                            :base-card-options { :frame true\n                                                 :heading true\n                                                 :padding true\n                                                 :hidden false\n                                                 :inspect-data false\n                                                 :watch-atom true\n                                                 :history false } })\n\n(defonce app-state (atom devcard-initial-data))\n\n(defn valid-path? [state path]\n  (or (= [] path)\n      (get-in (:cards state) path)))\n\n(defn enforce-valid-path [state path]\n  (vec (if (valid-path? state path) path [])))\n\n(defn add-to-current-path [{:keys [current-path] :as state} path]\n  (assoc state\n         :current-path\n         (enforce-valid-path state (conj current-path (keyword path)))))\n\n(defn set-current-path [{:keys [current-path] :as state} path]\n  (let [path (vec (map keyword path))]\n    (if (not= current-path path)\n      (-> state\n        (assoc :current-path (enforce-valid-path state path))\n        #_add-navigate-effect)\n      state)))\n\n(defn set-current-path! [state-atom path]\n  (swap! state-atom set-current-path path)\n  (hash-navigate path))\n\n(defn current-page [data]\n  (and (:current-path data)\n       (:cards data)\n       (get-in (:cards data) (:current-path data))))\n\n(defn display-single-card? [state]\n  (devcard? (current-page state)))\n\n(defn display-dir-paths [state]\n  (let [cur (current-page state)]\n    (filter (complement (comp devcard? second)) cur)))\n\n(defn display-cards [cur]\n  (filter (comp #(and (not (:delete-card %))\n                      (devcard? %)) second) cur))\n\n(def ^:dynamic *devcard-data* nil)\n\n(defn card-template [state-atom {:keys [path options func] :as card}]\n  (sab/html\n   [:div.com-rigsomelight-devcard {:key (path->unique-card-id path)}\n    (cljs.core/binding [*devcard-data* card]\n      (func))]))\n\n(defn render-cards [cards state-atom]\n  (map (comp (partial card-template state-atom) second)\n       (sort-by (comp :position second) cards)))\n\n(defn main-cards-template [state-atom]\n  (let [data @state-atom]\n    (if (display-single-card? data)\n      (card-template state-atom (current-page data))\n      (render-cards (display-cards (current-page data)) state-atom))))\n\n(defn breadcrumbs [{:keys [current-path] :as state}]\n  (let [cpath (map name (cons :devcards current-path))\n        crumbs\n        (map (juxt last rest)\n             (rest (map-indexed\n                    (fn [i v] (subvec v 0 i))\n                    (take (inc (count cpath))\n                          (repeat (vec cpath))))))]\n    crumbs))\n\n(declare cljs-logo)\n\n(defn breadcrumbs-templ [crumbs state-atom]\n  (let [counter (atom 0)\n        sep-fn (fn [_] (sab/html [:span.com-rigsomelight-devcards-breadcrumb-sep\n                                 {:key (do (swap! counter inc) @counter)}\n                                 \"/\"]))]\n    (sab/html\n     [:div.com-rigsomelight-devcards-card-base.com-rigsomelight-devcards-breadcrumbs.com-rigsomelight-devcards-typog\n      {:key \"breadcrumbs-templ\"}\n      (rest\n       (interleave\n        (iterate sep-fn (sep-fn nil))\n       (map (fn [[n path]]\n              (sab/html\n               [:span {:style {:display \"inline-block\" }\n                       :key (path->unique-card-id path)}\n                [:a.com-rigsomelight-devcards_set-current-path\n                 {:href \"#\"\n                  :onClick      (prevent-> #(set-current-path! state-atom path))}\n                 (str n)]]))\n            crumbs)))\n      (cljs-logo)])))\n\n(defn navigate-to-path [key state-atom]\n  (swap! state-atom\n         (fn [s]\n           (let [new-s (add-to-current-path s key)]\n             (hash-navigate (:current-path new-s))\n             new-s))))\n\n(defn dir-links [dirs state-atom]\n  (when-not (empty? dirs)\n    (sab/html\n     [:div.com-rigsomelight-devcards-list-group.com-rigsomelight-devcards-typog\n      (map (fn [[key child-tree]]\n             (sab/html\n              [:a.com-rigsomelight-devcards-list-group-item\n               {:href \"#\"\n                :key (str key)\n                :onClick\n                (prevent->\n                 (fn [e] (navigate-to-path key state-atom)))\n                #_:onTouchStart\n                #_(prevent->\n                 (fn [e] (navigate-to-path key state-atom)))}\n               [:span.com-rigsomelight-devcards-badge\n                {:style {:float \"right\"}}\n                (count child-tree)]\n               [:span \" \" (name key)]]))\n           (sort-by (fn [[key _]] (name key))  dirs))])))\n\n(defn main-template [state-atom]\n  (let [data @state-atom]\n    (sab/html\n     [:div\n      {:className\n       (str \"com-rigsomelight-devcards-base \"\n            (when-let [n (first (:current-path data))]\n              (string/replace (name n) \".\" \"-\")))}\n      #_[:div.com-rigsomelight-devcards-navbar\n       [:div.com-rigsomelight-devcards-container\n        [:span.com-rigsomelight-devcards-brand\n         \"(:devcards ClojureScript)\"]]]\n      [:div.com-rigsomelight-devcards-container\n       (when-let [crumbs (breadcrumbs data)]\n         (breadcrumbs-templ crumbs state-atom))\n       (when-not (display-single-card? data)\n         (let [dir-paths (display-dir-paths data)]\n           (dir-links dir-paths state-atom)))\n       [:div\n        (main-cards-template state-atom)]]])))\n\n(define-react-class DevcardsRoot\n  (componentDidMount\n   [this]\n   (add-watch app-state :renderer-watch (fn [_ _ _ _] (.forceUpdate this))))\n  (render [this] (main-template app-state)))\n\n(defn renderer [state-atom]\n  #_(prn \"Rendering\")\n  (js/ReactDOM.render\n   (js/React.createElement DevcardsRoot)\n   #_(sab/html [:div\n              (main-template state-atom)\n              #_(edn-rend/html-edn @state-atom)])\n   (devcards-app-node)))\n\n(comment\n\n\n  a debug option :debug-card true\n\n  when initial state changes we should reset the state\n\n  an iterator to delinate a card in many states\n\n  speed test pprint and hightlighting versus edn-renderer\n\n  use a pure component for the edn renderer to memoize rerenders\n\n  look at upndown.js and marked.js\n\n  probably switch to marked for markdown parsing\n\n  fix loading race\n\n  move highlighting out and force folks to require hljs if they want it?\n\n  generate blog posts from a namespace with devcards\n  - can implement code modules\n  - look at dev mode and prod mode for this\n  - front matter in ns meta data\n\n  fix style of history so that there is no margin under it\n    when there is no data being inspected\n\n  move documentation cards into more descriptive namespaces\n  fill out details better\n\n  look at being able to render cursors\n\n  BACKBURNER\n  make slider component\n  consider web-components for hiding css styling!!!\n  turn system into react component?\n\n  )\n\n(defn merge-in-new-data [state new-state]\n  (assoc state\n         :path-collision-count {}\n         :position (:position new-state)\n         :cards    (merge\n                    (:cards state)\n                    (:cards new-state))))\n\n;; the only major potential problem here is that If we only register\n;; some of the cards of a namespace then the other cards in the\n;; namespace will dissapear. If one is doing calculations at the top\n;; level that take more than the wait time this could be a problem\n(defn off-the-books\n  \"Run sequential messages off the books outside of the atom and\n   then difference the result so we can only display the new cards\n   that have arrived. This prevents multiple renders and allows us\n   to delete cards live.\"\n  [channel start-data first-message]\n  (let [;timer (timeout 3000)\n        initial-data (-> start-data\n                       (assoc :path-collision-count {})\n                       (dissoc :cards))]\n    #_(prn \"off the books\")\n    (go-loop [data (dev-trans first-message initial-data)]\n      #_(prn \"here\")\n      (let [timer (timeout 500)] ;; needs to be longer for mobile think\n        (when-let [[[msg-name payload] ch] (alts! [channel timer])]\n          (cond\n            (= ch timer)           (merge-in-new-data start-data data)\n            ;; this will function without jsreload. but allows us to\n            ;; render a tick faster\n            (= msg-name :jsreload) (merge-in-new-data start-data data)\n            :else\n            (do\n              (recur (dev-trans [msg-name payload] data)))))))))\n\n(defn load-data-from-channel! [channel]\n  (go (let [new-state (<! (off-the-books channel @app-state []))]\n        (reset! app-state new-state))))\n\n(defn start-ui-with-renderer [channel renderer]\n  (defonce devcards-ui-setup\n    (do\n      (when (exists? js/React.initializeTouchEvents)\n        (js/React.initializeTouchEvents true))\n      (go\n        (<! (load-data-from-channel! channel))\n\n        (js/setTimeout #(renderer app-state) 0)\n\n        (js/setTimeout #(add-watch app-state :devcards-render\n                                   (fn [_ _ _ _] (renderer app-state))) 0)\n\n        (loop  []\n          (when-let [v (<! channel)]\n            #_(prn \"hey\" (first v))\n            (let [new-state (<! (off-the-books channel @app-state v))]\n              #_(prn \"in the books\")\n              (js/setTimeout #(reset! app-state new-state) 0))\n            (recur))))\n      true)))\n\n\n(defn start-ui [channel]\n  (defonce devcards-ui-setup\n    (do\n      (when (exists? js/React.initializeTouchEvents)\n        (js/React.initializeTouchEvents true))\n      (render-base-if-necessary!)\n      (go\n        ;; initial load\n        #_(prn \"INITIAL loading\")\n        ;; consume all register card messages\n        ;; and then load the accumulated state into the\n        ;; app-state\n        (<! (load-data-from-channel! channel))\n\n        #_(let [new-state (<! (off-the-books channel @app-state []))]\n          (reset! app-state new-state))\n\n        ;; escape core async context for better errors\n        (js/setTimeout #(renderer app-state) 0)\n\n        #_(js/setTimeout #(add-watch app-state :devcards-render\n                                   (fn [_ _ _ _] (renderer app-state))) 0)\n\n        (js/setTimeout #(hash-routing-init app-state) 0)\n\n        (loop  []\n          (when-let [v (<! channel)]\n            #_(prn \"hey\" (first v))\n            (let [new-state (<! (off-the-books channel @app-state v))]\n              #_(prn \"in the books\")\n              (js/setTimeout #(reset! app-state new-state) 0))\n            (recur))))\n      true)))\n\n(def cljs-logo-svg\n  \"<?xml version='1.0' encoding='utf-8'?>\n<!DOCTYPE svg PUBLIC '-//W3C//DTD SVG 1.1//EN' 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'>\n<svg class='cljs-logo' width='49px' height='49px' style='float: right; display: inline-block; position:relative; top:-13px; right: 0px;' version='1.1'\n  xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px'\n  viewBox='0 0 428 428' enable-background='new 0 0 428 428' xml:space='preserve'>\n<circle fill='#fff' cx='213' cy='214' r='213' />\n<g>\n<path fill='#96CA4B' d='M122,266.6c-12.7,0-22.3-3.7-28.9-11.1c-6.6-7.4-9.9-18-9.9-31.8c0-14.1,3.4-24.9,10.3-32.5\n  s16.8-11.4,29.9-11.4c8.8,0,16.8,1.6,23.8,4.9l-5.4,14.3c-7.5-2.9-13.7-4.4-18.6-4.4c-14.5,0-21.7,9.6-21.7,28.8\n  c0,9.4,1.8,16.4,5.4,21.2c3.6,4.7,8.9,7.1,15.9,7.1c7.9,0,15.4-2,22.5-5.9v15.5c-3.2,1.9-6.6,3.2-10.2,4\n  C131.5,266.2,127.1,266.6,122,266.6z'/>\n<path fill='#96CA4B' d='M194.4,265.1h-17.8V147.3h17.8V265.1z'/>\n<path fill='#5F7FBF' d='M222.9,302.3c-5.3,0-9.8-0.6-13.3-1.9v-14.1c3.4,0.9,6.9,1.4,10.5,1.4c7.6,0,11.4-4.3,11.4-12.9v-93.5h17.8\n  v94.7c0,8.6-2.3,15.2-6.8,19.6C237.9,300.1,231.4,302.3,222.9,302.3z M230.4,159.2c0-3.2,0.9-5.6,2.6-7.3c1.7-1.7,4.2-2.6,7.5-2.6\n  c3.1,0,5.6,0.9,7.3,2.6c1.7,1.7,2.6,4.2,2.6,7.3c0,3-0.9,5.4-2.6,7.2c-1.7,1.7-4.2,2.6-7.3,2.6c-3.2,0-5.7-0.9-7.5-2.6\n  C231.2,164.6,230.4,162.2,230.4,159.2z'/>\n<path fill='#5F7FBF' d='M342.5,241.3c0,8.2-3,14.4-8.9,18.8c-6,4.4-14.5,6.5-25.6,6.5c-11.2,0-20.1-1.7-26.9-5.1v-15.4\n  c9.8,4.5,19,6.8,27.5,6.8c10.9,0,16.4-3.3,16.4-9.9c0-2.1-0.6-3.9-1.8-5.3c-1.2-1.4-3.2-2.9-6-4.4c-2.8-1.5-6.6-3.2-11.6-5.1\n  c-9.6-3.7-16.2-7.5-19.6-11.2c-3.4-3.7-5.1-8.6-5.1-14.5c0-7.2,2.9-12.7,8.7-16.7c5.8-4,13.6-5.9,23.6-5.9c9.8,0,19.1,2,27.9,6\n  l-5.8,13.4c-9-3.7-16.6-5.6-22.8-5.6c-9.4,0-14.1,2.7-14.1,8c0,2.6,1.2,4.8,3.7,6.7c2.4,1.8,7.8,4.3,16,7.5\n  c6.9,2.7,11.9,5.1,15.1,7.3c3.1,2.2,5.4,4.8,7,7.7C341.7,233.7,342.5,237.2,342.5,241.3z'/>\n</g>\n<path fill='#96CA4B' stroke='#96CA4B' stroke-width='6' stroke-miterlimit='10' d='M197,392.7c-91.2-8.1-163-85-163-178.3\n  S105.8,44.3,197,36.2V16.1c-102.3,8.2-183,94-183,198.4s80.7,190.2,183,198.4V392.7z'/>\n<path fill='#5F7FBF' stroke='#5F7FBF' stroke-width='6' stroke-miterlimit='10' d='M229,16.1v20.1c91.2,8.1,163,85,163,178.3\n  s-71.8,170.2-163,178.3v20.1c102.3-8.2,183-94,183-198.4S331.3,24.3,229,16.1z'/>\n</svg>\")\n\n(defn cljs-logo []\n  (js/React.createElement \"span\"\n    #js {:key \"cljs-logo\"\n         :dangerouslySetInnerHTML\n         #js {:__html cljs-logo-svg}}))\n"]}