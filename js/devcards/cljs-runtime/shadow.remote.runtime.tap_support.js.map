{"version":3,"sources":["shadow/remote/runtime/tap_support.cljc"],"mappings":"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","names":["p__60858","p__60859","map__60860","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","map__60861","shadow.remote.runtime.tap-support/tap-subscribe","subs-ref","tid","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/conj","p__60864","p__60865","map__60866","map__60867","shadow.remote.runtime.tap-support/tap-unsubscribe","cljs.core/disj","p__60872","p__60873","map__60874","map__60875","cljs.core.get.cljs$core$IFn$_invoke$arity$3","shadow.remote.runtime.tap-support/request-tap-history","obj-support","runtime","num","msg","map__60878","state-ref","tap-ids","cljs.core/deref","cljs.core/vals","p1__60870#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","p1__60871#","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","cljs.core/reverse","cljs.core.take.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.into.cljs$core$IFn$_invoke$arity$2","shadow.remote.runtime.api/reply","p__60880","map__60881","shadow.remote.runtime.tap-support/tool-disconnect","svc","shadow.remote.runtime.tap-support/start","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","tap-fn","obj","oid","shadow.remote.runtime.obj-support/register","seq__60887","cljs.core/seq","chunk__60888","count__60889","i__60890","temp__5735__auto__","cljs.core/chunked-seq?","c__4609__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","shadow.remote.runtime.api/relay-msg","p1__60883#","p1__60884#","p1__60885#","p1__60886#","shadow.remote.runtime.api/add-extension","cljs.core/add-tap","p__60891","map__60892","shadow.remote.runtime.tap-support/stop","cljs.core/remove-tap","shadow.remote.runtime.api/del-extension"],"sourcesContent":["(ns shadow.remote.runtime.tap-support\n  (:require\n    [shadow.remote.runtime.api :as p]\n    [shadow.remote.runtime.obj-support :as obj]))\n\n(defn tap-subscribe\n  [{:keys [subs-ref]} {:keys [tid]}]\n  (swap! subs-ref conj tid))\n\n(defn tap-unsubscribe\n  [{:keys [subs-ref]} {:keys [tid]}]\n  (swap! subs-ref disj tid))\n\n(defn request-tap-history\n  [{:keys [obj-support runtime]}\n   {:keys [num] :or {num 10} :as msg}]\n  ;; FIXME: add actual API fn, don't reach into obj-svc directly\n  (let [{:keys [state-ref]} obj-support\n\n        tap-ids\n        (->> (:objects @state-ref)\n             (vals)\n             (filter #(= :tap (get-in % [:obj-info :from])))\n             (sort-by #(get-in % [:obj-info :added-at]))\n             (reverse)\n             (take num)\n             (map :oid)\n             (into []))]\n\n    (p/reply runtime msg {:op :tap-history\n                          :oids tap-ids})))\n\n(defn tool-disconnect\n  [{:keys [subs-ref] :as svc} tid]\n  (swap! subs-ref disj tid))\n\n(defn start [runtime obj-support]\n  (let [subs-ref\n        (atom #{})\n\n        tap-fn\n        (fn runtime-tap [obj]\n          (when (some? obj)\n            (let [oid (obj/register obj-support obj {:from :tap})]\n              (doseq [tid @subs-ref]\n                (p/relay-msg runtime {:op :tap :tid tid :oid oid})))))\n\n        svc\n        {:runtime runtime\n         :obj-support obj-support\n         :tap-fn tap-fn\n         :subs-ref subs-ref}]\n\n    (p/add-extension runtime\n      ::ext\n      {:ops\n       ;; would be nicer to just pass tap-subscribe and have the runtime\n       ;; automatically pass extra args. but this makes everything REPL unfriendly\n       ;; and will require a runtime restart for every op change\n       ;; this way only adding ops requires a restart\n       {:tap-subscribe #(tap-subscribe svc %)\n        :tap-unsubscribe #(tap-unsubscribe svc %)\n        :request-tap-history #(request-tap-history svc %)}\n       :on-tool-disconnect #(tool-disconnect svc %)})\n\n    (add-tap tap-fn)\n    svc))\n\n(defn stop [{:keys [tap-fn runtime] :as svc}]\n  (remove-tap tap-fn)\n  (p/del-extension runtime ::ext))\n"]}