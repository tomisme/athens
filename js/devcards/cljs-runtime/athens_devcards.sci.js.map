{"version":3,"sources":["athens_devcards/sci.cljs"],"mappings":"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","names":["athens-devcards.sci/log","js/console.log","athens-devcards.sci/trace","x","athens-devcards.sci/remove-from-vec","v","index","cljs.core/vec","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core.subvec.cljs$core$IFn$_invoke$arity$3","cljs.core.subvec.cljs$core$IFn$_invoke$arity$2","athens-devcards.sci/index-of","col","cljs.core/first","cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2","idx","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","devcards.core/register-card","devcards.core/card-base","cljs.core.into.cljs$core$IFn$_invoke$arity$2","iter__4582__auto__","s__54361","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__54363","cljs.core/chunk-buffer","i__54362","vec__54364","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__54360","cljs.core/chunk-rest","vec__54367","cljs.core/cons","cljs.core/rest","s","opts","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","sci.core.eval_string.cljs$core$IFn$_invoke$arity$2","athens-devcards.sci/key-code->key","athens-devcards.sci/empty-box","athens-devcards.sci/box-state*","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","p__54370","map__54371","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","athens-devcards.sci/sci-node?","str-content","clojure.string/starts-with?","athens-devcards.sci/update-box-content","boxes","id","value","cljs.core.update.cljs$core$IFn$_invoke$arity$5","cljs.core/assoc","athens-devcards.sci/handle-box-change!","e","target","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/update","p__54373","map__54374","athens-devcards.sci/get-parent-id","child-id","cljs.core/some","p__54376","vec__54377","box","p__54380","map__54381","athens-devcards.sci/get-child-idx","parent-id","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","p__54383","map__54384","athens-devcards.sci/add-child-after-idx","children-ids","new-idx","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","cljs.core/conj","p__54386","map__54387","athens-devcards.sci/add-sibling-box","next-id","state","child-idx","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core/inc","cljs.core.update.cljs$core$IFn$_invoke$arity$variadic","athens-devcards.sci/remove-child","cljs.core.update.cljs$core$IFn$_invoke$arity$4","athens-devcards.sci/delete-box","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","cljs.core/dissoc","athens-devcards.sci/handle-return-key!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","athens-devcards.sci/handle-backspace-key!","map__54389","cljs.core/deref","athens-devcards.sci/handle-box-key-down!","key-code","k","G__54391","cljs.core/Keyword","athens-devcards.sci/box-component","map__54394","map__54395","p1__54392#","p1__54393#","code","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","e54398","sci.core.eval_string.cljs$core$IFn$_invoke$arity$1","js/Error","s__54400","b__54402","i__54401","iter__54399","js/athens-devcards","js/athens-devcards.sci","js/athens-devcards.sci.t_athens_devcards$sci54403","athens-devcards.sci/t_athens_devcards$sci54403","_54405","meta54404","this__46521__auto__","devcard-opts__46522__auto__","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","v__46540__auto__","cljs.core/fn?","data-atom__46541__auto__","owner__46542__auto__","reagent.core/as-element","devcards.core/assert-options-map","this__4428__auto__","writer__4429__auto__","opt__4430__auto__","cljs.core/-write","athens-devcards.sci/->t_athens_devcards$sci54403","cljs.core/chunk-first"],"sourcesContent":["(ns athens-devcards.sci\n  (:require\n   [clojure.string :as str]\n   [devcards.core :refer [defcard defcard-rg]]\n   [reagent.core :as rg]\n   [sci.core :as sci]))\n\n(def log js/console.log)\n(defn trace [x] (log x) x)\n\n(defn remove-from-vec\n  \"Returns a new vector with the element at 'index' removed.\n\n  (remove-from-vec [:a :b :c] 1)  =>  [:a :c]\"\n  [v index]\n  (vec (concat (subvec v 0 index) (subvec v (inc index)))))\n\n(defn index-of [col v]\n  (first (keep-indexed (fn [idx x]\n                         (when (= x v)\n                           idx))\n                       col)))\n\n(defcard sci-examples\n  (into {}\n        (for [[s opts] [[\"(inc 1)\"]\n                        [\"(inc x)\" {:bindings {'x 1}}]]]\n          [(merge opts {:s s}) (sci/eval-string s opts)])))\n\n(def key-code->key\n  {8   :backspace\n   9   :tab\n   13  :return\n   57  :left-paren\n   219 :left-brace})\n\n(def empty-box {:str-content \"\"\n                :children-ids []})\n\n(def box-state*\n  (rg/atom {:next-id 3\n            :boxes {0 (merge empty-box {:children-ids [1]\n                                        :str-content \":sci (def a 1)\"})\n                    1 (merge empty-box {:children-ids [2]\n                                        :str-content \":sci (+ 10 10)\"})\n                    2 empty-box}}))\n\n(defcard box-state* box-state*)\n\n(defn sci-node? [{:keys [str-content]}]\n  (str/starts-with? str-content \":sci\"))\n\n(defn update-box-content [boxes id value]\n  (update boxes id assoc :str-content value))\n\n(defn handle-box-change! [e id]\n  (let [target (.-target e)\n        value (.-value target)]\n    (swap! box-state* update :boxes update-box-content id value)))\n\n(defn get-parent-id [{:keys [boxes]} child-id]\n  (some (fn [[id box]]\n          (when (some #{child-id} (:children-ids box))\n            id))\n        boxes))\n\n(defn get-child-idx [{:keys [boxes]} parent-id child-id]\n  (index-of (get-in boxes [parent-id :children-ids])\n            child-id))\n\n(defn add-child-after-idx [{:keys [children-ids] :as box} idx id]\n  (let [new-idx (inc idx)]\n    (assoc box :children-ids (apply conj\n                               (subvec children-ids 0 new-idx)\n                               id\n                               (subvec children-ids new-idx)))))\n\n(defn add-sibling-box [{:keys [next-id] :as state} id]\n  (let [parent-id (get-parent-id state id)\n        child-idx (get-child-idx state parent-id id)]\n    (-> state\n        (update :next-id inc)\n        (update :boxes update parent-id add-child-after-idx child-idx next-id)\n        (update :boxes assoc next-id empty-box))))\n\n(defn remove-child [box child-id]\n  (let [child-idx (index-of (:children-ids box) child-id)]\n    (update box :children-ids remove-from-vec child-idx)))\n\n(defn delete-box [state id]\n  (let [parent-id (get-parent-id state id)]\n    (-> state\n        (update-in [:boxes parent-id] remove-child id)\n        (update :boxes dissoc id))))\n\n(defn handle-return-key! [id]\n  (swap! box-state* add-sibling-box id))\n\n(defn handle-backspace-key! [id]\n  (let [{:keys [str-content]} (get-in @box-state* [:boxes id])]\n    (when (= str-content \"\")\n      (swap! box-state* delete-box id))))\n\n(defn handle-box-key-down! [e id]\n  (let [key-code (.-keyCode e)\n        k (get key-code->key key-code)]\n    (case k\n      :return (do (.preventDefault e)\n                  (handle-return-key! id))\n      :backspace (handle-backspace-key! id)\n      nil)))\n\n(defn box-component [id]\n  (let [{:keys [boxes]} @box-state*\n        {:keys [str-content children-ids] :as box} (get boxes id)]\n    [:div\n     [:div {:style {:display \"flex\"}}\n      id\n      [:textarea {:style {:font-size \"1rem\"}\n                  :value str-content\n                  :on-change #(handle-box-change! % id)\n                  :on-key-down #(handle-box-key-down! % id)}]\n      (when (sci-node? box)\n        (let [code (subs str-content 4)]\n          [:span (try\n                   (sci/eval-string code)\n                   (catch js/Error e\n                     (str e)))]))]\n     (when (seq children-ids)\n       (into [:div {:style {:margin-left \"1rem\"}}]\n             (for [id children-ids]\n               [box-component id])))]))\n\n(defcard-rg box-tree-experiment\n  [box-component 0])\n"]}