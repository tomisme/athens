{"version":3,"sources":["athens/page.cljs"],"mappings":"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","names":["athens.page/render-blocks","block-uid","block","G__50155","re-frame.core/subscribe","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","iter__4582__auto__","s__50157","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__50159","cljs.core/chunk-buffer","i__50158","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__50156","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","ch","cljs.core/deref","map__50163","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","map__50169","uid","string","open","children","dbid","children?","cljs.core/not-empty","and__4174__auto__","G__50166","G__50171","re-frame.core/dispatch","cljs.core/not","G__50167","G__50172","G__50168","G__50173","athens.parser/parse","athens.page/linked-pattern","cljs.core/re-pattern","athens.page/unlinked-pattern","athens.page/block-page","id","node","G__50174","parents","G__50175","cljs.core.interpose.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","b","map__50176","title","G__50178","or__4185__auto__","athens.page/node-page","linked-refs","G__50179","unlinked-refs","G__50180","s__50182","b__50184","i__50183","iter__50181","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/into","s__50186","b__50188","i__50187","iter__50185","athens.page/main","current-route","G__50189","G__50190","cljs.core/chunk-first"],"sourcesContent":["(ns athens.page\n  (:require [athens.parser :refer [parse]]\n            [re-frame.core :refer [subscribe dispatch]]\n            #_[reitit.frontend.easy :as rfee]\n            #_[reagent.core :as reagent]))\n\n(defn render-blocks []\n  (fn [block-uid]\n    (let [block (subscribe [:block/children-sorted [:block/uid block-uid]])]\n      [:div\n       (doall\n        (for [ch (:block/children @block)]\n          (let [{:block/keys [uid string open children] dbid :db/id} ch\n                children? (not-empty children)]\n            ^{:key uid}\n            [:div\n             [:div.block {:style {:display \"flex\"}}\n              [:div.controls {:style {:display \"flex\" :align-items \"flex-start\" :padding-top 5}}\n               (cond\n                 (and children? open) [:span.arrow-down {:style {:width        0 :height 0\n                                                                 :border-left  \"5px solid transparent\"\n                                                                 :border-right \"5px solid transparent\"\n                                                                 :border-top   \"5px solid black\"\n                                                                 :cursor \"pointer\"\n                                                                 :margin-top 4}\n                                                         :on-click #(dispatch [:block/toggle-open dbid open])}]\n                 (and children? (not open)) [:span.arrow-right {:style {:width        0 :height 0\n                                                                        :border-top  \"5px solid transparent\"\n                                                                        :border-bottom \"5px solid transparent\"\n                                                                        :border-left   \"5px solid black\"\n                                                                        :cursor \"pointer\"\n                                                                        :margin-right 4}\n                                                                :on-click #(dispatch [:block/toggle-open dbid open])}]\n                 :else [:span {:style {:width 10}}])\n               [:span {:style {:height         12 :width 12 :border-radius \"50%\" :margin-right 5\n                               :cursor         \"pointer\" :display \"flex\" :background-color (if (not open) \"lightgray\" nil)\n                               :vertical-align \"middle\" :align-items \"center\" :justify-content \"center\"}}\n                [:span.controls {:style    {:height         5 :width 5 :border-radius \"50%\"\n                                            :cursor         \"pointer\" :display \"inline-block\" :background-color \"black\"\n                                            :vertical-align \"middle\"}\n                                 :on-click #(dispatch [:navigate :page {:id uid}])}]]]\n              [:span (parse string)]]\n             (when open\n               [:div {:style {:margin-left 20}}\n                [render-blocks uid]])])))])))\n\n; match [[title]] or #title or #[[title]]\n(defn linked-pattern [string]\n  (re-pattern (str \"(\"\n                   \"\\\\[{2}\" string \"\\\\]{2}\"\n                   \"|\" \"#\" string\n                   \"|\" \"#\" \"\\\\[{2}\" string \"\\\\[{2}\"\n                   \")\")))\n\n; also excludes [title] :(\n(defn unlinked-pattern [string]\n  (re-pattern (str \"[^\\\\[|#]\" string)))\n\n(defn block-page []\n  (fn [id]\n    (let [node (subscribe [:node [:block/uid id]])\n          parents (subscribe [:block/_children2 [:block/uid id]])]\n      [:div\n       [:span {:style {:color \"gray\"}}\n        (interpose \" > \"\n                   (map (fn [b]\n                          (let [{:block/keys [uid string] :node/keys [title]} b]\n                            ^{:key uid}\n                            [:span\n                             {:style {:cursor \"pointer\"}\n                              :on-click #(dispatch [:navigate :page {:id uid}])}\n                             (or string title)]))\n                        @parents))]\n       [:h2 {:style {:margin 0}} (str \"\u2022 \" (:block/string @node))]\n       [:div {:style {:margin-left 20}}\n        [render-blocks (:block/uid @node)]]])))\n\n(defn node-page []\n  (fn [node]\n    (let [linked-refs   (subscribe [:node/refs (linked-pattern   (:node/title node))])\n          unlinked-refs (subscribe [:node/refs (unlinked-pattern (:node/title node))])]\n      [:div\n       [:h2 (:node/title node)]\n       [render-blocks (:block/uid node)]\n       [:div\n        [:h3 \"Linked References\"]\n        [:div\n         (for [id (reduce into [] @linked-refs)]\n           ^{:key id}\n           [:div {:style {:background-color \"lightblue\" :margin \"15px 0px\" :padding 5}}\n            [block-page id]])]]\n       [:div\n        [:h3 \"Unlinked References\"]\n        [:div\n         (for [id (reduce into [] @unlinked-refs)]\n           ^{:key id}\n           [:div {:style {:background-color \"lightblue\" :margin \"15px 0px\" :padding 5}}\n            [block-page id]])]]])))\n\n(defn main []\n  (let [current-route (subscribe [:current-route])]\n    (fn []\n      (let [node (subscribe [:node [:block/uid (-> @current-route :path-params :id)]])]\n        [:div\n          ;;[:h1 \"Page Panel\"]\n         (if (:node/title @node)\n           [node-page @node]\n           [block-page (:block/uid @node)])]))))\n"]}