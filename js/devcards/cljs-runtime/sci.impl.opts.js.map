{"version":3,"sources":["sci/impl/opts.cljc"],"mappings":"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","names":["sci.impl.opts/init-env!","env","bindings","aliases","namespaces","imports","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic","cljs.core/merge","sci.impl.namespaces/namespaces","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","sci.impl.vars/user-ns","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","sci.impl.namespaces/aliases","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs.core.update.cljs$core$IFn$_invoke$arity$5","cljs.core/assoc","sci.impl.vars/->SciVar","cljs.core/make-hierarchy","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","sci.impl.opts/presets","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","sci.impl.opts/process-permissions","seq59397","self__4777__auto__","cljs.core/seq","permissions","cljs.core/not-empty","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core/cat","cljs.core.map.cljs$core$IFn$_invoke$arity$1","sci.impl.utils/strip-core-ns","p1__59401#","p1__59402#","sci.impl.opts/default-classes","js/Error","msg","filename","line","cljs.core/Delay","goog.string/StringBuffer","sci.impl.opts/default-imports","sci.impl.opts/normalize-classes","classes","class->opts","cljs.core/transient","cljs.core/select-keys","kvs","temp__5733__auto__","vec__59403","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","sym","class-opts","cljs.core/first","cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/map?","cljs.core/rest","cljs.core/persistent!","p__59406","map__59407","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","features","cljs.core.get.cljs$core$IFn$_invoke$arity$2","readers","allow","preset","realize-max","load-fn","dry-run","deny","sci.impl.opts/init","or__4185__auto__","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","_","ctx","sci.impl.opts.process_permissions.cljs$core$IFn$_invoke$arity$variadic"],"sourcesContent":["(ns sci.impl.opts\n  {:no-doc true}\n  (:require\n   #?(:cljs [goog.string])\n   [sci.impl.namespaces :as namespaces]\n   [sci.impl.utils :as utils :refer [strip-core-ns]]\n   [sci.impl.vars :as vars]))\n\n(defn init-env! [env bindings aliases namespaces imports]\n  (swap! env (fn [env]\n               (let [namespaces (merge-with merge\n                                            namespaces/namespaces\n                                            {'user (assoc bindings\n                                                          :obj vars/user-ns)}\n                                            namespaces\n                                            (:namespaces env))\n                     aliases (merge namespaces/aliases aliases\n                                    (get-in env [:namespaces 'user :aliases]))\n                     namespaces (-> namespaces\n                                    (update 'user assoc :aliases aliases)\n                                    (update 'clojure.core assoc 'global-hierarchy\n                                            (vars/->SciVar (make-hierarchy) 'global-hierarchy nil)))]\n                 (assoc env\n                        :namespaces namespaces\n                        :imports imports)))))\n\n(def presets\n  {:termination-safe\n   {:deny '[loop recur trampoline resolve]\n    :realize-max 100}})\n\n(defn process-permissions [& permissions]\n  (not-empty (into #{} (comp cat (map strip-core-ns)) permissions)))\n\n(def default-classes\n  #?(:clj {'java.lang.AssertionError AssertionError\n           'java.lang.Exception {:class Exception}\n           'java.lang.IllegalArgumentException java.lang.IllegalArgumentException\n           'clojure.lang.Delay clojure.lang.Delay\n           'clojure.lang.ExceptionInfo clojure.lang.ExceptionInfo\n           'clojure.lang.LineNumberingPushbackReader clojure.lang.LineNumberingPushbackReader\n           'java.lang.String {:class String}\n           'java.io.StringWriter java.io.StringWriter\n           'java.io.StringReader java.io.StringReader\n           'java.lang.Integer Integer\n           'java.lang.Double Double\n           'java.lang.ArithmeticException ArithmeticException\n           'java.lang.Object Object}\n     :cljs {'Error {:class js/Error :constructor (fn\n                                                   ([msg] (js/Error. msg))\n                                                   ([msg filename] (js/Error. msg filename))\n                                                   ([msg filename line] (js/Error. msg filename line)))}\n            'cljs.core.Delay {:class cljs.core/Delay\n                              :constructor #(cljs.core/Delay. % nil)}\n            'goog.string.StringBuffer {:class goog.string/StringBuffer\n                                       :constructor #(goog.string/StringBuffer. %)}}))\n\n(def default-imports\n  #?(:clj '{AssertionError java.lang.AssertionError\n            Exception java.lang.Exception\n            String java.lang.String\n            ArithmeticException java.lang.ArithmeticException\n            Integer java.lang.Integer\n            Double java.lang.Double\n            Object java.lang.Object}\n     :cljs {}))\n\n(defn normalize-classes [classes]\n  (loop [class->opts (transient (select-keys classes [:allow]))\n         kvs classes]\n    (if-let [[sym class-opts] (first kvs)]\n      (recur ;; storing the physical class as key didn't work well with\n       ;; GraalVM\n       (assoc! class->opts sym (if (map? class-opts)\n                                 class-opts\n                                 {:class class-opts}))\n       (rest kvs))\n      {:public-class (:public-class classes)\n       :class->opts (persistent! class->opts)})))\n\n(defn init\n  \"Initializes options\"\n  [{:keys [:bindings :env\n           :allow :deny\n           :realize-max\n           :preset ;; used by malli\n           :aliases\n           :namespaces\n           :classes\n           :imports\n           :features\n           :load-fn\n           :dry-run\n           :readers]}]\n  (let [preset (get presets preset)\n        env (or env (atom {}))\n        imports (merge default-imports imports)\n        bindings bindings\n        _ (init-env! env bindings aliases namespaces imports)\n        ctx (merge {:env env\n                    :bindings {}\n                    :allow (process-permissions (:allow preset) allow)\n                    :deny (process-permissions (:deny preset) deny)\n                    :realize-max (or realize-max (:realize-max preset))\n                    :features features\n                    :load-fn load-fn\n                    :dry-run dry-run\n                    :readers readers\n                    ::ctx true}\n                   (normalize-classes (merge default-classes classes)))]\n    ctx))\n"]}