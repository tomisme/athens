{"version":3,"sources":["shadow/remote/runtime/cljs/browser.cljs"],"mappings":"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","names":["shadow.remote.runtime.cljs.browser/transit-read","data","t","cognitect.transit.reader.cljs$core$IFn$_invoke$arity$1","cognitect.transit/read","shadow.remote.runtime.cljs.browser/transit-str","obj","w","cognitect.transit.writer.cljs$core$IFn$_invoke$arity$1","cognitect.transit/write","p__61008","map__61009","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","shadow.remote.runtime.cljs.browser/abort!","callback","state","action","ex","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","G__61011","p__61012","p__61013","map__61014","map__61015","shadow.remote.runtime.cljs.browser/interpret-action","runtime","type","G__61018","cljs.core/Keyword","js/Error","map__61019","js","e61021","res","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/conj","G__61022","shadow.remote.runtime.cljs.browser/interpret-actions","p__61023","map__61024","actions","cljs.core/empty?","fexpr__61026","map__61027","cljs.core/first","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core/rest","this__4439__auto__","k__4440__auto__","this__4441__auto__","k61030","else__4442__auto__","G__61042","ws","state-ref","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__4458__auto__","f__4459__auto__","init__4460__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","ret__4461__auto__","p__61043","vec__61044","k__4462__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","v__4463__auto__","this__4453__auto__","writer__4454__auto__","opts__4455__auto__","pr-pair__4456__auto__","keyval__4457__auto__","cljs.core/pr-sequential-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__61029","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4437__auto__","__meta","this__4434__auto__","__hash","this__4443__auto__","cljs.core/count","this__4435__auto__","h__4297__auto__","fexpr__61047","coll__4436__auto__","cljs.core/hash-unordered-coll","this61031","other61032","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","this__4448__auto__","k__4449__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__4446__auto__","k__4447__auto__","pred__61048","cljs.core/keyword-identical?","expr__61049","G__61051","G__61052","G__61053","G__61054","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__4451__auto__","cljs.core/seq","cljs.core/MapEntry","this__4438__auto__","this__4444__auto__","entry__4445__auto__","cljs.core/vector?","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","shadow.remote.runtime.cljs.browser/BrowserRuntime","this__4482__auto__","cljs.core/List","writer__4483__auto__","cljs.core/-write","G__61033","extmap__4478__auto__","G__61055","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/record?","shadow.remote.runtime.cljs.browser/->BrowserRuntime","shadow.remote.runtime.cljs.browser/map->BrowserRuntime","msg","key","spec","shadow.remote.runtime.shared/add-extension","shadow.remote.runtime.shared/del-extension","this","code","G__61034","G__61035","G__61036","G__61037","G__61038","goog.net.XhrIo/send","shadow.cljs.devtools.client.env/get-url-base","shadow.cljs.devtools.client.env/build-id","shadow.cljs.devtools.client.env/proc-id","req","map__61039","result","G__61041","shadow.remote.runtime.cljs.browser/start","temp__5737__auto__","cljs.core/deref","map__61057","stop","shadow.remote.runtime.cljs.env/runtime-ref","cljs.core/reset!","js/setTimeout","ws-url","shadow.cljs.devtools.client.env/get-ws-url-base","socket","js/WebSocket","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","G__61056","shadow.remote.runtime.shared/add-defaults","obj-support","shadow.remote.runtime.obj-support/start","tap-support","shadow.remote.runtime.tap-support/start","eval-support","shadow.remote.runtime.eval-support/start","shadow.remote.runtime.tap-support/stop","shadow.remote.runtime.obj-support/stop","shadow.remote.runtime.eval-support/stop","e","shadow.remote.runtime.shared/process","js/console.warn"],"sourcesContent":["(ns shadow.remote.runtime.cljs.browser\n  (:require\n    [cognitect.transit :as transit]\n    ;; this will eventually replace shadow.cljs.devtools.client completely\n    [shadow.cljs.devtools.client.env :as env]\n    [goog.net.XhrIo :as xhr]\n    [shadow.remote.runtime.api :as api]\n    [shadow.remote.runtime.shared :as shared]\n    [shadow.remote.runtime.cljs.env :as renv]\n    [shadow.remote.runtime.cljs.js-builtins]\n    [shadow.remote.runtime.tap-support :as tap-support]\n    [shadow.remote.runtime.obj-support :as obj-support]\n    [shadow.remote.runtime.eval-support :as eval-support]\n    ))\n\n(defn transit-read [data]\n  (let [t (transit/reader :json)]\n    (transit/read t data)))\n\n(defn transit-str  [obj]\n  (let [w (transit/writer :json)]\n    (transit/write w obj)))\n\n(declare interpret-actions)\n\n(defn abort! [{:keys [callback] :as state} action ex]\n  (-> state\n      (assoc :failed true\n             :completed false\n             :ex ex\n             :ex-action action)\n      (callback)))\n\n(defn interpret-action [{:keys [runtime] :as state} {:keys [type] :as action}]\n  (case type\n    :repl/invoke\n    (let [{:keys [js]} action]\n      (try\n        (let [res (.eval-js runtime js)]\n          (-> state\n              (update :eval-results conj {:value res :action action})\n              (interpret-actions)))\n        (catch :default ex\n          (abort! state action ex))))))\n\n(defn interpret-actions [{:keys [actions] :as state}]\n  (if (empty? actions)\n    ((:callback state) state)\n    (let [{:keys [type] :as action} (first actions)\n          state (update state :actions rest)]\n      (interpret-action state action))))\n\n(defrecord BrowserRuntime [ws state-ref]\n  api/IRuntime\n  (relay-msg [runtime msg]\n    (.send ws (transit-str msg)))\n  (add-extension [runtime key spec]\n    (shared/add-extension runtime key spec))\n  (del-extension [runtime key]\n    (shared/del-extension runtime key))\n\n  Object\n  (eval-js [this code]\n    (js* \"(0,eval)(~{})\" code))\n\n  (eval-cljs [this msg callback]\n    ;; FIXME: define that msg is supposed to look like\n    ;; {:code \"(some-cljs)\" :ns foo.bar}\n    ;; FIXME: transit?\n    (xhr/send\n      (str (env/get-url-base) \"/worker/compile/\" env/build-id \"/\" env/proc-id \"/browser\")\n      (fn [res]\n        (this-as ^goog req\n          (let [{:keys [type] :as result}\n                (transit-read (.getResponseText req))]\n\n            (if-not (= :repl/actions type)\n              (callback {:failed true :result result})\n              (interpret-actions {:runtime this\n                                  :callback callback\n                                  :input msg\n                                  :actions (:actions result)\n                                  :eval-results []\n                                  :errors []})))))\n      \"POST\"\n      (transit-str msg)\n      #js {\"content-type\" \"application/transit+json; charset=utf-8\"})))\n\n(defn start []\n  (if-some [{:keys [stop]} @renv/runtime-ref]\n    ;; if already connected. cleanup and call restart async\n    ;; need to give the websocket a chance to close\n    ;; only need this to support hot-reload this code\n    ;; can't use :dev/before-load-async hooks since they always run\n    (do (stop)\n        (reset! renv/runtime-ref nil)\n        (js/setTimeout start 10))\n\n    (let [ws-url (str (env/get-ws-url-base) \"/api/runtime\")\n          socket (js/WebSocket. ws-url)\n\n          state-ref\n          (atom {})\n\n          runtime\n          (doto (BrowserRuntime. socket state-ref)\n            (shared/add-defaults))\n\n          obj-support\n          (obj-support/start runtime)\n\n          tap-support\n          (tap-support/start runtime obj-support)\n\n          eval-support\n          (eval-support/start runtime obj-support)\n\n          stop\n          (fn []\n            (tap-support/stop tap-support)\n            (obj-support/stop obj-support)\n            (eval-support/stop eval-support)\n            (.close socket))]\n\n      (reset! renv/runtime-ref {:runtime runtime\n                                :obj-support obj-support\n                                :tap-support tap-support\n                                :eval-support eval-support\n                                :stop stop})\n\n      (.addEventListener socket \"message\"\n        (fn [e]\n          (shared/process runtime (transit-read (.-data e)))\n          ))\n\n      (.addEventListener socket \"open\"\n        (fn [e]\n          ;; allow shared/process to send messages directly to relay\n          ;; without being coupled to the implementation of exactly how\n          ))\n\n      (.addEventListener socket \"close\"\n        (fn [e]\n          (stop)))\n\n      (.addEventListener socket \"error\"\n        (fn [e]\n          (js/console.warn \"tap-socket error\" e)\n          (stop)\n          )))))\n\n;; want things to start when this ns is in :preloads\n(start)\n"]}