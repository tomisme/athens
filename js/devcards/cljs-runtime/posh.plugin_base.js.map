{"version":3,"sources":["posh/plugin_base.cljc"],"mappings":"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","names":["posh.plugin-base/missing-pull-result","dcfg","pull-expr","cljs.core/some","posh.plugin-base/safe-pull","db","query","id","cljs.core/integer?","fexpr__31172","cljs.core/vector?","temp__5733__auto__","eid","fexpr__31173","fexpr__31174","posh.plugin-base/set-conn-listener!","posh-atom","conn","db-id","posh-vars","G__31176","G__31177","G__31178","fexpr__31175","var","cljs.core/Keyword","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core/add-watch","_","old-state","new-state","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc-in","G__31180","G__31181","G__31182","fexpr__31179","tx-report","map__31183","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","ratoms","changed","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","posh.core/after-transact","seq__31185","cljs.core/seq","chunk__31186","count__31187","i__31188","vec__31195","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","temp__5735__auto__","cljs.core/chunked-seq?","c__4609__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__31208","cljs.core/first","cljs.core/next","k","v","cljs.core/reset!","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","posh.plugin-base/posh!","seq31211","G__31212","self__4776__auto__","conns","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","n","posh-tree","posh.core/empty-tree","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/empty?","cljs.core/rest","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","posh.core.add_db.cljs$core$IFn$_invoke$arity$4","cljs.core/deref","posh.plugin-base/get-conn-var","fexpr__31214","cljs.core/meta","posh.plugin-base/get-posh-atom","poshdb-or-conn","fexpr__31219","posh.stateful/get-posh-atom","posh.plugin-base/get-db","fexpr__31221","cljs.core/with-meta","posh.plugin-base/rm-posh-item","storage-key","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","posh-atom-val","posh.core/remove-item","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","G__31232","posh.plugin-base/make-query-reaction","js/Error","add-query-fn","options","r","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","posh-atom-with-query","query-result","query-ratom","or__4185__auto__","fexpr__31241","query-reaction","G__31245","G__31246","G__31247","fexpr__31244","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","posh.plugin_base.make_query_reaction.cljs$core$IFn$_invoke$arity$5","G__31261","posh.plugin-base/pull","poshdb","pull-pattern","true-poshdb","p1__31255#","posh.core/add-pull","posh.plugin_base.pull.cljs$core$IFn$_invoke$arity$5","posh.plugin-base/pull-info","posh.lib.update/update-pull","G__31276","posh.plugin-base/pull-many","eids","p1__31274#","posh.core/add-pull-many","posh.plugin_base.pull_many.cljs$core$IFn$_invoke$arity$5","posh.plugin-base/pull-tx","tx-patterns","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","posh.plugin_base.pull.cljs$core$IFn$_invoke$arity$4","posh.plugin-base/parse-q-query","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__31288","vec__31289","parsed-query","last-key","query-item","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/conj","posh.plugin-base/q-args-count","in-clause","posh.plugin-base/q","seq31304","G__31305","G__31306","args","vec__31312","n-query-args","cljs.core/butlast","cljs.core/last","true-poshdb-args","p1__31299#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","fexpr__31315","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","p1__31300#","p1__31301#","cljs.core.partial.cljs$core$IFn$_invoke$arity$3","posh.core/add-q","posh.plugin-base/q-info","seq31318","G__31319","G__31320","p1__31316#","fexpr__31321","p1__31317#","posh.lib.update/update-q","posh.plugin-base/q-tx","seq31328","G__31329","G__31330","G__31331","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","posh.plugin-base/filter-tx","posh.stateful/add-filter-tx","posh.plugin-base/filter-pull","posh.stateful/add-filter-pull","posh.plugin-base/filter-q","seq31333","G__31334","G__31335","p1__31332#","fexpr__31336","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","posh.stateful/add-filter-q","posh.plugin-base/transact!","txs","G__31338","G__31339","fexpr__31337","fexpr__31340","posh.stateful/poshdb->conn"],"sourcesContent":["(ns posh.plugin-base\n  (:require [posh.core :as p]\n            [posh.stateful :as ps]\n            [posh.lib.db :as db]\n            [posh.lib.update :as u]))\n\n(defn missing-pull-result\n  [dcfg pull-expr]\n  (when (some #{:db/id} pull-expr)\n    {:db/id nil}))\n\n(defn safe-pull\n  [dcfg db query id]\n  (cond\n    (integer? id)\n    ((:pull* dcfg) db query id)\n    (vector? id)\n    (if-let [eid ((:entid dcfg) db id)]\n      ((:pull* dcfg) db query eid)\n      (missing-pull-result dcfg query))\n    (nil? id)\n    (missing-pull-result dcfg query)))\n\n;; need to set last-tx-t in conn so that it doesn't try the same tx twice\n(defn set-conn-listener! [dcfg posh-atom conn db-id]\n  (let [posh-vars {:posh-atom posh-atom\n                   :db-id db-id}]\n    (do\n      ((:listen! dcfg) conn :posh-dispenser\n        (fn [var]\n          (when (keyword? var)\n            (get posh-vars var))))\n      (add-watch conn :posh-schema-listener\n        (fn [_ _ old-state new-state]\n          (when (not= (:schema old-state) (:schema new-state))\n            (swap! posh-atom assoc-in [:schema db-id] (:schema new-state)))))\n            ;; Update posh conn\n      ((:listen! dcfg) conn :posh-listener\n        (fn [tx-report]\n          ;;(println \"CHANGED: \" (keys (:changed (p/after-transact @posh-atom {conn tx-report}))))\n          (let [{:keys [ratoms changed]}\n                (swap! posh-atom p/after-transact {conn tx-report})]\n            (doseq [[k v] changed]\n              (reset! (get ratoms k) (:results v))))))\n      conn)))\n\n(defn posh! [dcfg & conns]\n  (let [posh-atom (atom {})]\n    (reset! posh-atom\n            (loop [n 0\n                   conns conns\n                   posh-tree (-> (p/empty-tree dcfg [:results])\n                                 (assoc :ratoms {}\n                                        :reactions {}))]\n              (if (empty? conns)\n                posh-tree\n                (recur (inc n)\n                       (rest conns)\n                       (let [db-id (keyword (str \"conn\" n))]\n                         (p/add-db posh-tree\n                                   db-id\n                                   (set-conn-listener! dcfg posh-atom (first conns) db-id)\n                                   (:schema @(first conns))))))))))\n\n\n;; Posh's state atoms are stored inside a listener in the meta data of\n;; the datascript conn\n(defn get-conn-var [dcfg conn var]\n  ((:posh-dispenser @(:listeners (meta conn))) var))\n\n(defn get-posh-atom [dcfg poshdb-or-conn]\n  (if ((:conn? dcfg) poshdb-or-conn)\n    (get-conn-var dcfg poshdb-or-conn :posh-atom)\n    (ps/get-posh-atom poshdb-or-conn)))\n\n(defn get-db [dcfg poshdb-or-conn]\n  (if ((:conn? dcfg) poshdb-or-conn)\n    (with-meta\n      [:db (get-conn-var dcfg poshdb-or-conn :db-id)]\n      {:posh (get-conn-var dcfg poshdb-or-conn :posh-atom)})\n    poshdb-or-conn))\n\n(defn rm-posh-item [dcfg posh-atom storage-key]\n  (swap! posh-atom\n         (fn [posh-atom-val]\n           (assoc (p/remove-item posh-atom-val storage-key)\n             :ratoms (dissoc (:ratoms posh-atom-val) storage-key)\n             :reactions (dissoc (:reactions posh-atom-val) storage-key)))))\n\n(defn make-query-reaction\n  ([dcfg posh-atom storage-key add-query-fn options]\n   (if-let [r (get-in @posh-atom [:reactions storage-key])]\n     r\n     (->\n      (swap!\n       posh-atom\n       (fn [posh-atom-val]\n         (let [posh-atom-with-query (add-query-fn posh-atom-val)\n               query-result         (:results (get (:cache posh-atom-with-query) storage-key))\n               query-ratom          (or (get (:ratoms posh-atom-with-query) storage-key)\n                                        ((:ratom dcfg) query-result))\n               query-reaction       ((:make-reaction dcfg)\n                                     (fn []\n                                       ;;(println \"RENDERING: \" storage-key)\n                                       @query-ratom)\n                                     :on-dispose\n                                     (fn [_ _]\n                                       ;;(println \"no DISPOSING: \" storage-key)\n                                       (when-not (= (:cache options) :forever)\n                                         (swap! posh-atom\n                                                (fn [posh-atom-val]\n                                                  (assoc (p/remove-item posh-atom-val storage-key)\n                                                         :ratoms (dissoc (:ratoms posh-atom-val) storage-key)\n                                                         :reactions (dissoc (:reactions posh-atom-val) storage-key)))))))]\n           (assoc posh-atom-with-query\n                  :ratoms (assoc (:ratoms posh-atom-with-query) storage-key query-ratom)\n                  :reactions (assoc (:reactions posh-atom-with-query) storage-key query-reaction)))))\n      :reactions\n      (get storage-key))))\n  ([dcfg posh-atom storage-key add-query-fn]\n   (make-query-reaction dcfg posh-atom storage-key add-query-fn {})))\n\n(defn pull\n  \"Returns a reaction of a pull expression. The options argument may specify `:cache :forever`, which keeps query results\n  cached indefinitely, even if the reaction is disposed.\"\n  ([dcfg poshdb pull-pattern eid options]\n   (let [true-poshdb (get-db dcfg poshdb)\n         storage-key [:pull true-poshdb pull-pattern eid]\n         posh-atom   (get-posh-atom dcfg poshdb)]\n     (make-query-reaction dcfg\n                          posh-atom\n                          storage-key\n                          #(p/add-pull % true-poshdb pull-pattern eid)\n                          options)))\n  ([dcfg poshdb pull-pattern eid]\n   (pull dcfg poshdb pull-pattern eid {})))\n\n(defn pull-info [dcfg poshdb pull-pattern eid]\n  (let [true-poshdb (get-db dcfg poshdb)\n        storage-key [:pull true-poshdb pull-pattern eid]\n        posh-atom   (get-posh-atom dcfg poshdb)]\n    (dissoc\n     (u/update-pull @posh-atom storage-key)\n     :reload-fn)))\n\n(defn pull-many\n  ([dcfg poshdb pull-pattern eids options]\n   (let [true-poshdb (get-db dcfg poshdb)\n         storage-key [:pull-many true-poshdb pull-pattern eids]\n         posh-atom   (get-posh-atom dcfg poshdb)]\n     (make-query-reaction dcfg\n                          posh-atom\n                          storage-key\n                          #(p/add-pull-many % true-poshdb pull-pattern eids)\n                          options)))\n  ([dcfg poshdb pull-pattern eids]\n   (pull-many dcfg poshdb pull-pattern eids {})))\n\n(defn pull-tx [dcfg tx-patterns poshdb pull-pattern eid]\n  (println \"pull-tx is deprecated. Calling pull without your tx-patterns.\")\n  (pull dcfg poshdb pull-pattern eid))\n\n;;; q needs to find the posh-atom, go through args and convert any\n;;; conn's to true-poshdb's, generate the storage-key with true dbs\n\n(defn parse-q-query\n  [dcfg query]\n  (first\n    (reduce\n      (fn [[parsed-query last-key] query-item]\n        (if (keyword? query-item)\n          [(assoc parsed-query query-item [])\n           query-item]\n          (do\n            (assert last-key)\n            [(update parsed-query last-key conj query-item)\n             last-key])))\n      [{} nil]\n      query)))\n\n(defn q-args-count\n  ;; Really should be conforming to a spec for this... :-/\n  [dcfg query]\n  (let [parsed-query (parse-q-query dcfg query)]\n    (if-let [in-clause (:in parsed-query)]\n      (count in-clause)\n      1)))\n\n(defn q\n  \"Returns a datalog query reaction. If args count doens't match the query's input count, a final options map argument\n  is accepted. This options map may specify `:cache :forever`, which keeps query results cached even if the reaction is\n  disposed.\"\n  [dcfg query & args]\n  (let [n-query-args     (q-args-count dcfg query)\n        [args options]   (cond\n                           (= n-query-args (count args))\n                           [args {}]\n                           (= (inc n-query-args) (count args))\n                           [(butlast args) (last args)]\n                           :else\n                           (throw \"Incorrect number of args passed to posh query\"))\n        true-poshdb-args (map #(if ((:conn? dcfg) %) (get-db dcfg %) %) args)\n        posh-atom        (first (remove nil? (map #(get-posh-atom dcfg %) args)))\n        storage-key      [:q query true-poshdb-args]]\n    (make-query-reaction dcfg\n                         posh-atom\n                         storage-key\n                         #(apply (partial p/add-q % query) true-poshdb-args)\n                         options)))\n\n(defn q-info [dcfg query & args]\n  (let [true-poshdb-args (map #(if ((:conn? dcfg) %) (get-db dcfg %) %) args)\n        posh-atom        (first (remove nil? (map #(get-posh-atom dcfg %) args)))\n        storage-key      [:q query true-poshdb-args]]\n    (dissoc\n     (u/update-q @posh-atom storage-key)\n     :reload-fn)))\n\n(defn q-tx [dcfg tx-patterns query & args]\n  (println \"q-tx is deprecated. Calling q without your tx-patterns.\")\n  (apply q dcfg query args))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn filter-tx [dcfg poshdb tx-patterns]\n  (ps/add-filter-tx (get-db dcfg poshdb) tx-patterns))\n\n(defn filter-pull [dcfg poshdb pull-pattern eid]\n  (ps/add-filter-pull (get-db dcfg poshdb) pull-pattern eid))\n\n(defn filter-q [dcfg query & args]\n  (let [true-poshdb-args (map #(if ((:conn? dcfg) %) (get-db dcfg %) %) args)]\n    (apply ps/add-filter-q query true-poshdb-args)))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn transact! [dcfg poshdb-or-conn txs]\n  ((:transact! dcfg)\n   (if ((:conn? dcfg) poshdb-or-conn)\n     poshdb-or-conn\n     (ps/poshdb->conn poshdb-or-conn))\n   txs))\n\n#?(:clj\n(defmacro add-plugin [dcfg]\n  `(do (def ~'missing-pull-result (partial posh.plugin-base/missing-pull-result ~dcfg))\n       (def ~'safe-pull           (partial posh.plugin-base/safe-pull           ~dcfg))\n       (def ~'set-conn-listener!  (partial posh.plugin-base/set-conn-listener!  ~dcfg))\n       (def ~'posh!               (partial posh.plugin-base/posh!               ~dcfg))\n       (def ~'get-conn-var        (partial posh.plugin-base/get-conn-var        ~dcfg))\n       (def ~'get-posh-atom       (partial posh.plugin-base/get-posh-atom       ~dcfg))\n       (def ~'get-db              (partial posh.plugin-base/get-db              ~dcfg))\n       (def ~'rm-posh-item        (partial posh.plugin-base/rm-posh-item        ~dcfg))\n       (def ~'make-query-reaction (partial posh.plugin-base/make-query-reaction ~dcfg))\n       (def ~'pull                (partial posh.plugin-base/pull                ~dcfg))\n       (def ~'pull-info           (partial posh.plugin-base/pull-info           ~dcfg))\n       (def ~'pull-tx             (partial posh.plugin-base/pull-tx             ~dcfg))\n       (def ~'pull-many           (partial posh.plugin-base/pull-many           ~dcfg))\n       (def ~'parse-q-query       (partial posh.plugin-base/parse-q-query       ~dcfg))\n       (def ~'q-args-count        (partial posh.plugin-base/q-args-count        ~dcfg))\n       (def ~'q                   (partial posh.plugin-base/q                   ~dcfg))\n       (def ~'q-info              (partial posh.plugin-base/q-info              ~dcfg))\n       (def ~'q-tx                (partial posh.plugin-base/q-tx                ~dcfg))\n\n       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n       (def ~'filter-tx           (partial posh.plugin-base/filter-tx           ~dcfg))\n       (def ~'filter-pull         (partial posh.plugin-base/filter-pull         ~dcfg))\n       (def ~'filter-q            (partial posh.plugin-base/filter-q            ~dcfg))\n\n       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n       (def ~'transact!           (partial posh.plugin-base/transact!           ~dcfg)))))\n"]}