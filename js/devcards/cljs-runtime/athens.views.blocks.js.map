{"version":3,"sources":["athens/views/blocks.cljs"],"mappings":"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","names":["athens.views.blocks/block-style","athens.style.color.cljs$core$IFn$_invoke$arity$1","athens.views.blocks/block-disclosure-toggle-style","athens.views.blocks/block-indicator-style","G__55622","garden.selectors/&","garden.selectors/after","athens.style/OPACITIES","G__55623","garden.selectors/before","G__55624","stylefy.core.keyframes.cljs$core$IFn$_invoke$arity$variadic","athens.views.blocks/drop-area-indicator","athens.views.blocks/block-content-style","athens.views.blocks/tooltip-style","athens.style/DEPTH-SHADOWS","athens.style.color.cljs$core$IFn$_invoke$arity$2","athens.views.blocks/fast-on-change","value","_uid","state","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","athens.views.blocks/on-change","uid","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","G__55625","re-frame.core/dispatch","athens.views.blocks/db-on-change","goog.functions/debounce","athens.views.blocks/toggle","id","open","G__55626","cljs.core/not","athens.views.blocks/on-key-down","e","_state","key","shift","sel-start","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","goog.events.KeyCodes/TAB","G__55627","G__55628","goog.events.KeyCodes/ENTER","G__55629","goog.events.KeyCodes/BACKSPACE","G__55630","athens.views.blocks/block-el","block","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","map__55631","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core/deref","map__55632","string","order","children","dbid","open?","and__4174__auto__","cljs.core/seq","closed?","editing-uid","G__55634","re-frame.core/subscribe","tooltip-uid","G__55635","x","y","dragging-uid","closest-uid","closest-kind","G__55636","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$2","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","athens.views.blocks/dragging-style","clojure.string.join.cljs$core$IFn$_invoke$arity$2","js/module$node_modules$$material_ui$icons$index.KeyboardArrowDown","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$1","athens.router.navigate_uid.cljs$core$IFn$_invoke$arity$1","komponentit.autosize/textarea","athens.parse-renderer/parse-and-render","iter__4582__auto__","s__55639","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__55641","cljs.core/chunk-buffer","i__55640","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__55638","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","child","athens.views.blocks/block-component","ident","athens.db/get-block-document","cljs.core/chunk-first"],"sourcesContent":["(ns athens.views.blocks\n  (:require\n    [\"@material-ui/icons\" :as mui-icons]\n    [athens.db :as db]\n    [athens.parse-renderer :refer [parse-and-render]]\n    [athens.router :refer [navigate-uid]]\n    [athens.style :refer [color DEPTH-SHADOWS OPACITIES]]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [clojure.string :refer [join]]\n    [garden.selectors :as selectors]\n    [goog.functions :refer [debounce]]\n    [komponentit.autosize :as autosize]\n    [re-frame.core  :refer [dispatch subscribe]]\n    [reagent.core :as r]\n    [stylefy.core :as stylefy :refer [use-style]])\n  (:import\n    (goog.events\n      KeyCodes)))\n\n\n;;; Styles\n\n\n(def block-style\n  {:display \"flex\"\n   :line-height \"2em\"\n   :position \"relative\"\n   :justify-content \"flex-start\"\n   :flex-direction \"column\"\n   ::stylefy/manual [[:&.show-tree-indicator:before {:content \"''\"\n                                                     :position \"absolute\"\n                                                     :width \"1px\"\n                                                     :left \"calc(1.25em + 1px)\"\n                                                     :top \"2em\"\n                                                     :bottom \"0\"\n                                                     :transform \"translateX(50%)\"\n                                                     :background (color :panel-color)}]]})\n\n\n(def block-disclosure-toggle-style\n  {:width \"1em\"\n   :height \"2em\"\n   :flex-shrink \"0\"\n   :display \"flex\"\n   :background \"none\"\n   :border \"none\"\n   :border-radius \"100px\"\n   :transition \"all 0.05s ease\"\n   :align-items \"center\"\n   :justify-content \"center\"\n   :padding \"0\"\n   :-webkit-appearance \"none\"\n   ::stylefy/mode [[:hover {:color (color :link-color)}]\n                   [\":is(button)\" {:cursor \"pointer\"}]]\n   ::stylefy/manual [[:&.closed [:svg {:transform \"rotate(-90deg)\"}]]]})\n\n\n(def block-indicator-style\n  {:flex-shrink \"0\"\n   :cursor \"pointer\"\n   :width \"0.75em\"\n   :margin-right \"0.25em\"\n   :transition \"all 0.05s ease\"\n   :height \"2em\"\n   :color (color :panel-color)\n   ::stylefy/mode [[:after {:content \"''\"\n                            :background \"currentColor\"\n                            :transition \"all 0.05s ease\"\n                            :border-radius \"100px\"\n                            :box-shadow \"0 0 0 2px transparent\"\n                            :display \"inline-flex\"\n                            :margin \"50% 0 0 50%\"\n                            :transform \"translate(-50%, -50%)\"\n                            :height \"0.3125em\"\n                            :width \"0.3125em\"}]\n                   [:hover {:color (color :link-color)}]]\n\n   ::stylefy/manual [[:&.open {}]\n                     [:&.closed {}]\n                     [:&.closed [(selectors/& (selectors/after)) {:box-shadow (str \"0 0 0 2px \" (color :body-text-color))\n                                                                  :opacity (:opacity-med OPACITIES)}]]\n                     [:&.closed [(selectors/& (selectors/before)) {:content \"none\"}]]\n                     [:&.closed [(selectors/& (selectors/before)) {:content \"none\"}]]\n                     [:&:hover:after {:transform \"translate(-50%, -50%) scale(1.3)\"}]\n                     [:&.dragging {:z-index \"1000\"\n                                   :cursor \"grabbing\"\n                                   :color (color :body-text-color)}]\n                     [:&.selected {}]]})\n\n\n(stylefy/keyframes \"drop-area-appear\"\n                   [:from\n                    {:opacity \"0\"}]\n                   [:to\n                    {:opacity \"1\"}])\n\n\n(stylefy/keyframes \"drop-area-color-pulse\"\n                   [:from\n                    {:opacity (:opacity-lower OPACITIES)}]\n                   [:to\n                    {:opacity (:opacity-med OPACITIES)}])\n\n\n(def drop-area-indicator\n  {:display \"block\"\n   :height \"1px\"\n   :margin-bottom \"-1px\"\n   :color (color :body-text-color)\n   :position \"relative\"\n   :transform-origin \"left\"\n   :z-index \"1000\"\n   :width \"100%\"\n   :animation \"drop-area-appear .5s ease\"\n   ::stylefy/manual [[:&:after {:position \"absolute\"\n                                :content \"''\"\n                                :top \"-0.5px\"\n                                :right \"0\"\n                                :bottom \"-0.5px\"\n                                :left \"0\"\n                                :border-radius \"100px\"\n                                :animation \"drop-area-color-pulse 1s ease infinite alternate\"\n                                :background \"currentColor\"}]]})\n\n\n(def block-content-style\n  {:position \"relative\"\n   :overflow \"visible\"\n   :z-index \"1\"\n   :flex-grow \"1\"\n   :word-break \"break-word\"\n   ::stylefy/manual [[:textarea {:display \"none\"}]\n                     [:&:hover [:textarea {:display \"block\"\n                                           :z-index 1}]]\n                     [:textarea {:-webkit-appearance \"none\"\n                                 :cursor \"text\"\n                                 :resize \"none\"\n                                 :transform \"translate3d(0,0,0)\"\n                                 :color \"inherit\"\n                                 :padding \"0\"\n                                 :background (color :panel-color)\n                                 :position \"absolute\"\n                                 :top \"0\"\n                                 :left \"0\"\n                                 :right \"0\"\n                                 :width \"100%\"\n                                 :min-height \"100%\"\n                                 :caret-color (color :link-color)\n                                 :margin \"0\"\n                                 :font-size \"inherit\"\n                                 :line-height \"inherit\"\n                                 :border-radius \"4px\"\n                                 :transition \"opacity 0.15s ease\"\n                                 :box-shadow (str \"-4px 0 0 0\" (color :panel-color))\n                                 :border \"0\"\n                                 :opacity \"0\"\n                                 :font-family \"inherit\"}]\n                     [:textarea:focus\n                      :.is-editing {:outline \"none\"\n                                    :z-index \"10\"\n                                    :display \"block\"\n                                    :opacity \"1\"}]\n                     [:span [:span\n                             :a {:position \"relative\"\n                                 :z-index \"2\"}]]]})\n\n\n(stylefy/keyframes \"tooltip-appear\"\n                   [:from\n                    {:opacity \"0\"\n                     :transform \"scale(0)\"}]\n                   [:to\n                    {:opacity \"1\"\n                     :transform \"scale(1)\"}])\n\n\n(def tooltip-style\n  {:z-index    2\n   :position \"absolute\"\n   :box-shadow [[(:64 DEPTH-SHADOWS) \", 0 0 0 1px \" (color :body-text-color :opacity-lower)]]\n   :flex-direction \"column\"\n   :background-color \"white\"\n   :padding \"8px 12px\"\n   :border-radius \"4px\"\n   :line-height \"24px\"\n   :left \"8px\"\n   :top \"32px\"\n   :transform-origin \"8px 24px\"\n   :min-width \"150px\"\n   :animation \"tooltip-appear .2s ease\"\n   :transition \"background .1s ease\"\n   :display \"table\"\n   :color (color :body-text-color :opacity-high)\n   :border-spacing \"4px\"\n   ::stylefy/manual [[:div {:display \"table-row\"}]\n                     [:b {:display \"table-cell\"\n                          :user-select \"none\"\n                          :text-align \"right\"\n                          :text-transform \"uppercase\"\n                          :font-size \"12px\"\n                          :letter-spacing \"0.1em\"\n                          :opacity (:opacity-med OPACITIES)}]\n                     [:span {:display \"table-cell\"\n                             :user-select \"all\"}\n                      [:&:hover {:color (color :header-text-color)}]]\n                     [:&:after {:content \"''\"\n                                :position \"absolute\"\n                                :top \"-12px\"\n                                :bottom \"-16px\"\n                                :border-radius \"inherit\"\n                                :left \"-16px\"\n                                :right \"-16px\"\n                                :z-index -1\n                                :display \"block\"}]]})\n\n\n(def dragging-style)\n  ;;{:background-color \"lightblue\"})\n\n\n\n;; Helpers\n\n(defn fast-on-change\n  [value _uid state]\n  (swap! state assoc :atom-string value))\n\n\n(defn on-change\n  [value uid state]\n  (prn \"CHANGE\")\n  (dispatch [:transact [[:db/add [:block/uid uid] :block/string value]]])\n  (fast-on-change value uid state))\n\n\n(def db-on-change (debounce on-change 500))\n\n\n(defn toggle\n  [id open]\n  (dispatch [:transact [[:db/add id :block/open (not open)]]]))\n\n\n(defn on-key-down\n  [e uid _state]\n  (let [key       (.. e -keyCode)\n        shift     (.. e -shiftKey)\n        value       (.. e -target -value)\n        sel-start (.. e -target -selectionStart)]\n    ;;(prn \"KEY DOWN\" value)\n    (cond\n      (and (= key KeyCodes.TAB) shift) (dispatch [:unindent uid])\n      (= key KeyCodes.TAB) (dispatch [:indent uid])\n      (= key KeyCodes.ENTER) (do (.preventDefault e)\n                                 (dispatch [:enter uid value sel-start]))\n      (and (= key KeyCodes.BACKSPACE) (zero? sel-start)) (dispatch [:backspace uid]))))\n\n\n;;; Components\n\n\n;; TODO: more clarity on open? and closed? predicates, why we use `cond` in one case and `if` in another case\n(defn block-el\n  \"Two checks to make sure block is open or not: children exist and :block/open bool\"\n  [block]\n  (let [state (r/atom {:atom-string   (:block/string block)\n                       :slash?        false\n                       :context-menu? false})]\n    (fn [block]\n      (let [{:block/keys [uid string open order children] dbid :db/id} block\n            open?       (and (seq children) open)\n            closed?     (and (seq children) (not open))\n            editing-uid @(subscribe [:editing/uid])\n            tooltip-uid @(subscribe [:tooltip/uid])\n            {:keys        [x y]\n             dragging-uid :uid\n             closest-uid  :closest/uid\n             closest-kind :closest/kind} @(subscribe [:drag-bullet])]\n\n        [:div (use-style (merge block-style\n                                (when (= dragging-uid uid) dragging-style))\n                         {:class    (join \" \" [\"block-container\"\n                                               (when (= dragging-uid uid) \"dragging\")\n                                               (when (and (seq children) open) \"show-tree-indicator\")])\n                          :data-uid uid})\n         [:div {:style {:display \"flex\"}}\n\n          ;; Toggle\n          (if (seq children)\n            [:button (use-style block-disclosure-toggle-style\n                                {:class    (cond open? \"open\" closed? \"closed\")\n                                 :on-click #(toggle [:block/uid uid] open)})\n             [:> mui-icons/KeyboardArrowDown {:style {:font-size \"16px\"}}]]\n            [:span (use-style block-disclosure-toggle-style)])\n\n          ;; Bullet\n          (if (= dragging-uid uid)\n            [:span (merge (use-style block-indicator-style\n                                     {:class    (join \" \" [\"bullet\" \"dragging\" (if closed? \"closed\" \"open\")])\n                                      :data-uid uid})\n                          {:style {:transform (str \"translate(\" x \"px, \" y \"px)\")}})]\n\n            [:span (use-style block-indicator-style\n                              {:class    (str \"bullet \" (if closed? \"closed\" \"open\"))\n                               :data-uid uid\n                               :on-click #(navigate-uid uid)})])\n\n          ;; Tooltip\n          (when (and (= tooltip-uid uid)\n                     (not dragging-uid))\n            [:div (use-style tooltip-style {:class \"tooltip\"})\n             [:div [:b \"db/id\"] [:span dbid]]\n             [:div [:b \"uid\"] [:span uid]]\n             [:div [:b \"order\"] [:span order]]])\n\n          ;; Actual Contents\n          [:div (use-style (merge block-content-style {:user-select (when dragging-uid \"none\")})\n                           {:class    \"block-contents\"\n                            :data-uid uid})\n           [autosize/textarea {:value       (:atom-string @state)\n                               :class       (when (= editing-uid uid) \"is-editing\")\n                               :auto-focus  true\n                               :id (str \"editable-uid-\" uid)\n                               :on-change   (fn [e]\n                                              (let [value (.. e -target -value)]\n                                                (fast-on-change value uid state)\n                                                (db-on-change value uid state)))\n                               :on-key-down (fn [e] (on-key-down e uid state))}]\n           [parse-and-render string]\n\n           ;; Drop Indicator\n           (when (and (= closest-uid uid)\n                      (= closest-kind :child))\n             [:span (use-style drop-area-indicator)])]]\n\n         ;; Children\n         (when open?\n           (for [child children]\n             [:div {:style {:margin-left \"32px\"} :key (:db/id child)}\n              [block-el child]]))\n\n         ;; Drop Indicator\n         (when (and (= closest-uid uid) (= closest-kind :sibling))\n           [:span (use-style drop-area-indicator)])]))))\n\n\n(defn block-component\n  [ident]\n  (let [block (db/get-block-document ident)]\n    [block-el block]))\n"]}