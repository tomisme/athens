{"version":3,"sources":["athens/views/blocks.cljs"],"mappings":"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","names":["athens.views.blocks/block-style","athens.style.color.cljs$core$IFn$_invoke$arity$1","athens.views.blocks/block-disclosure-toggle-style","athens.views.blocks/bullet-style","G__59950","garden.selectors/&","garden.selectors/after","athens.style/OPACITIES","G__59951","garden.selectors/before","G__59952","stylefy.core.keyframes.cljs$core$IFn$_invoke$arity$variadic","athens.views.blocks/drop-area-indicator","athens.style.color.cljs$core$IFn$_invoke$arity$2","athens.views.blocks/block-content-style","athens.views.blocks/tooltip-style","athens.style/DEPTH-SHADOWS","athens.views.blocks/dragging-style","athens.views.blocks/on-change","value","uid","G__59953","re-frame.core/dispatch","athens.views.blocks/db-on-change","goog.functions/debounce","athens.views.blocks/toggle","id","open","G__59954","cljs.core/not","athens.views.blocks/on-key-down","e","state","key","key-code","shift","meta","ctrl","alt","target","start","goog.dom.selection/getStart","end","goog.dom.selection/getEnd","selection","goog.dom.selection/getText","string","cljs.core/deref","query","block-start?","block-end?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/count","block-zero?","athens.db/get-block","top-row?","bottom-row?","head","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","tail","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","goog.events.KeyCodes/UP","G__59955","goog.events.KeyCodes/LEFT","G__59956","goog.events.KeyCodes/DOWN","G__59957","goog.events.KeyCodes/RIGHT","G__59958","and__4174__auto__","goog.events.KeyCodes/TAB","G__59959","G__59960","goog.events.KeyCodes/ENTER","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","G__59961","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","goog.events.KeyCodes/BACKSPACE","new-tail","new-str","G__59962","js/setTimeout","G__59963","G__59964","goog.dom.selection/setCursorPosition","or__4185__auto__","goog.events.KeyCodes/SLASH","cljs.core/update","goog.events.KeyCodes/OPEN_SQUARE_BRACKET","surround-selection","G__59965","G__59966","goog.dom.selection/setStart","G__59967","G__59968","goog.dom.selection/setEnd","double-brackets?","G__59969","G__59970","goog.events.KeyCodes/NINE","goog.events.KeyCodes/A","goog.events.KeyCodes/Z","goog.events.KeyCodes/X","goog.events.KeyCodes/V","goog.events.KeyCodes/B","goog.events.KeyCodes/I","goog.events.KeyCodes/isCharacterKey","p__59971","map__59972","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","athens.views.blocks/toggle-el","children","cljs.core/seq","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$2","js/module$node_modules$$material_ui$icons$index.KeyboardArrowDown","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$1","p__59974","map__59975","athens.views.blocks/tooltip-el","order","dbid","map__59977","dragging","tooltip","p__59979","map__59980","athens.views.blocks/bullet-el","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","G__59982","G__59983","goog.dom.classlist/contains","_","p__59984","map__59985","athens.views.blocks/block-content-el","editing-uid","G__59987","re-frame.core/subscribe","related-container","G__59988","G__59989","goog.dom/getAncestorByClass","source-container","G__59990","G__59991","source-uid","parent-dragging","G__59992","G__59993","G__59994","komponentit.autosize/textarea","G__59995","G__59996","athens.parse-renderer/parse-and-render","cljs.core/empty?","athens.views.blocks/page-search-el","_block","results","clojure.string/blank?","athens.db/search-in-node-title","athens.views.dropdown/dropdown","iter__4582__auto__","s__59998","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","b__60000","cljs.core/chunk-buffer","i__59999","map__60001","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__59997","cljs.core/chunk-rest","map__60003","cljs.core/first","cljs.core/cons","cljs.core/rest","title","athens.router.navigate_uid.cljs$core$IFn$_invoke$arity$1","athens.views.blocks/block-el","block","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","map__60005","map__60006","G__60008","drag-target","parent","athens.db/get-parent","last-child?","G__60010","G__60011","G__60012","G__60013","G__60014","G__60015","G__60016","athens.views.dropdown/slash-menu-component","s__60018","b__60020","i__60019","iter__60017","child","athens.views.blocks/block-component","ident","athens.db/get-block-document","cljs.core/chunk-first"],"sourcesContent":["(ns athens.views.blocks\n  (:require\n    [\"@material-ui/icons\" :as mui-icons]\n    [athens.db :as db]\n    [athens.parse-renderer :refer [parse-and-render]]\n    [athens.router :refer [navigate-uid]]\n    [athens.style :refer [color DEPTH-SHADOWS OPACITIES]]\n    [athens.views.dropdown :refer [slash-menu-component #_menu dropdown]]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [garden.selectors :as selectors]\n    [goog.dom :refer [getAncestorByClass]]\n    [goog.dom.classlist :refer [contains]]\n    [goog.dom.selection :refer [setStart getStart setEnd getEnd #_setText getText setCursorPosition #_getEndPoints]]\n    [goog.events.KeyCodes :refer [isCharacterKey]]\n    [goog.functions :refer [debounce]]\n    [komponentit.autosize :as autosize]\n    [re-frame.core  :refer [dispatch subscribe]]\n    [reagent.core :as r]\n    [stylefy.core :as stylefy :refer [use-style]])\n  (:import\n    (goog.events\n      KeyCodes)))\n\n\n;;; Styles\n\n\n(def block-style\n  {:display \"flex\"\n   :line-height \"2em\"\n   :position \"relative\"\n   :justify-content \"flex-start\"\n   :flex-direction \"column\"\n   ::stylefy/manual [[:&.show-tree-indicator:before {:content \"''\"\n                                                     :position \"absolute\"\n                                                     :width \"1px\"\n                                                     :left \"calc(1.25em + 1px)\"\n                                                     :top \"2em\"\n                                                     :bottom \"0\"\n                                                     :transform \"translateX(50%)\"\n                                                     :background (color :panel-color)}]]})\n\n\n(def block-disclosure-toggle-style\n  {:width \"1em\"\n   :height \"2em\"\n   :flex-shrink \"0\"\n   :display \"flex\"\n   :background \"none\"\n   :border \"none\"\n   :border-radius \"100px\"\n   :transition \"all 0.05s ease\"\n   :align-items \"center\"\n   :justify-content \"center\"\n   :padding \"0\"\n   :-webkit-appearance \"none\"\n   ::stylefy/mode [[:hover {:color (color :link-color)}]\n                   [\":is(button)\" {:cursor \"pointer\"}]]\n   ::stylefy/manual [[:&.closed [:svg {:transform \"rotate(-90deg)\"}]]]})\n\n\n(def bullet-style\n  {:flex-shrink \"0\"\n   :cursor \"pointer\"\n   :width \"0.75em\"\n   :margin-right \"0.25em\"\n   :transition \"all 0.05s ease\"\n   :height \"2em\"\n   :color (color :panel-color)\n   ::stylefy/mode [[:after {:content \"''\"\n                            :background \"currentColor\"\n                            :transition \"all 0.05s ease\"\n                            :border-radius \"100px\"\n                            :box-shadow \"0 0 0 2px transparent\"\n                            :display \"inline-flex\"\n                            :margin \"50% 0 0 50%\"\n                            :transform \"translate(-50%, -50%)\"\n                            :height \"0.3125em\"\n                            :width \"0.3125em\"}]\n                   [:hover {:color (color :link-color)}]]\n\n   ::stylefy/manual [[:&.closed-with-children {}]\n                     [:&.closed-with-children [(selectors/& (selectors/after)) {:box-shadow (str \"0 0 0 2px \" (color :body-text-color))\n                                                                                :opacity (:opacity-med OPACITIES)}]]\n                     [:&.closed-with-children [(selectors/& (selectors/before)) {:content \"none\"}]]\n                     [:&.closed-with-children [(selectors/& (selectors/before)) {:content \"none\"}]]\n                     [:&:hover:after {:transform \"translate(-50%, -50%) scale(1.3)\"}]\n                     [:&.dragging {:z-index 1\n                                   :cursor \"grabbing\"\n                                   :color (color :body-text-color)}]]})\n\n\n(stylefy/keyframes \"drop-area-appear\"\n                   [:from\n                    {:opacity \"0\"}]\n                   [:to\n                    {:opacity \"1\"}])\n\n\n(stylefy/keyframes \"drop-area-color-pulse\"\n                   [:from\n                    {:opacity (:opacity-lower OPACITIES)}]\n                   [:to\n                    {:opacity (:opacity-med OPACITIES)}])\n\n\n(def drop-area-indicator\n  {:display \"block\"\n   :height \"1px\"\n   :margin-bottom \"-1px\"\n   :color (color :body-text-color :opacity-low)\n   :position \"relative\"\n   :transform-origin \"left\"\n   :z-index 3\n   :width \"100%\"\n   ;;:animation \"drop-area-appear .5s ease\"\n   ::stylefy/manual [[:&:after {:position \"absolute\"\n                                :content \"''\"\n                                :top \"-0.5px\"\n                                :right \"0\"\n                                :bottom \"-0.5px\"\n                                :left \"0\"\n                                :border-radius \"100px\"\n                                ;;:animation \"drop-area-color-pulse 1s ease infinite alternate\"\n                                :background \"currentColor\"}]]})\n\n\n(def block-content-style\n  {:position \"relative\"\n   :overflow \"visible\"\n   :flex-grow \"1\"\n   :word-break \"break-word\"\n   ::stylefy/manual [[:textarea {:display \"none\"}]\n                     [:&:hover [:textarea {:display \"block\"\n                                           :z-index 1}]]\n                     [:textarea {:-webkit-appearance \"none\"\n                                 :cursor \"text\"\n                                 :resize \"none\"\n                                 :transform \"translate3d(0,0,0)\"\n                                 :color \"inherit\"\n                                 :padding \"0\"\n                                 :background (color :panel-color)\n                                 :position \"absolute\"\n                                 :top \"0\"\n                                 :left \"0\"\n                                 :right \"0\"\n                                 :width \"100%\"\n                                 :min-height \"100%\"\n                                 :caret-color (color :link-color)\n                                 :margin \"0\"\n                                 :font-size \"inherit\"\n                                 :line-height \"inherit\"\n                                 :border-radius \"4px\"\n                                 :transition \"opacity 0.15s ease\"\n                                 :box-shadow (str \"-4px 0 0 0\" (color :panel-color))\n                                 :border \"0\"\n                                 :opacity \"0\"\n                                 :font-family \"inherit\"}]\n                     [:textarea:focus\n                      :.is-editing {:outline \"none\"\n                                    :z-index 3\n                                    :display \"block\"\n                                    :opacity \"1\"}]\n                     [:span [:span\n                             :a {:position \"relative\"\n                                 :z-index 2}]]]})\n\n\n(stylefy/keyframes \"tooltip-appear\"\n                   [:from\n                    {:opacity \"0\"\n                     :transform \"scale(0)\"}]\n                   [:to\n                    {:opacity \"1\"\n                     :transform \"scale(1)\"}])\n\n\n(def tooltip-style\n  {:z-index    4\n   :position \"absolute\"\n   :box-shadow [[(:64 DEPTH-SHADOWS) \", 0 0 0 1px \" (color :body-text-color :opacity-lower)]]\n   :flex-direction \"column\"\n   :background-color \"white\"\n   :padding \"8px 12px\"\n   :border-radius \"4px\"\n   :line-height \"24px\"\n   :left \"8px\"\n   :top \"32px\"\n   :transform-origin \"8px 24px\"\n   :min-width \"150px\"\n   :animation \"tooltip-appear .2s ease\"\n   :transition \"background .1s ease\"\n   :display \"table\"\n   :color (color :body-text-color :opacity-high)\n   :border-spacing \"4px\"\n   ::stylefy/manual [[:div {:display \"table-row\"}]\n                     [:b {:display \"table-cell\"\n                          :user-select \"none\"\n                          :text-align \"right\"\n                          :text-transform \"uppercase\"\n                          :font-size \"12px\"\n                          :letter-spacing \"0.1em\"\n                          :opacity (:opacity-med OPACITIES)}]\n                     [:span {:display \"table-cell\"\n                             :user-select \"all\"}\n                      [:&:hover {:color (color :header-text-color)}]]\n                     [:&:after {:content \"''\"\n                                :position \"absolute\"\n                                :top \"-12px\"\n                                :bottom \"-16px\"\n                                :border-radius \"inherit\"\n                                :left \"-16px\"\n                                :right \"-16px\"\n                                :z-index -1\n                                :display \"block\"}]]})\n\n\n(def dragging-style\n  {:background-color \"lightblue\"})\n\n\n\n;; Helpers\n\n(defn on-change\n  [value uid]\n  (dispatch [:transact [[:db/add [:block/uid uid] :block/string value]]]))\n\n\n(def db-on-change (debounce on-change 500))\n\n\n(defn toggle\n  [id open]\n  (dispatch [:transact [[:db/add id :block/open (not open)]]]))\n\n\n(defn on-key-down\n  \"The most important question in all of Athens:\n\n    Vim vs Emacs\"\n  [e uid state]\n  (let [key          (.. e -key)\n        key-code     (.. e -keyCode)\n        shift        (.. e -shiftKey)\n        meta         (.. e -metaKey)\n        ctrl         (.. e -ctrlKey)\n        alt          (.. e -altKey)\n        target       (.. e -target)\n        start        (getStart target)\n        end          (getEnd target)\n        selection    (getText target)\n        string       (:atom-string @state)\n        query        (:search/query @state)\n        block-start? (zero? start)\n        block-end?   (= start (count string))\n        block-zero?  (zero? (:block/order (db/get-block [:block/uid uid])))\n        top-row?     true                                   ;; TODO\n        bottom-row?  true                                   ;; TODO\n        head         (subs string 0 start)\n        tail         (subs string end)]\n\n    (cond\n\n      ;; -- Arrow Keys ---------------------------------------------------------\n      (and (= key-code KeyCodes.UP) top-row?) (dispatch [:up uid])\n      (and (= key-code KeyCodes.LEFT) block-start?) (dispatch [:left uid])\n      (and (= key-code KeyCodes.DOWN) bottom-row?) (dispatch [:down uid])\n      (and (= key-code KeyCodes.RIGHT) block-end?) (dispatch [:right uid])\n\n      ;; -- Tab ----------------------------------------------------------------\n      (and shift (= key-code KeyCodes.TAB)) (do (.. e preventDefault)\n                                                (dispatch [:unindent uid]))\n      (= key-code KeyCodes.TAB) (do (.. e preventDefault)\n                                    (when-not block-zero?\n                                      (dispatch [:indent uid])))\n\n      ;; -- Enter --------------------------------------------------------------\n\n      ;; shift-enter: add line break\n      (and shift (= key-code KeyCodes.ENTER))\n      (swap! state assoc :atom-string (str head \"\\n\" tail))\n\n      ;; enter: depends on context\n      (= key-code KeyCodes.ENTER) (do (.. e preventDefault)\n                                      (dispatch [:enter uid string start state]))\n\n      ;; -- Backspace ----------------------------------------------------------\n\n      ;; if selection, delete entire selection\n      (and (not= selection \"\") (= key-code KeyCodes.BACKSPACE))\n      (let [new-tail (subs string end)\n            new-str (str head new-tail)]\n        (swap! state assoc :atom-string new-str))\n\n      ;; if meta, delete to start of line\n      (and meta (= key-code KeyCodes.BACKSPACE)) (swap! state assoc :atom-string tail)\n\n      ;; if at block start, dispatch (requires context)\n      (and (= key-code KeyCodes.BACKSPACE) block-start? (= start end)) (dispatch [:backspace uid string])\n\n      ;; if within brackets, delete close bracket as well\n      (and (= key-code KeyCodes.BACKSPACE) (= \"[]\" (subs string (dec start) (inc start))))\n      (let [head (subs string 0 (dec start))\n            tail (subs string (inc start))\n            new-str (str head tail)]\n        (js/setTimeout #(setCursorPosition target (dec start)) 10)\n        (swap! state assoc :atom-string new-str)\n        (swap! state assoc :search/page false))\n\n      ;; default backspace: delete a character\n      (= key-code KeyCodes.BACKSPACE) (let [head (subs string 0 (dec start))\n                                            new-str (str head tail)]\n                                        (when (or (:search/page @state) (:search/block @state))\n                                          (swap! state assoc :search/query (subs query 0 (dec (count query)))))\n                                        (swap! state assoc :atom-string new-str))\n\n      ;; open slash commands\n      (and (= key-code KeyCodes.SLASH)) (swap! state update :slash? not)\n\n      ;; -- Open Bracket -------------------------------------------------------\n\n      ;; if selection, add brackets around selection\n      (and (not= \"\" selection) (= key-code KeyCodes.OPEN_SQUARE_BRACKET))\n      (let [surround-selection (str \"[\" selection \"]\")\n            new-str (str head surround-selection tail)]\n        (js/setTimeout (fn []\n                         (setStart target (inc start))\n                         (setEnd target (inc end)))\n                       10)\n        (swap! state assoc :atom-string new-str))\n\n      ;; default: auto-create close bracket\n      (= key-code KeyCodes.OPEN_SQUARE_BRACKET)\n      (let [new-str (str head \"[]\" tail)\n            double-brackets? (= \"[[]]\" (subs new-str (dec start) (+ start 3)))]\n        (js/setTimeout #(setCursorPosition target (inc start)) 10)\n        (swap! state assoc :atom-string new-str)\n        ;; if second bracket, open search\n        (when double-brackets?\n          (swap! state assoc :search/page true)))\n\n      ;; TODO: close bracket should not be created if open bracket already exists or user just made a link\n      ;;(= key-code KeyCodes.CLOSE_SQUARE_BRACKET)\n\n      ;; -- Parentheses --------------------------------------------------------\n\n      ;; xxx: why doesn't Closure have parens key codes?\n      (and shift (= key-code KeyCodes.NINE)) (swap! state update :search/block not)\n\n      ;; -- Hotkeys ------------------------------------------------------------\n\n      (and meta (= key-code KeyCodes.A))\n      (do\n        (setStart target 0)\n        (setEnd target end))\n\n      ;; TODO: undo. conflicts with datascript undo\n      (and meta (= key-code KeyCodes.Z)) nil\n\n      ;; TODO: cut\n      (and meta (= key-code KeyCodes.X)) nil\n\n      ;; TODO: paste. magical\n      (and meta (= key-code KeyCodes.V)) nil\n\n      ;; TODO: bold\n      (and meta (= key-code KeyCodes.B)) nil\n\n      ;; TODO: italicize\n      (and meta (= key-code KeyCodes.I)) nil\n\n      ;; -- Default: Add new character -----------------------------------------\n\n      (and (not meta) (not ctrl) (not alt) (isCharacterKey key-code))\n      (let [new-str (str head key tail)]\n        (when (or (:search/page @state) (:search/block @state))\n          (swap! state assoc :search/query (str (:search/query @state) key)))\n        (swap! state assoc :atom-string new-str)))))\n\n      ;;:else (prn \"non-event\" key key-code))))\n\n\n;;; Components\n\n(defn toggle-el\n  [{:block/keys [open uid children]}]\n  (if (seq children)\n    [:button (use-style block-disclosure-toggle-style\n              {:class    (if open \"open\" \"closed\")\n               :on-click #(toggle [:block/uid uid] open)})\n     [:> mui-icons/KeyboardArrowDown {:style {:font-size \"16px\"}}]]\n    [:span (use-style block-disclosure-toggle-style)]))\n\n\n;; FIXME: fix flicker from on-mouse-enter on-mouse-leave\n(defn tooltip-el\n  [{:block/keys [uid order] dbid :db/id} state]\n  (let [{:keys [dragging tooltip]} @state]\n    (when (and tooltip (not dragging))\n      [:div (use-style tooltip-style\n              {:class          \"tooltip\"\n               :on-mouse-leave #(swap! state assoc :tooltip false)})\n       [:div [:b \"db/id\"] [:span dbid]]\n       [:div [:b \"uid\"] [:span uid]]\n       [:div [:b \"order\"] [:span order]]])))\n\n\n(defn bullet-el\n  [{:block/keys [uid children open]} state]\n  [:span (merge (use-style bullet-style\n                  {:class         [(when (and (seq children) (not open))\n                                     \"closed-with-children\")]\n                   :draggable     true\n                   :on-mouse-over #(swap! state assoc :tooltip true)\n                   :on-mouse-out  (fn [e] (when-not (contains (.. e -relatedTarget) \"tooltip\")\n                                            (swap! state assoc :tooltip false)))\n                   :on-drag-end   (fn [_] (swap! state assoc :dragging false))\n                   :on-drag-start (fn [e]\n                                    (.. e stopPropagation)\n                                    (set! (.. e -dataTransfer -effectAllowed) \"move\")\n                                    ;;(prn \"UID\" uid)\n                                    (.. e -dataTransfer (setData \"text/plain\" uid))\n                                    (swap! state assoc :dragging true))}))])\n\n\n;; Actual string contents - two elements, one for reading and one for writing\n;; seems hacky, but so far no better way to click into the correct position with one conditional element\n(defn block-content-el\n  [{:block/keys [string uid children]} state]\n  (let [editing-uid @(subscribe [:editing/uid])]\n    [:div (use-style block-content-style\n            {:class         \"block-content\"\n             :on-drag-enter (fn [e]\n                              (.. e stopPropagation)\n                              (swap! state assoc :drag-target :child))\n             :on-drag-over  (fn [e]\n                              (.. e preventDefault)\n                              (.. e stopPropagation)\n                              false)\n             :on-drag-leave (fn [e]\n                              (.. e stopPropagation)\n                              (let [related-container (getAncestorByClass (.. e -relatedTarget) \"block-container\")\n                                    source-container  (getAncestorByClass (.. e -target) \"block-container\")]\n                                (cond\n                                  (= related-container source-container) nil\n                                  :else (swap! state assoc :drag-target nil))))\n             :on-drop       (fn [e]\n                              (let [source-uid      (.. e -dataTransfer (getData \"text/plain\"))\n                                    parent-dragging (getAncestorByClass (.. e -target) \"dragging\")]\n                                (.. e preventDefault)\n                                (.. e stopPropagation)\n                                (swap! state assoc :dragging false)\n                                (swap! state assoc :drag-target nil)\n                                (when (and (nil? parent-dragging) (not= source-uid uid))\n                                  (dispatch [:drop-bullet source-uid uid :child]))))})\n\n     [autosize/textarea {:value       (:atom-string @state)\n                         :class       [(when (= editing-uid uid) \"is-editing\") \"textarea\"]\n                         :auto-focus  true\n                         :id          (str \"editable-uid-\" uid)\n                         :on-change   (fn [_] (db-on-change (:atom-string @state) uid))\n                         :on-key-down (fn [e] (on-key-down e uid state))}]\n     (parse-and-render string)\n     ;; don't show drop indicator when dragging to its children\n     (when (and (empty? children) (not (:dragging @state)))\n       [:div.drag-n-drop (use-style (merge {:height \"2px\"}\n                                      (when (= (:drag-target @state) :child) {:background-color \"red\"})))])]))\n\n;; flipped around\n\n(defn page-search-el\n  [_block state]\n  (when (:search/page @state)\n    (let [query   (:search/query @state)\n          results (when (not (clojure.string/blank? query))\n                    (db/search-in-node-title query))]\n      ;;(prn query)\n      [dropdown {:style {:position \"absolute\"\n                         :top      \"100%\"\n                         :left     \"-0.125em\"}\n                 :content (if (not query)\n                            [:div \"Start Typing!\"]\n                            (for [{:keys [node/title block/uid]} results]\n                              ^{:key uid}\n                              [:div {:on-click #(navigate-uid uid)} title]))}])))\n\n\n\n;;TODO: more clarity on open? and closed? predicates, why we use `cond` in one case and `if` in another case)\n(defn block-el\n  \"Two checks to make sure block is open or not: children exist and :block/open bool\"\n  [block]\n  (let [state (r/atom {:atom-string (:block/string block)\n                       :slash? false\n                       :search/page false\n                       :search/query nil\n                       :search/block false\n                       :dragging false\n                       :drag-target nil})]\n    (fn [block]\n      (let [{:block/keys [uid string open children order]} block\n            editing-uid @(subscribe [:editing/uid])\n            {dragging :dragging drag-target :drag-target} @state\n            parent (db/get-parent [:block/uid uid])\n            last-child? (= order (dec (count (:block/children parent))))]\n\n        ;; xxx: bad vibes - if not editing-uid, allow ratom to be appended by joining two blocks (deleting at start)\n        (when (and (not (= editing-uid uid))\n                   (< (count (:atom-string @state)) (count string)))\n          (swap! state assoc :atom-string string))\n        ;;(prn \"target\" uid drag-target)\n\n        [:<>\n\n         ;; should be (when dragging-global) but this causes react to void the original component, preventing on-drag-end from firing\n         ;; need surface to drag over. probably a better way to do this\n         ;; FIXME drop-area-indicator styles no longer work because using a div now and document structure has changed\n         (when true\n           [:div.drag-n-drop (use-style (merge {:height \"2px\"}\n                                          (when (= drag-target :container) {:background-color \"blue\"})))])\n\n         [:div.block-container\n          (use-style (merge block-style (when dragging dragging-style))\n            ;; TODO: is it possible to make this show-tree-indicator a mergable -style map like above?\n            {:class         [(when dragging \"dragging\")\n                             (when (and (seq children) open) \"show-tree-indicator\")]\n             :on-drag-enter (fn [e]\n                              (.. e stopPropagation)\n                              (swap! state assoc :drag-target :container))\n             :on-drag-over  (fn [e]\n                              (.. e preventDefault)\n                              (.. e stopPropagation)\n                              false)\n             :on-drag-leave (fn [e]\n                              (let [related-container (getAncestorByClass (.. e -relatedTarget) \"block-container\")\n                                    source-container  (getAncestorByClass (.. e -target) \"block-container\")]\n                                (when-not (= related-container source-container)\n                                  (swap! state assoc :drag-target nil))))\n             :on-drop       (fn [e] (let [source-uid      (.. e -dataTransfer (getData \"text/plain\"))\n                                          parent-dragging (getAncestorByClass (.. e -target) \"dragging\")]\n                                      (.. e preventDefault)\n                                      (.. e stopPropagation)\n                                      (swap! state assoc :dragging false)\n                                      (swap! state assoc :drag-target nil)\n                                      (when (and (nil? parent-dragging) (not= source-uid uid))\n                                        (dispatch [:drop-bullet source-uid uid :sibling]))))})\n\n          [:div {:style {:display \"flex\"}}\n           [toggle-el block]\n           [bullet-el block state]\n           [tooltip-el block state]\n           [block-content-el block state]]\n\n          (when (:slash? @state)\n            [slash-menu-component {:style {:position \"absolute\" :top \"100%\" :left \"-0.125em\"}}])\n          [page-search-el block state]\n\n          ;; Children\n          ;; if last element and no children, allow drop\n          (when (and open (seq children))\n            (for [child children]\n              [:div {:style {:margin-left \"32px\"} :key (:db/id child)}\n               [block-el child]]))]\n\n         (when last-child?\n           [:div.drag-n-drop (use-style (merge {:height \"2px\"}\n                                          (when (= drag-target :container) {:background-color \"green\"})))])]))))\n\n\n(defn block-component\n  [ident]\n  (let [block (db/get-block-document ident)]\n    [block-el block]))\n"]}