{
"version":3,
"file":"module$node_modules$marked$src$Parser.js",
"lineCount":9,
"mappings":"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",
"sources":["node_modules/marked/src/Parser.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$marked$src$Parser\"] = function(global,require,module,exports) {\nconst Renderer = require('./Renderer.js');\nconst TextRenderer = require('./TextRenderer.js');\nconst Slugger = require('./Slugger.js');\nconst { defaults } = require('./defaults.js');\nconst {\n  unescape\n} = require('./helpers.js');\n\n/**\n * Parsing & Compiling\n */\nmodule.exports = class Parser {\n  constructor(options) {\n    this.options = options || defaults;\n    this.options.renderer = this.options.renderer || new Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.textRenderer = new TextRenderer();\n    this.slugger = new Slugger();\n  }\n\n  /**\n   * Static Parse Method\n   */\n  static parse(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parse(tokens);\n  }\n\n  /**\n   * Parse Loop\n   */\n  parse(tokens, top = true) {\n    let out = '',\n      i,\n      j,\n      k,\n      l2,\n      l3,\n      row,\n      cell,\n      header,\n      body,\n      token,\n      ordered,\n      start,\n      loose,\n      itemBody,\n      item,\n      checked,\n      task,\n      checkbox;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n      switch (token.type) {\n        case 'space': {\n          continue;\n        }\n        case 'hr': {\n          out += this.renderer.hr();\n          continue;\n        }\n        case 'heading': {\n          out += this.renderer.heading(\n            this.parseInline(token.tokens),\n            token.depth,\n            unescape(this.parseInline(token.tokens, this.textRenderer)),\n            this.slugger);\n          continue;\n        }\n        case 'code': {\n          out += this.renderer.code(token.text,\n            token.lang,\n            token.escaped);\n          continue;\n        }\n        case 'table': {\n          header = '';\n\n          // header\n          cell = '';\n          l2 = token.header.length;\n          for (j = 0; j < l2; j++) {\n            cell += this.renderer.tablecell(\n              this.parseInline(token.tokens.header[j]),\n              { header: true, align: token.align[j] }\n            );\n          }\n          header += this.renderer.tablerow(cell);\n\n          body = '';\n          l2 = token.cells.length;\n          for (j = 0; j < l2; j++) {\n            row = token.tokens.cells[j];\n\n            cell = '';\n            l3 = row.length;\n            for (k = 0; k < l3; k++) {\n              cell += this.renderer.tablecell(\n                this.parseInline(row[k]),\n                { header: false, align: token.align[k] }\n              );\n            }\n\n            body += this.renderer.tablerow(cell);\n          }\n          out += this.renderer.table(header, body);\n          continue;\n        }\n        case 'blockquote': {\n          body = this.parse(token.tokens);\n          out += this.renderer.blockquote(body);\n          continue;\n        }\n        case 'list': {\n          ordered = token.ordered;\n          start = token.start;\n          loose = token.loose;\n          l2 = token.items.length;\n\n          body = '';\n          for (j = 0; j < l2; j++) {\n            item = token.items[j];\n            checked = item.checked;\n            task = item.task;\n\n            itemBody = '';\n            if (item.task) {\n              checkbox = this.renderer.checkbox(checked);\n              if (loose) {\n                if (item.tokens[0].type === 'text') {\n                  item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                  if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                    item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                  }\n                } else {\n                  item.tokens.unshift({\n                    type: 'text',\n                    text: checkbox\n                  });\n                }\n              } else {\n                itemBody += checkbox;\n              }\n            }\n\n            itemBody += this.parse(item.tokens, loose);\n            body += this.renderer.listitem(itemBody, task, checked);\n          }\n\n          out += this.renderer.list(body, ordered, start);\n          continue;\n        }\n        case 'html': {\n          // TODO parse inline content if parameter markdown=1\n          out += this.renderer.html(token.text);\n          continue;\n        }\n        case 'paragraph': {\n          out += this.renderer.paragraph(this.parseInline(token.tokens));\n          continue;\n        }\n        case 'text': {\n          body = token.tokens ? this.parseInline(token.tokens) : token.text;\n          while (i + 1 < l && tokens[i + 1].type === 'text') {\n            token = tokens[++i];\n            body += '\\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);\n          }\n          out += top ? this.renderer.paragraph(body) : body;\n          continue;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens, renderer) {\n    renderer = renderer || this.renderer;\n    let out = '',\n      i,\n      token;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n      switch (token.type) {\n        case 'escape': {\n          out += renderer.text(token.text);\n          break;\n        }\n        case 'html': {\n          out += renderer.html(token.text);\n          break;\n        }\n        case 'link': {\n          out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'image': {\n          out += renderer.image(token.href, token.title, token.text);\n          break;\n        }\n        case 'strong': {\n          out += renderer.strong(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'em': {\n          out += renderer.em(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'codespan': {\n          out += renderer.codespan(token.text);\n          break;\n        }\n        case 'br': {\n          out += renderer.br();\n          break;\n        }\n        case 'del': {\n          out += renderer.del(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'text': {\n          out += renderer.text(token.text);\n          break;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n    return out;\n  }\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","Renderer","TextRenderer","Slugger","defaults","unescape","constructor","options","renderer","textRenderer","slugger","parse","tokens","parser","Parser","top","out","i","j","k","header","l","length","token","type","hr","heading","parseInline","depth","code","text","lang","escaped","cell","l2","tablecell","align","tablerow","body","cells","row","l3","table","blockquote","ordered","start","loose","items","item","checked","task","itemBody","checkbox","unshift","listitem","list","html","paragraph","errMsg","silent","console","error","Error","link","href","title","image","strong","em","codespan","br","del"]
}
