{"version":3,"sources":["sablono/util.cljc"],"mappings":"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","names":["sablono.util/*base-url*","x__4487__auto__","m__4488__auto__","sablono.util/to-str","goog/typeOf","m__4485__auto__","cljs.core/missing-protocol","sablono.util/ToString","x","sablono.util/to-uri","sablono.util/ToURI","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","sablono.util/as-str","seq39491","self__4777__auto__","cljs.core/seq","xs","clojure.string.join.cljs$core$IFn$_invoke$arity$1","cljs.core.map.cljs$core$IFn$_invoke$arity$2","sablono.util/camel-case","k","cljs.core/Keyword","cljs.core/Symbol","vec__39499","seq__39500","first__39501","cljs.core/first","cljs.core/next","first-word","words","cljs.core/name","cljs.core/empty?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","clojure.string/capitalize","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","sablono.util/camel-case-keys","m","cljs.core/map?","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$1","p__39504","vec__39506","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","v","G__39513","cljs.core.update.cljs$core$IFn$_invoke$arity$3","sablono.util/element?","cljs.core/vector?","sablono.util/html-to-dom-attrs","attrs","clojure.set/rename-keys","sablono.util/join-classes","classes","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1","cljs.core.remove.cljs$core$IFn$_invoke$arity$1","cljs.core/nil?","clojure.string.join.cljs$core$IFn$_invoke$arity$2","cljs.core/PROTOCOL_SENTINEL","goog.object/set","G__39531","G__39532","G__39533","G__39538","G__39539","G__39540","G__39541","G__39542","G__39543","js/goog.Uri","or__4185__auto__","cljs.core/not","cljs.core/re-matches","base","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","_","G__39551","G__39552","G__39553"],"sourcesContent":["(ns sablono.util\n  #?(:cljs (:import goog.Uri))\n  (:require [clojure.set :refer [rename-keys]]\n            [clojure.string :as str]))\n\n(def ^:dynamic *base-url* nil)\n\n(defprotocol ToString\n  (to-str [x] \"Convert a value into a string.\"))\n\n(defprotocol ToURI\n  (to-uri [x] \"Convert a value into a URI.\"))\n\n(defn as-str\n  \"Converts its arguments into a string using to-str.\"\n  [& xs]\n  (str/join (map to-str xs)))\n\n(defn camel-case\n  \"Returns camel case version of the key, e.g. :http-equiv becomes :httpEquiv.\"\n  [k]\n  (if (or (keyword? k)\n          (string? k)\n          (symbol? k))\n    (let [[first-word & words] (.split (name k) \"-\")]\n      (if (or (empty? words)\n              (= \"aria\" first-word)\n              (= \"data\" first-word))\n        k\n        (-> (map str/capitalize words)\n            (conj first-word)\n            str/join\n            keyword)))\n    k))\n\n(defn camel-case-keys\n  \"Recursively transforms all map keys into camel case.\"\n  [m]\n  (if (map? m)\n    (let [m (into {}\n                  (map (fn [[k v]] [(camel-case k) v]))\n                  m)]\n      (cond-> m\n        (map? (:style m))\n        (update :style camel-case-keys)))\n    m))\n\n(defn element?\n  \"Return true if `x` is an HTML element. True when `x` is a vector\n  and the first element is a keyword, e.g. `[:div]` or `[:div [:span \\\"x\\\"]`.\"\n  [x]\n  (and (vector? x)\n       (keyword? (first x))))\n\n(defn html-to-dom-attrs\n  \"Converts all HTML attributes to their DOM equivalents.\"\n  [attrs]\n  (rename-keys (camel-case-keys attrs)\n               {:class :className\n                :for :htmlFor}))\n\n(defn join-classes\n  \"Join the `classes` with a whitespace.\"\n  [classes]\n  (->> classes\n       (into [] (comp\n                 (mapcat (fn [x] (if (string? x) [x] (seq x))))\n                 (remove nil?)))\n       (str/join \" \")))\n\n#?(:cljs\n   (extend-protocol ToString\n     cljs.core.Keyword\n     (to-str [x]\n       (name x))\n     goog.Uri\n     (to-str [x]\n       (if (or (. x (hasDomain))\n               (nil? (. x (getPath)))\n               (not (re-matches #\"^/.*\" (. x (getPath)))))\n         (str x)\n         (let [base (str *base-url*)]\n           (if (re-matches #\".*/$\" base)\n             (str (subs base 0 (dec (count base))) x)\n             (str base x)))))\n     nil\n     (to-str [_]\n       \"\")\n     number\n     (to-str [x]\n       (str x))\n     default\n     (to-str [x]\n       (str x))))\n\n#?(:cljs\n   (extend-protocol ToURI\n     Uri\n     (to-uri [x] x)\n     default\n     (to-uri [x] (Uri. (str x)))))\n"]}