{"version":3,"sources":["athens/db.cljs"],"mappings":"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","names":["athens.db/athens-url","athens.db/help-url","athens.db/ego-url","js/athens","js/athens.db","js/athens.db.rfdb","athens.db/rfdb","athens.db/str-kw-mappings","athens.db/convert-key","k","cljs.core.get.cljs$core$IFn$_invoke$arity$3","athens.db/parse-hms","hms","cljs.core/coll?","p1__32833#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__32834","vec__32835","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","acc","v","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","athens.db/parse-tuples","tuples","cljs.core.partition.cljs$core$IFn$_invoke$arity$2","cljs.core/rest","p1__32838#","clojure.edn/read-string","p1__32839#","cljs.core/cons","athens.db/json-str-to-edn","json-str","js/JSON.parse","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1","athens.db/str-to-db-tx","edn-data","cljs.core/first","athens.db/schema","js/athens.db.dsdb","athens.db/dsdb","datascript.core.create_conn.cljs$core$IFn$_invoke$arity$1","posh.reagent/posh!","athens.db/e-by-av","a","cljs.core/deref","datascript.core.datoms.cljs$core$IFn$_invoke$arity$4","athens.db/sort-block-children","block","temp__5733__auto__","children","cljs.core/seq","cljs.core/vec","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","athens.db/get-block-document","id","G__32840","G__32841","G__32842","posh.reagent/pull","athens.db/get-node-document","G__32843","G__32844","G__32845","athens.db/shape-parent-query","pull-results","b","res","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/reverse","athens.db/get-parents-recursively","G__32846","G__32847","G__32848","athens.db/get-block","G__32849","G__32850","G__32851","athens.db/get-parent","G__32852","G__32853","datascript.core/entity","athens.db/deepest-child-block","document","G__32854","G__32855","G__32856","ch","n","cljs.core/count","cljs.core.get.cljs$core$IFn$_invoke$arity$2","js/athens.db.history","athens.db/history","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","athens.db/history-limit","athens.db/drop-tail","xs","pred","x","cljs.core/next","athens.db/trim-head","cljs.core.drop.cljs$core$IFn$_invoke$arity$2","athens.db/find-prev","cljs.core/last","p1__32857#","cljs.core.take_while.cljs$core$IFn$_invoke$arity$2","cljs.core/not","athens.db/find-next","cljs.core/fnext","p1__32863#","cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2","datascript.core.listen_BANG_.cljs$core$IFn$_invoke$arity$3","tx-report","map__32865","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","db-before","db-after","and__4174__auto__","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","h","p1__32864#"],"sourcesContent":["(ns athens.db\n  (:require\n    [clojure.edn :as edn]\n    [datascript.core :as d]\n    [posh.reagent :refer [posh! pull]]))\n\n\n;; -- Example Roam DBs ---------------------------------------------------\n\n(def athens-url \"https://raw.githubusercontent.com/athensresearch/athens/master/data/athens.datoms\")\n(def help-url   \"https://raw.githubusercontent.com/athensresearch/athens/master/data/help.datoms\")\n(def ego-url    \"https://raw.githubusercontent.com/athensresearch/athens/master/data/ego.datoms\")\n\n\n;; -- re-frame -----------------------------------------------------------\n\n(defonce rfdb {:user                \"Socrates\"\n               :current-route       nil\n               :loading?            true\n               :alert               nil\n               :athena/open         false\n               :athena/recent-items '()\n               :devtool/open        false\n               :left-sidebar/open   true\n               :right-sidebar/open  false\n               :right-sidebar/items {}\n               :editing/uid         nil\n               :drag-bullet         {:uid          nil\n                                     :x            nil\n                                     :y            nil\n                                     :closest/uid  nil\n                                     :closest/kind nil}\n               :tooltip/uid         nil\n               :daily-notes/items   []})\n\n\n;; -- JSON Parsing ----------------------------------------------------\n\n(def str-kw-mappings\n  \"Maps attributes from \\\"Export All as JSON\\\" to original datascript attributes.\"\n  {\"children\" :block/children\n   \"create-email\" :create/email\n   \"create-time\" :create/time\n   \"edit-email\" :edit/email\n   \"edit-time\" :edit/time\n   \"email\" :user/email\n   \"emoji\" :ent/emoji\n   \"emojis\" :ent/emojis\n   \"props\" :block/props\n   \"string\" :block/string\n   \"text-align\" :block/text-align\n   \"time\" nil\n   \"title\" :node/title\n   \"uid\" :block/uid\n   \"users\" nil\n   \"heading\" :block/heading})\n\n\n(defn convert-key\n  [k]\n  (get str-kw-mappings k k))\n\n\n(defn parse-hms\n  \"Parses JSON retrieved from Roam's \\\"Export all as JSON\\\". Not fully functional.\"\n  [hms]\n  (if (not (coll? hms))\n    hms\n    (map #(reduce (fn [acc [k v]]\n                    (assoc acc (convert-key k) (parse-hms v)))\n                  {}\n                  %)\n         hms)))\n\n\n(defn parse-tuples\n  \"Parse tuples exported via method specified in https://roamresearch.com/#/app/ego/page/eJ14YtH2G.\"\n  [tuples]\n  (->> tuples\n       (partition 3)            ; chunk into 3-tuples\n       rest                     ; drop first tuple which is (?e ?a ?v)\n       (map #(map edn/read-string %))\n       (map #(cons :db/add %))))\n\n\n(defn json-str-to-edn\n  \"Convert a JSON str to EDN. May receive JSON through an HTTP request or file upload.\"\n  [json-str]\n  (->> json-str\n       (js/JSON.parse)\n       (js->clj)))\n\n\n(defn str-to-db-tx\n  \"Deserializes a JSON string into EDN and then Datoms.\"\n  [json-str]\n  (let [edn-data (json-str-to-edn json-str)]\n    (if (coll? (first edn-data))\n      (parse-hms edn-data)\n      (parse-tuples edn-data))))\n\n\n;; -- Datascript and Posh ------------------------------------------------\n\n(def schema\n  {:block/uid      {:db/unique :db.unique/identity}\n   :node/title     {:db/unique :db.unique/identity}\n   :attrs/lookup   {:db/cardinality :db.cardinality/many}\n   :block/children {:db/cardinality :db.cardinality/many\n                    :db/valueType :db.type/ref}})\n\n\n(defonce dsdb (d/create-conn schema))\n(posh! dsdb)\n\n\n(defn e-by-av\n  [a v]\n  (-> (d/datoms @dsdb :avet a v) first :e))\n\n\n(defn sort-block-children\n  [block]\n  (if-let [children (seq (:block/children block))]\n    (assoc block :block/children\n           (vec (sort-by :block/order (map sort-block-children children))))\n    block))\n\n\n(defn get-block-document\n  [id]\n  (->> @(pull dsdb '[:db/id :block/uid :block/string :block/open :block/order {:block/children ...}] id)\n       sort-block-children))\n\n\n(defn get-node-document\n  [id]\n  (->> @(pull dsdb '[:db/id :node/title :block/uid :block/string :block/open :block/order {:block/children ...}] id)\n       sort-block-children))\n\n\n(defn shape-parent-query\n  \"Normalize path from deeply nested block to root node.\"\n  [pull-results]\n  (->> (loop [b   pull-results\n              res []]\n         (if (:node/title b)\n           (conj res b)\n           (recur (first (:block/_children b))\n                  (conj res (dissoc b :block/_children)))))\n       (rest)\n       (reverse)\n       vec))\n\n\n(defn get-parents-recursively\n  [id]\n  (->> @(pull dsdb '[:db/id :node/title :block/uid :block/string {:block/_children ...}] id)\n       shape-parent-query))\n\n\n(defn get-block\n  [id]\n  @(pull dsdb '[:db/id :node/title :block/uid :block/order :block/string {:block/children [:block/uid :block/order]}] id))\n\n\n(defn get-parent\n  [id]\n  (-> (d/entity @dsdb id)\n      :block/_children\n      first\n      :db/id\n      get-block))\n\n\n(defn deepest-child-block\n  [id]\n  (let [document (->> @(pull dsdb '[:block/order :block/uid {:block/children ...}] id))]\n    (loop [block document]\n      (if (nil? (:block/children block))\n        block\n        (let [ch (:block/children block)\n              n  (count ch)]\n          (recur (get ch (dec n))))))))\n\n\n;; history\n\n(defonce history (atom []))\n(def ^:const history-limit 10)\n\n\n(defn drop-tail\n  [xs pred]\n  (loop [acc []\n         xs  xs]\n    (let [x (first xs)]\n      (cond\n        (nil? x) acc\n        (pred x) (conj acc x)\n        :else  (recur (conj acc x) (next xs))))))\n\n\n(defn trim-head\n  [xs n]\n  (vec (drop (- (count xs) n) xs)))\n\n\n(defn find-prev\n  [xs pred]\n  (last (take-while #(not (pred %)) xs)))\n\n\n(defn find-next\n  [xs pred]\n  (fnext (drop-while #(not (pred %)) xs)))\n\n\n(d/listen! dsdb :history\n           (fn [tx-report]\n             (let [{:keys [db-before db-after]} tx-report]\n               (when (and db-before db-after)\n                 (swap! history (fn [h]\n                                  (-> h\n                                      (drop-tail #(identical? % db-before))\n                                      (conj db-after)\n                                      (trim-head history-limit))))))))\n\n"]}