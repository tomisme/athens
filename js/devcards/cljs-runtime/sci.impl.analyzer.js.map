{"version":3,"sources":["sci/impl/analyzer.cljc"],"mappings":";;;;;;;;;;AAkBA,AAAA,AAAA,AAAKA;AAIL,AAAA,AAAA,AAAKC;AAKL,AAAA,AAAAC,AAAMQ,AAA0CC,AAAUC;AAA1D,AAAA,AAAAT,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAI,AAAA,AAAAC,AAAAL,AAAA;AAAAM,AAAA,AAAAD,AAAAL,AAAA;AAAA,AACE,AAAU,AAAAU,AAAA;AAAAC,AAAsB,AAAA,AAAA,AAAIF,AAAII;AAA9B,AAAA,AAAAH,AAAAC,AAAAD,AAAAC,AAACC,AAAAA,AAAAA;;AAAX;;AAAA,AACE,AAAMJ,AAAU,AAACM,AAAcN;AAA/B,AACE,AAAU,AAAA,AAAIJ,AAAM,AAACW,AAAUX,AAAMI;AAArC;AAAA,AAEE,AAACQ,AAA0B,AAAA,AAAKP,AAAwBA;;;AAC1D,AAAM,AAAA,AAAIH,AAAK,AAACS,AAAUT,AAAKE;AAA/B,AAEE,AAACQ,AAA0B,AAAA,AAAKP,AAAwBA;;AAF1D;;;;AAIN,AAAA,AAAAQ,AAAMG,AAAgCX,AAAIa;AAA1C,AAAA,AAAAJ,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjB,AAAA,AAAAiB,AAAA,AAAA,AAAA,AAAA,AAAAhB,AAAAC,AAAAe,AAAAA;AAAAA,AAAiCG;AAAjCF,AAAA,AAAAd,AAAAa,AAAA;AAAA,AACE,AAAMM,AAAO,AAAAC,AAAQ,AAACC,AAAUjB;AAAnB,AAAA,AAAA,AAAAgB,AAAA;AAAA;;AAAA,AAAAA,AAAwBE;;;AAC/BC,AAAS,AAACD,AAAO,AAACE,AAAKpB;AAD7B,AAAAc,AAEMJ,AAAKA;AACLW,AAAI,AAACC;AACLC,AAAe,AAAAC,AAAA,AAAA,AAAId;AAAJ,AAAA,AAAAc,AAAAA,AAAoBH,AAAAA,AAAAA;;AAEnCN,AAAO,AAAA,AAAMA,AAAO,AAAAU,AAAI,AAAA,AAAA,AAACC,AAAOH,AAAyBR;AAArC,AAAA,AAAAU;AAAAA;;AACIV;;AADjB;AANb,AAQE,AAAAU,AAAI,AAACE,AAAKJ,AAAevB;AAAzB,AAAA,AAAAyB;AAAAA;;AACI,AACE,AAAAG,AAAKb;AAAL,AAAA,AAAAa;AAAY,AAAI,AAAA,AAAA,AAACC,AAAEd,AAAsB,AAAA,AAAA,AAACc,AAAEd;;AAA5Ca;;;AACA,AAAAH,AAAI,AAAAK,AAAQpB;AAARoB,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAAA;AAAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAwB,AAAAA,AAAA,AAAA,AAAClC;AAAzB,AAAA,AAAA,AAAAkC,AAAA;AAAA;;AAA4C,AAAAA,AAACH,AAAKR;;;AAAtD,AAAA,AAAAM;AAAAA;;AACI,AAAAM,AAAa,AAAA,AAAA,AAAMlB,AAAM,AAACjB,AAAIP,AAAO8B;AAArC,AAAA,AAAAY;AAAA,AAAA,AAAAA,AAAWC;AAAX,AAAA,AACGhC,AAAIgC;;AADP;;;;AAHN,AAKEjB;AACA,AAAAU,AAAI,AAAAQ,AAAQvB;AAARuB,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAAA;AAAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAAA,AAAAA,AAAwBlB,AAAAA,AAAAA;AAAxB,AAAA,AAAA,AAAAkB,AAAA;AAAA;;AAA+B,AAAAA,AAACN,AAAKR;;;AAAzC,AAAA,AAAAM;AAAAA;;AACI,AAAAM,AAAiB,AAACI,AAAsBvB,AAAIG;AAA5C,AAAA,AAAAgB;AAAA,AAAA,AAAAA,AAAWG;AAAX,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACGlC,AAAoCkC,AAAMf;;AAD7C;;;;AAPN,AAWE,AAAU,AAACb,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACoB,AAAOH,AAAgDJ;AADnE;;AAAA,AAEE,AAAAM,AACC,AAAAW,AAAQ1B;AAAR0B,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAAA;AAAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAwB,AAAAA,AAAA,AAAA,AAACxC;AAAzB,AAAA,AAAA,AAAAwC,AAAA;AAAA;;AAA4C,AAAAA,AAACT,AAAKR;;;AADnD,AAAA,AAAAM;AAAAA;;AAAA,AAAAA,AAEC,AAAA,AAAA,AAAA,AAAM,AAAA,AAAA,AAAMZ,AAAM,AAACjB,AAAIP,AAAOW,AAC3BA,AAAIA;AAHR,AAAA,AAAAyB;AAAAA;;AAIC,AAAAM,AAAa,AAACI,AAAsBvB,AAAIZ;AAAxC,AAAA,AAAA+B;AAAA,AAAA,AAAAA,AAAWM;AAAX,AAAA,AACGrC,AAAIqC;;AADP;;;;;;;;;;AAGb,AAAA,AAAMC,AAAKC,AAAKC;AAAhB,AACE,AAAAT,AAAa,AAAC3B,AAAKoC;AAAnB,AAAA,AAAAT;AAAA,AAAA,AAAAA,AAAWU;AAAX,AACE,AAAA,AAAMA;;AADR;;;AAGF,AAAA,AAAAC,AAAMG,AAAoC7C,AAAIa;AAA9C,AAAA,AAAA8B,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAnD,AAAA,AAAAmD,AAAA,AAAA,AAAA,AAAA,AAAAlD,AAAAC,AAAAiD,AAAAA;AAAAA,AAAqC/B;AAArCgC,AAAA,AAAAhD,AAAA+C,AAAA;AAAA,AACE,AAAAG,AACM,AAAArB,AAEC,AAAAM,AACW,AAACJ,AAAKiB,AAAS5C;AAD1B,AAAA,AAAA+B;AAAA,AAAA,AAAAmB,AAAAnB;AAAA,AAAAgB,AAAAG,AAAA,AAAA,AAAYF;AAAZ,AAAAD,AAAAG,AAAA,AAAA,AAAclB;AAAd,AAGE,AAAMmB,AAAE,AAACb,AAAI1B,AAAIoB;AACXA,AAAE,AAACoB,AAAiBJ;AAEpBhB,AAAE,AAAImB,AAAE,AAAA,AAACE,AAAUrB,AACAsB,AAAWH,AACxBnB;AALZ,AAAA,AAMGgB,AAAEhB;;AATP;;;AAFD,AAAA,AAAAP;AAAAA;;AAYC,AAAAM,AAGM,AAACpB,AAAQC,AAAIZ,AAAIa;AAHvB,AAAA,AAAAkB;AAAA,AAAA,AAAAwB,AAAAxB;AAAA,AAAAgB,AAAAQ,AAAA,AAAA,AACMP;AADN,AAAAD,AAAAQ,AAAA,AAAA,AACQC;AADRD,AACcN;AADd,AAME,AAACnD,AAAkBc,AAAIoC,AAAEhD;;AACzBiD;;AAPF;;;;AAbP,AAAAF,AAAAD,AAAA,AAAA,AAAOE;AAAP,AAAAD,AAAAD,AAAA,AAAA,AAASd;AAATc,AAAeG;AAAf,AAsBE,AAAAQ,AAAW,AAAA,AAAK,AAACC,AAAI,AAAA,AAAyB9C,AAC9B,AAACR,AAAK4C;AADtB,AAAA,AAAAS;AAAA,AAAAA,AAAShB;AAAT,AAEE,AAAI,AAAA,AAAkBA;AAAtB,AAGGO,AAAE,AAAA,AAAA,AAAA,AAAA,AAACW,AAAW3B;;AAEfiB;;;AACFA;;;AAEN,AAAA,AAAA,AAAAW,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AACFlD,AAAIZ;AADR,AACa,AAAA,AAACgE,AAAepD,AAAIZ;;;AADjC,AAAA,AAAA,AAAM8D,AAEFlD,AAAIZ,AAAIa;AAFZ,AAGG,AAAMb,AAAIA;AACJiE,AAAI,AAACC,AACA,AAAAzC,AACC,AAACoB,AAAOjC,AAAIZ,AAAIa;AADjB,AAAA,AAAAY;AAAAA;;AAIC,AAAM0C,AAAE,AAAC/C,AAAKpB;AAAd,AACE,AACE,AAAA4B,AAAKf;AAAL,AAAA,AAAAe;AAAA,AACK,AAAA,AAACwC,AAAiBD,AAClB,AAAA,AAAG,AAAOA;;AAFfvC;;;AADF,AAAA,AAAA,AAIG5B;;AAJH,AAKE,AAAA4B,AAAKf;AAAL,AAAA,AAAAe;AAAA,AACK,AAAA,AAACyC,AAAeF,AAChB,AAAA,AAAG,AAAOA;;AAFfvC;;;AALF,AAAA,AAAA,AAQG5B;;AARH,AASE,AAAA,AAACoE,AAAiBD;AAClB,AAAMnC,AAAE,AAACd,AAAO,AAAA,AAACoD,AAAKH;AAAtB,AAAA,AACGnC,AAAEA;;AAXP,AAYQ,AAACzB,AACA,AAAA,AAAkC,AAAKP,AACvCA;;;;;;;AArBvB,AAuBEiE;;;AA1BL,AAAA,AAAA,AAAMH;;AAAN,AA4BA,AAAA,AAEA,AAAA,AAAMS,AAAkB3D,AAAI4D;AAA5B,AACE,AAAA,AAAAC,AAACC;AAAD,AAAO,AAAAD,AAAAA,AAACE,AAAAA,AAAAA,AAAQ/D,AAAAA;AAAO4D;;AAEzB,AAAA,AAAMI,AACHC,AAAOC;AADV,AAEE,AAAI,AAACC,AAAOC,AAAQH;AAApB,AAAA,AAAA,AACWA,AACFC;;AACP,AAAOD,AAAOA;AACPI,AAAW,AAAA,AAACtB,AAAa,AAACvD,AAAKyE;AADtC,AAEOK;;AAFP,AAGE,AAAIL;AACF,AAAI,AAAAU,AAAS,AAACC,AAAMX;AAClB,AAAO,AAACY,AAAKZ;AAAQ,AAACa,AAAKT,AAAW,AAACO,AAAMX;AAASK;;;;;;AACtD,AAAMS,AAAO,AAAA,AAACC;AAAd,AACE,AAAO,AAACH,AAAKZ;AAAQ,AAACa,AAAKT,AAAWU;AAC3BT,AAAK,AAACQ,AAAK,AAACF,AAAMX,AAAS,AAACa,AAAKC;;;;;;;AALlD,AAAA,AAAA,AAAA,AAAA,AAAAR,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAMWL,AACMC,AACFJ;;;;;;AAErB,AAAA,AAAAe,AAAAC,AAAMM,AAAgDC,AAAsCG;AAA5F,AAAA,AAAAT,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvG,AAAA,AAAAuG,AAAA,AAAA,AAAA,AAAA,AAAAtG,AAAAC,AAAAqG,AAAAA;AAAAA,AAAiDnF;AAAjDoF,AAAA,AAAApG,AAAAmG,AAAA;AAAAE,AAAAH;AAAAI,AAAA,AAAAd,AAAAa;AAAAE,AAAA,AAAAX,AAAAU;AAAAA,AAAA,AAAAT,AAAAS;AAAAC,AAA+DG;AAA/DJ,AAAgFK;AAAhF,AACE,AAAUD;AAAV;AAAA,AACE,AAAA,AAAC/F,AAA2DyF;;;AAC9D,AAAU,AAACS,AAAQH;AAAnB;AAAA,AACE,AAAA,AAAC/F,AAAqEyF;;;AACxE,AAAMM,AAAe,AAAIE,AAAO,AAAA,AAAA,AAAA,AAAA,AAAA,AAACG,AAAoBL,AAC5BA;AACnBM,AAAW,AAAA,AAAAC,AAACC;AAAD,AAAa,AAAA,AAAA,AAAAD,AAACE;AAAWT;AACpCU,AAAY,AAACC,AAAML;AACnBM,AAAa,AAAChD,AAAO,AAAA,AAAAiD,AAACC;AAAD,AAAa,AAAA,AAAA,AAAAD,AAACJ;AAAWT;AAC9Ce,AAAU,AAAC5B,AAAKc;AAChBe,AAAM,AAAA,AAAMD,AACJ,AAAME,AAAE,AAAC/B,AAAMe;AAAf,AACE,AAAM,AAACiB,AAAKD;AAAZ,AAAeA;;AAAf;;AAFJ;AAGNhB,AAAW,AAAIe,AAAMD,AAAUd;AAC/Be,AAAM,AAAA7F,AAAI6F;AAAJ,AAAA,AAAA7F;AAAAA;;AAAU,AAACrB,AAAKkG;;;AACtBmB,AAAI,AAAA,AAAMH;AACVI,AAAK,AAAA,AAAOJ;AACZf,AAAW,AAAA,AAAApB,AAAA,AAAAC,AAAA,AAAAuC,AAAA,AAAArC,AAAA,AAAA,AAAAH,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAsC,AAAA,AAAAzC,AAAA,AAAAC,AAAA,AAAAyC,AAAA,AAAAvC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAIoC,AACW,AAAA,AAAAvC,AAAA,AAAAC,AAAA,AAAAyC,AAAA,AAAAvC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAI,AAAA,AAAK,AAAC2B,AAAMV,AACPA,AACP,AAACf,AAAMe,AAChB,AAACuB,AAAI,AAAMzF;AAAN,AAAA,AAAA8C,AAAA,AAAAC,AAAA,AAAAyC,AAAA,AAAAvC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAmBjD;AAJhC,AAAAiD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAIoCoC,AAElCnB;AACbA,AAAW,AAAIkB,AACF,AAACI,AAAO,AAACC,AAAI,AAAMzF;AAAN,AAAA,AAAA8C,AAAA,AAAAC,AAAA,AAAAyC,AAAA,AAAAvC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAmBjD;AAAIoF,AAC5BlB,AACRA;AAvBnBG,AAwB8B,AAAC9B,AAAmB0B,AAAeC;AAxBjEG,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlH,AAAA,AAAAkH,AAAA,AAAA,AAAA,AAAA,AAAAjH,AAAAC,AAAAgH,AAAAA;AAAA7B,AAAA,AAAAjF,AAAA8G,AAAA;AAAA5B,AAAA,AAAAlF,AAAA8G,AAAA;AAyBM9F,AAAI,AAAA,AAACmH,AAAOnH,AAAcoH,AAAM,AAACC,AAAOpD,AACA,AAAA,AAACqD;AACzCpD,AAAK,AAACP,AAAiB3D,AAAIkE;AA3BjC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AA4BmBA,AACED,AACKmC,AACCE,AACLb;;AAExB,AAAA,AAAA8B,AAAMI,AAAW3H,AAAmC4F;AAApD,AAAA,AAAA4B,AAAAD;AAAAE,AAAA,AAAAjD,AAAAgD;AAAAE,AAAA,AAAA9C,AAAA6C;AAAAA,AAAA,AAAA5C,AAAA4C;AAAAC,AAAsBE;AAAtBF,AAAA,AAAA9C,AAAA6C;AAAAA,AAAA,AAAA5C,AAAA4C;AAAAC,AAA0BG;AAA1BJ,AAAkCvD;AAAlCsD,AAA2CpC;AAA3C,AACE,AAAMpF,AAAI,AAAA,AAAC8H,AAAM9H,AAAaoF;AACxBK,AAAQ,AAAA,AAAI,AAAAd,AAASkD,AACXA;AAEV3D,AAAK,AAAIuB,AACFvB,AACA,AAAC6D,AAAKF,AAAM3D;AAEnB8D,AAAO,AAAA,AAAI,AAACC,AAAK,AAACrD,AAAMV,AACfA,AACCA;AACVlE,AAAI,AAAIyF,AAAQ,AAAA,AAAA,AAAA,AAACyC,AAASlI,AAAeyF,AACjCzF;AACRmI,AAAgB,AAACC,AACA,AAAAC,AAA+CnE;AAA/C,AAAA,AAAAoE,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1J,AAAA,AAAA0J,AAAA,AAAA,AAAA,AAAA,AAAAzJ,AAAAC,AAAAwJ,AAAAA;AAAAA,AAA0CG;AAA1CF,AAAA,AAAAvJ,AAAAsJ,AAAA;AAAAE,AAAA,AAAAxJ,AAAAsJ,AAAA;AAAA,AACE,AAAMI,AAAQ,AAAC9D,AAAMV;AACfA,AAAK,AAACsB,AAAoBxF,AAAIyF,AAAQvB,AAAK0B;AAC3C1B,AAAK,AAAA,AAAC4D,AAAM5D,AAAuBwE;AACnCpC,AAAa,AAAA,AAAwBpC;AACrCkC,AAAY,AAAA,AAAuBlC;AACnCyE,AAAgB,AAAA,AAAA,AAAMrC,AAAaF;AALzC,AAME,AAAM,AAAApF,AAAKsF;AAAL,AAAA,AAAAtF;AAAkBwH;;AAAlBxH;;;AAAN,AACE,AAAA,AAACrB,AAAqEyF;;AADxE;;AAEA,AAAM,AAAA,AAAApE,AAAK,AAAC8B,AAAIwD,AAAckC;AAAxB,AAAA,AAAAxH;AAAoC,AAAGoF,AAAYoC;;AAAnDxH;;AAAA;AAAN,AACE,AAAA,AAACrB,AAC0EyF;;AAF7E;;AAGIqD,AACA,AAAA,AAAA,AAACG,AAAmBD,AACF,AAAAE,AAAK,AAAA,AAAuB3E,AAE9C,AAACiD,AACD,AAACA;AAHiB2B,AACKP;AADL,AAAA,AAAAM,AAAAC,AAAAD,AAAAC;AAElB,AAAgBC,AAAK7E,AACrB,AAAkB6E,AAAKL;AAlBhC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAsBiBV;AACjCgB,AAAQ,AAAA,AAASb;AACjBc,AAAS,AAAA,AAAWd;AArC1B,AAsCE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACpF,AAAgCiG,AACFvD,AACCwD;;AAIpC,AAAA,AAAMC,AACHlJ,AAAImJ,AAA0BC;AADjC,AAEE,AAAAC,AACM,AAACjB,AACA,AAAAmB,AAAAC;AAAA,AAAA,AAAAC,AAAAF;AAAA,AAAApH,AAAAsH,AAAA,AAAA,AAAMzJ;AAAN,AAAAmC,AAAAsH,AAAA,AAAA,AAAUH;AAAVI,AAAAF;AAAA,AAAArH,AAAAuH,AAAA,AAAA,AAA6BC;AAA7B,AAAAxH,AAAAuH,AAAA,AAAA,AAA0CE;AAA1C,AACE,AAAMxI,AAAE,AAAC2C,AAAAA,AAAAA,AAAQ/D,AAAAA,AAAI4J,AAAAA;AAArB,AAAA,AACG,AAAA,AAACC,AAAO7J,AAAc0C,AAAMiH,AAAavI,AACzC,AAAC0I,AAAKR,AAAiBK,AAAavI;AAJ1C,AAAA,AAKEpB,AACD,AAAA,AAAC+J,AAAYZ;AAPpB,AAAAhH,AAAAkH,AAAA,AAAA,AAAOrJ;AAAP,AAAAmC,AAAAkH,AAAA,AAAA,AAAWC;AAAX,AAQE,AAAA,AAAA/E,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAACsF,AAAwBV,AAAmB,AAAC3F,AAAiB3D,AAAIoJ;;AAEtE;;;AAAA,AAAAa,AAAMI,AAEHrK;AAFH,AAAA,AAAAkK,AAAAD;AAAAE,AAAA,AAAA3F,AAAA0F;AAAAE,AAAA,AAAAxF,AAAAuF;AAAAA,AAAA,AAAAtF,AAAAsF;AAAAC,AAEQE;AAFRF,AAAA,AAAAxF,AAAAuF;AAAAA,AAAA,AAAAtF,AAAAsF;AAAAC,AAEaG;AAFbJ,AAE6Bf;AAF7B,AAGE,AAAMmB,AAAa,AAACC,AAAYD;AAAhC,AACE,AAACrB,AAAYlJ,AAAIuK,AAAanB;;AAElC;;;AAAA,AAAAqB,AAAMI,AAEH7K;AAFH,AAAA,AAAA0K,AAAAD;AAAAE,AAAA,AAAAnG,AAAAkG;AAAAE,AAAA,AAAAhG,AAAA+F;AAAAA,AAAA,AAAA9F,AAAA8F;AAAAC,AAEQE;AAFRH,AAEYI;AAFZ,AAGE,AAAMC,AACA,AAAOF,AAAEA;AAAGC,AAAMA;;AAAlB,AACE,AAAIA;AACF,AAAME,AAAK,AAACrG,AAAMmG;AACZG,AAAS,AAAI,AAACjD,AAAKgD,AACR,AAAClI,AAAU,AAACkE,AAAO,AAAAvC,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAM,AAACE,AAAMqG,AAAMH,AACnB,AAACjG,AAAKoG,AACvB,AAACzL,AAAKyL,AACR,AAAAvG,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAMuG,AAAKH;AAL5B,AAME,AAAOI;AAAS,AAACrG,AAAKkG;;;;;AAASD;;;;;AAT3C,AAUE,AAAC/G,AAAAA,AAAAA,AAAQ/D,AAAAA,AAAIgL,AAAAA;;AAEjB;;;AAAA,AAAAG,AAAMI,AAEHvL;AAFH,AAAA,AAAAoL,AAAAD;AAAAE,AAAA,AAAA7G,AAAA4G;AAAAE,AAAA,AAAA1G,AAAAyG;AAAAA,AAAA,AAAAxG,AAAAwG;AAAAC,AAEQE;AAFRF,AAAA,AAAA1G,AAAAyG;AAAAA,AAAA,AAAAxG,AAAAwG;AAAAC,AAEY1J;AAFZ0J,AAAA,AAAA1G,AAAAyG;AAAAA,AAAA,AAAAxG,AAAAwG;AAAAC,AAEiBG;AAFjBJ,AAEwBN;AAFxB,AAGE,AAAAW,AAAA,AAAAnH,AAAA,AAAAC,AAAA,AAAAyC,AAAA,AAAAvC,AAAA,AAAA,AAAAsC,AAAA,AAAAzC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAgC+G,AAAM7J,AACL,AAACiK,AAAW,AAACvE,AAAOmE,AAAM,AAACK,AAAQf,AACrC,AAAI,AAACgB,AAAOhB,AACVU,AACA,AAACO,AAAKjB;AAJvCY,AAAA,AAAAnH,AAAAkH;AAAAE,AAAA,AAAAhH,AAAA+G;AAAAA,AAAA,AAAA9G,AAAA8G;AAAAC,AAAOrB;AAAPoB,AAAsBzH;AAAtB,AAKE,AAACgF,AAAYlJ,AAAIuK,AAAarG;;AAElC,AAAA,AAEA,AAAA,AAAA+H,AAAME,AACHnM;AADH,AAAA,AAAAkM,AAAAD;AAAA,AAAA9J,AAAA+J,AAAA,AAAA,AACQE;AADR,AAAAjK,AAAA+J,AAAA,AAAA,AACaG;AADb,AAAAlK,AAAA+J,AAAA,AAAA,AACsBI;AADtB,AAAAnK,AAAA+J,AAAA,AAAA,AACiCK;AADjCL,AAC2CtK;AAD3C,AAEE,AAAA4K,AAAgBxM;AAAhByM,AAAA,AAAA,AAAyBJ;AAAzB,AAAA,AAAAG,AAAAC,AAAAD,AAAAC,AAACC,AAAAA,AAAAA;;AACD,AAAU,AAACC,AAAeN;AAA1B;AAAA,AACE,AAAA,AAAC1M,AAA8DiC;;;AACjE,AAAMgL,AAAU,AAAA,AAAA,AAAML,AAAMD;AACtBO,AAAK,AAAID,AAAUL,AAAMD;AACzBO,AAAK,AAAA,AAAI,AAAA,AAAC5L,AAAE,AAACoF,AAAMzE,AAEZ,AAACmC,AAAAA,AAAAA,AAAQ/D,AAAAA,AAAI6M,AAAAA;AACpBhL,AAAE,AAACrC,AAAK6M;AACRxK,AAAE,AAACkC,AAAAA,AAAAA,AAAQ/D,AAAAA,AAAI6B,AAAAA;AACfA,AAAE,AAAA,AAAA,AAAA3B,AAAC4H,AAAMjG,AAAOiL;AAChBjL,AAAE,AAAI+K,AAAU,AAAA,AAAC9E,AAAMjG,AAAO+K,AAAW/K;AACzCwK,AAAS,AAACtJ,AAAUsJ,AAASxK;AATnC,AAUE,AAAAkL,AAAgB/M;AAAhBgN,AAAA,AAAA,AAAyBX;AAAzB,AAAA,AAAAU,AAAAC,AAAAD,AAAAC,AAACN,AAAAA,AAAAA;;AACD,AAAC1C,AAAe,AAAAtF,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAW2H,AAASQ;;AAExC,AAAA,AAAAI,AAAMI,AAAarN;AAAnB,AAAA,AAAAkN,AAAAD;AAAAE,AAAA,AAAA3I,AAAA0I;AAAAE,AAAA,AAAAxI,AAAAuI;AAAAA,AAAA,AAAAtI,AAAAsI;AAAAC,AAAwBE;AAAxBF,AAAA,AAAAxI,AAAAuI;AAAAA,AAAA,AAAAtI,AAAAsI;AAAAC,AAA2B3H;AAA3B0H,AAAqCjJ;AAArCgJ,AAA8CtL;AAA9C,AACE,AAAU,AAAC+K,AAAelH;AAA1B;AAAA,AACE,AAAA,AAAC9F,AAA8DiC;;;AACjE,AAAA2L,AAAgBvN;AAAhBwN,AAAA,AAAA,AAAyB/H;AAAzB,AAAA,AAAA8H,AAAAC,AAAAD,AAAAC,AAACd,AAAAA,AAAAA;;AACD,AAAM9G,AAAO,AAAA,AAAC3E,AAAa,AAACT,AAAK8M;AAAjCG,AACsB,AAACE,AAAW,AAACC,AAAK9K,AAAI+K,AAAa3J;AADzD,AAAA/B,AAAAsL,AAAA,AAAA,AACOC;AADP,AAAAvL,AAAAsL,AAAA,AAAA,AACgBvJ;AACVtB,AAAE,AAAA,AAAA,AAAM,AAACmJ,AAAO7H,AACZ,AAAA,AAACvE,AAA2DiC;AAChEgL,AAAU,AAAAzL,AAAc,AAACyD,AAAM8I;AAArB,AAAA,AAAAvM;AAAA,AAAA,AAAAA,AAAW2M;AAAX,AACE,AAAM,AAASA;AAAf,AAAmBA;;AAAnB;;;AADF;;;AAEVC,AAAS,AAAA5M,AAAa,AAAC6K,AAAK0B;AAAnB,AAAA,AAAAvM;AAAA,AAAA,AAAAA,AAAWU;AAAX,AACE,AAAM,AAAC+E,AAAK/E;AAAZ,AAAeA;;AAAf;;;AADF;;;AAETkM,AAAS,AAAAC,AAAShO;AAATiO,AAAa,AAACC,AAAM,AAAC1O,AAAKoC,AAAMmM;AAAhC,AAAA,AAAAC,AAAAC,AAAAD,AAAAC,AAAClK,AAAAA,AAAAA;;AACVoK,AAAQ,AAACpL,AAAU,AAAA,AAAA,AAACgF,AAAS7D,AACnB,AAAC1E,AAAKoC;AAChBwM,AAAE,AAACzG,AAAU3H,AAAImO,AAAQvI;AACzBqD,AAAS,AAACzE,AAAI,AAAA,AAAoB4J;AAClCL,AAAS,AAAA,AAAA,AAAA7N,AAAA,AAAC0I,AAAMmF,AACKjB,AACK7D;AAC1BxD,AAAQ,AAAC1C,AAAU0C,AACT,AAAA4I,AAAQN;AAARM,AAAA,AAAAA,AACEzB,AAAU,AAAAyB,AAAA,AAACvG,AAAW8E;AADxB,AAAA,AAEEhH;AAAO,AAAAyI,AAAA,AAAA,AAACvG;;AAFVuG;;;AAGVD,AAAE,AAAA,AAAA,AAACxF,AAAMwF,AACWxI,AACOH;AAtBjC,AAuBE,AAACuE,AAAe,AAAAtF,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAWe,AAAQ2I;;AAEvC,AAAA;;;AAAA,AAAApL,AAAM2L;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAME,AAEHhN,AAAOoN;AAFV,AAAA;;;AAAA,AAAA,AAAA,AAAMJ;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA,AAAAjK,AAAAgK;AAAAA,AAAA,AAAA/J,AAAA+J;AAAA,AAAA,AAAAE,AAAA;AAAA,AAAA,AAAAA,AAAAD,AAAAD;;;AAAA,AAIA,AAAA,AAAMI,AACHhP,AAAI4B;AADP,AAEE,AAAMsN,AAAG,AAAC5L,AAAO1B;AACXuN,AAAU,AAAA,AAACC,AAAWF;AACtBG,AAAU,AAAA,AAACD,AAAW,AAACE,AAAKJ;AAFlCD,AAGgB,AAAA,AAAI,AAAC9K,AAAOC,AAAQ+K,AACjBD,AAAGC,AACJ,AAAMI,AAAK,AAAA,AAACC,AAAW,AAACnJ,AAAM8I;AAAnB,AAA+B,AAACM;;AACrCC,AAAI,AAACC,AAAIC,AAAOL,AAAKF;AACrBQ,AAAK,AAACF,AAAIC,AAAOT,AAAUI;AAFjC,AAAA,AAGG,AAAA,AAACO,AAAQC,AAAI,AAAClE,AAAW6D,AAAIG,AAAMN;;AARxD,AAAApN,AAAA8M,AAAA,AAAA,AAGOC;AAHP,AAAA/M,AAAA8M,AAAA,AAAA,AAGUM;AAMJrL,AAAK,AAAC8L,AAAMpO;AACZqO,AAAU,AAAAvL,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAWwK,AACL,AAAA,AAAA3K,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAACwL,AAAY,AAAClJ,AAAImI,AAAajL,AACxBqL;AAZ7B,AAaE,AAACxL,AAAAA,AAAAA,AAAQ/D,AAAAA,AAAIiQ,AAAAA;;AAEjB,AAAA,AAAME,AACHnQ,AAAI4B;AADP,AAEE,AAAMsC,AAAK,AAACoL,AAAK1N;AAAjB,AACE,AAACoI,AACA,AAAAtF,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AACM,AAAA0L,AAASpQ;AAATqQ,AAES,AAAA3L,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAa,AAAA,AAAA,AAACqD,AAAS7D;AAFhC,AAAA,AAAAkM,AAAAC,AAAAD,AAAAC,AAACtM,AAAAA,AAAAA;AADP,AAAA,AAAA,AAAA,AAAA;;AAKL,AAAA,AAAAuM,AAAMI,AACH1Q;AADH,AAAA,AAAAuQ,AAAAD;AAAAE,AAAA,AAAAhM,AAAA+L;AAAAE,AAAA,AAAA7L,AAAA4L;AAAAA,AAAA,AAAA3L,AAAA2L;AAAAC,AACQE;AADRH,AACcpH;AADdmH,AACwB3O;AADxB,AAEE,AAAAgP,AAAM,AAACvK,AAAM+C;AAAb,AAAA,AAAAwH;AAAA;AAAA;AACQ,AAAA,AAACjR,AAAoDiC;;;AAD7D;AAAA;AAEQ,AAAA,AAAA2C,AAAA,AAAAC,AAAA,AAAAyC,AAAA,AAAAvC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACsF,AAAwB,AAACrG,AAAiB3D,AAAIoJ;;;;AACrD,AAAA,AAACzJ,AAAqDiC;;;;AAE1D,AAAA,AAAMiP,AACH7Q,AAAI4B;AADP,AAEE,AAAMR,AAAE,AAAA0P,AAAS9Q;AAAT+Q,AAAa,AAACzN,AAAO1B;AAArB,AAAA,AAAAkP,AAAAC,AAAAD,AAAAC,AAAChN,AAAAA,AAAAA;;AACHiN,AAAQ,AAAChB,AAAMpO;AACfqP,AAAc,AAAA,AAAC7B,AAAW4B;AAC1BE,AAAe,AAACvN,AAAiB3D,AAAI,AAAA,AAACoP,AAAW,AAACE,AAAK0B;AACvDG,AAAQ,AAAA,AAAA,AAAA,AAAM,AAACC,AAAK,AAAC/K,AAAM2K,AACX,AAAAK,AAASrR;AAATsR,AAAa,AAACtF,AAAKgF;AAAnB,AAAA,AAAAK,AAAAC,AAAAD,AAAAC,AAACvN,AAAAA,AAAAA;AADT;AAERwN,AAAM,AAAC1F,AAAWoF,AAAcC;AAChCM,AAAU,AAAK3P,AAAEO,AAAEhB;AAAT,AACE,AAAA,AAAQ,AAAC1B,AAAUmC,AAAEO;AACnB,AAAC0F,AAAMjG,AAAEO,AAAEhB;;AACX,AAACzB,AAA0B,AAAA,AAAqCyC,AACrCR;;;AACzC6P,AAAS,AAAOF,AAAM,AAAC/M,AAAI+M;AAAlB,AACOG;;AADP,AAEE,AAAIH;AACF,AAAAI,AAAoBJ;AAApBK,AAAA,AAAApN,AAAAmN;AAAAE,AAAA,AAAAjN,AAAAgN;AAAAA,AAAA,AAAA/M,AAAA+M;AAAAC,AAAOzP;AAAPyP,AAAA,AAAAjN,AAAAgN;AAAAA,AAAA,AAAA/M,AAAA+M;AAAAC,AAASzQ;AAATwQ,AAAaL;AAAb,AACE,AAAI,AAACO,AAAM1P;AACT,AACCmP;AACA,AAACnJ,AAAO;AAAKK,AAAIrG;AAAT,AACE,AAACoP,AAAU/I,AAAIrG,AAAEhB;;AACnBsQ,AACAtP;;;;;AACT,AACCmP;AACA,AAACC,AAAUE,AAAQtP,AAAEhB;;;;;;AAC1BsQ;;;;;AACbK,AAAI,AAAC/H,AAAe,AAAAtF,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACiB+M,AACArQ,AACI+P,AACfA;AA/BhC,AAgCE,AAACnH,AAAe+H;;AAEpB,AAAA,AAAAC,AAAMI,AACHpS;AADH,AAAA,AAAAiS,AAAAD;AAAAE,AAAA,AAAA1N,AAAAyN;AAAAE,AAAA,AAAAvN,AAAAsN;AAAAA,AAAA,AAAArN,AAAAqN;AAAAC,AACQE;AADRH,AACehO;AADf,AAEE,AAAAoO,AAGM,AAAOlJ,AAAqC,AAAC5E,AAAIN;AAAjD,AACOyB;AADP,AAEO8M;AAFP,AAGOC;;AAHP,AAIE,AAAItJ;AACF,AAAMxH,AAAK,AAACgD,AAAMwE;AACZA,AAAM,AAACvE,AAAKuE;AADlB,AAEE,AAAM,AAAK,AAACnB,AAAKrG,AAAM,AAAA,AAAA,AAACX,AAAS,AAAC2D,AAAMhD;AAClC,AAAOwH;AAAMzD;AAAW,AAACb,AAAK2N,AAAY7Q;AAAM8Q;;;;;;;AADtD,AAEM,AAAK,AAAC5P,AAAIsG,AAAO,AAAK,AAACnB,AAAKrG,AAAM,AAAA,AAAA,AAACX,AAAW,AAAC2D,AAAMhD;AAF3D,AAGO+D,AAAW8M,AAAY7Q;;AAH9B,AAOM,AAAOwH;AAAM,AAACtE,AAAKa,AAAW/D;AAAM6Q;AAAYC;;;;;;;;;;AAV1D,AAWG/M,AAAW8M,AAAYC;;;;;AAlBlC,AAAAvQ,AAAAmQ,AAAA,AAAA,AAAO3M;AAAP,AAAAxD,AAAAmQ,AAAA,AAAA,AACOC;AADP,AAAApQ,AAAAmQ,AAAA,AAAA,AAEOE;AAiBDtO,AAAK,AAAAyO,AAAS3S;AAAT4S,AAAa,AAAA,AAAA,AAAC7K,AAASpC;AAAvB,AAAA,AAAAgN,AAAAC,AAAAD,AAAAC,AAAC7O,AAAAA,AAAAA;;AACNwO,AAAQ,AAACzO,AAAK,AAAKrC;AAAL,AACE,AAAAoR,AAA4BpR;AAA5BqR,AAAA,AAAAtO,AAAAqO;AAAAE,AAAA,AAAAnO,AAAAkO;AAAAA,AAAA,AAAAjO,AAAAiO;AAAAC,AAAOnQ;AAAPmQ,AAAA,AAAAnO,AAAAkO;AAAAA,AAAA,AAAAjO,AAAAiO;AAAAC,AAASC;AAATD,AAAA,AAAAnO,AAAAkO;AAAAA,AAAA,AAAAjO,AAAAiO;AAAAC,AAAYE;AAAZH,AAAsB5O;AAAtB,AACE,AAAArB,AAAe,AAACtB,AAAsBvB,AAAIgT;AAA1C,AAAA,AAAAnQ;AAAA,AAAAA,AAASvB;AAAT,AAAA,AAAA,AAAA,AAAA,AACUA,AACE2R,AACH,AAAAC,AAAS,AAAA,AAAA,AAAA,AAAChL,AAASlI,AAAeiT;AAAlCE,AACS,AAAA,AAAA,AAACpL,AAAS7D;AADnB,AAAA,AAAAgP,AAAAC,AAAAD,AAAAC,AAACpP,AAAAA,AAAAA;;;AAER,AAACpE,AAA0B,AAAA,AAAqCqT,AAAIA;;AAC1ET;AACdC,AAAQ,AAAA,AAAMA,AACJ,AAAAY,AAASpT;AAATqT,AAAa,AAAA,AAAA,AAACtL,AAAS,AAACuH,AAAKkD;AAA7B,AAAA,AAAAY,AAAAC,AAAAD,AAAAC,AAACtP,AAAAA,AAAAA;AADH;AA7Bd,AA+BE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAChB,AAESmB,AACGqO,AACAC;;AAGjB,AAAA,AAAAc,AAAM5G,AAAgB1M;AAAtB,AAAA,AAAAuT,AAAAD;AAAAE,AAAA,AAAAhP,AAAA+O;AAAAE,AAAA,AAAA7O,AAAA4O;AAAAA,AAAA,AAAA3O,AAAA2O;AAAAC,AAA2BC;AAA3BF,AAAsCG;AAAtCJ,AAAgDK;AAAhD,AACE,AAACC,AAAM,AAAA,AAAM7T,AACN,AAAKF;AAAL,AACE,AAAMW,AAAI,AAACC;AAAX,AACE,AAAA,AAAA,AAACoT,AAAUhU,AAAiBW,AACjB,AAAKsT;AAAL,AACE,AAAC3L,AAAO,AAAKK,AAAIgD;AAAT,AACE,AAAI,AAAC/L,AAAU+I,AAAIgD;AAGjBhD;;AACA,AAACX,AAAMW,AAAIgD,AACJ,AAAAuI,AAAM,AAAA,AAACC,AAAkB,AAACC,AAAO,AAAKzT,AACL,AAAKgL,AACjB,AAAA,AAAA,AAAA,AAAAvL,AAAA,AAAA,AAAAA,AAAC0I,AAAM,AAACpJ,AAAKiM,AACAA,AACDqB,AACEqH;AALnC,AAAA,AAAAH;;AAAAA;;;AAOXD,AACAJ;;;;AApBlC;;AAuBA,AAAA,AAAAS,AAAAC,AAAMK;AAAN,AAAA,AAAAJ,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1V,AAAA,AAAA0V,AAAA,AAAA,AAAA,AAAA,AAAAzV,AAAAC,AAAAwV,AAAAA;AAAAA,AAAmCtU;AAAnCF,AAAA,AAAAd,AAAAsV,AAAA;AAAAC,AAAAF;AAAAG,AAAA,AAAAhQ,AAAA+P;AAAAE,AAAA,AAAA7P,AAAA4P;AAAAA,AAAA,AAAA3P,AAAA2P;AAAAC,AAAyC7R;AAAzC4R,AAA6CG;AAA7CJ,AAAyE3S;AAAzE,AACE,AAAMgT,AAAM,AAAA,AAAAC,AAAC3N;AAAD,AAAM,AAAI,AAAK,AAAA2N,AAAC5M,AAAQ,AAAA,AAAA,AAAChH,AAAS,AAAA4T,AAACjQ;AAAW,AAAAiQ,AAACvR;;AAAzCuR;;AACDF;AADjB,AAEE,AAAAG,AAAA,AAAAtQ,AAAa,AAAC4D,AAAO;AAAKhH,AAAEkU;AAAP,AACE,AAAI,AAAA3Q,AAAS2Q;AACX,AAACxQ,AAAK1D,AAAE,AAACZ,AAAK8U;;AACd,AAAMC,AAAE,AAAC3Q,AAAM0Q;AAAME,AAAG,AAAClG,AAAKgG;AAA9B,AACE,AAACvP,AAAK3E,AAAE,AAAA,AAAAqU,AAACvO;AAAD,AAAM,AAAA,AAAAuO,AAAKF;AAASC;;;AAJ1C,AAKWZ;AALxBG,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQK;AAAR,AAAA,AAME,AAAMI,AAAc,AAACpV,AAAOgV;AAA5B,AACE,AAAU,AAAC/T,AAAsBvB,AAAI0V;AAArC;AAAA,AACE,AAAC/V,AAA0B,AAAA,AAAqC+V,AAAe9T;;;AACjF,AAAM+T,AAAS,AAAA,AAACC,AAAkBN;AAC5BO,AAAW,AAACC,AAAKR,AAAK,AAAA,AAAKK,AAAU,AAACtP,AAAMiP;AAC5C7U,AAAI,AAACC;AAFX,AAGE,AAAA,AAAA,AAAA,AAACqV,AAAMjW,AAAIoI,AAAsBzH,AAAa,AAACH,AAAOuV,AAAaH;;AAZzE;AAAA,AAAAZ;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAA9T,AAAA,AAAAqD,AAAAsQ;AAAA,AAAA,AAAA3T;AAAA,AAAA,AAAA2T,AAAA3T;AAAA,AAAA,AAAA,AAAA+T,AAAAJ;AAAA,AAAAK,AAAA,AAAAC,AAAAN;AAAA,AAAA,AAAA,AAAAO,AAAAP;AAAAK;AAAA,AAAA9O,AAAA8O;AAAA;;;;;;;AAAA,AAAA,AAAAvQ,AAAAkQ,AAAQQ;AAAR,AAAA,AAME,AAAMI,AAAc,AAACpV,AAAOgV;AAA5B,AACE,AAAU,AAAC/T,AAAsBvB,AAAI0V;AAArC;AAAA,AACE,AAAC/V,AAA0B,AAAA,AAAqC+V,AAAe9T;;;AACjF,AAAM+T,AAAS,AAAA,AAACC,AAAkBN;AAC5BO,AAAW,AAACC,AAAKR,AAAK,AAAA,AAAKK,AAAU,AAACtP,AAAMiP;AAC5C7U,AAAI,AAACC;AAFX,AAGE,AAAA,AAAA,AAAA,AAACqV,AAAMjW,AAAIoI,AAAsBzH,AAAa,AAACH,AAAOuV,AAAaH;;AAZzE;AAAA,AAAA,AAAA7Q,AAAAiQ;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;;AAgBJ,AAAA,AAAAkB,AAAMI,AAAYpW;AAAlB,AAAA,AAAAiW,AAAAD;AAAAE,AAAA,AAAA1R,AAAAyR;AAAAE,AAAA,AAAAvR,AAAAsR;AAAAA,AAAA,AAAArR,AAAAqR;AAAAC,AAAuBE;AAAvBF,AAAA,AAAAvR,AAAAsR;AAAAA,AAAA,AAAArR,AAAAqR;AAAAC,AAA4BG;AAA5BH,AAAA,AAAAvR,AAAAsR;AAAAA,AAAA,AAAArR,AAAAqR;AAAAC,AAA0CI;AAA1CL,AAAwDM;AAAxDP,AAAiErC;AAAjE,AACE,AAAA6C,AAA2B,AAAI,AAACxO,AAAKsO,AAAaA,AACnB,AAACxO,AAAKwO,AAAYC;AADjDE,AAAA,AAAAlS,AAAAiS;AAAAE,AAAA,AAAA/R,AAAA8R;AAAAA,AAAA,AAAA7R,AAAA6R;AAAAC,AAAOJ;AAAPG,AAAqBF;AAEfF,AAAc,AAACvS,AAAAA,AAAAA,AAAQ/D,AAAAA,AAAIsW,AAAAA;AAC3BA,AAAc,AAACM,AACAN,AACA,AAAKzU;AAAL,AACE,AAAAgB,AAAW,AAAA,AAAMhB;AAAjB,AAAA,AAAAgB;AAAA,AAAAA,AAASN;AAAT,AACE,AAAMjB,AAAM,AAAAT,AAAI,AAACU,AAAsBvB,AAAIuC;AAA/B,AAAA,AAAA1B;AAAAA;;AACI,AAAClB,AACA,AAAA,AAAqC4C,AAAGA;;;AAFzD,AAGE,AAAA,AAACuF,AAAMjG,AAAaP;;AACtBO;;;AACnB0U,AAAY,AAAC/V,AAAK+V;AAClBC,AAAK,AAAC7S,AAAiB3D,AAAIwW;AAbjC,AAAAjS,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAcMrB,AAIoBiT,AAAeC,AAAaC;AAlBtD,AAmBE,AAACxM,AAAe3G;;AAEpB;;;AAAA,AAAMwT,AAEH7W,AAAI4B;AAFP,AAGE,AAAM,AAAA,AAAG,AAACyE,AAAMzE;AAAhB,AACE,AAAO,AAAA,AAA4CuB;;AADrD;;AAGA,AAACiT,AAAWpW,AAAI4B;;AAElB;;;AAAA,AAAAkV,AAAMI,AAEHlX;AAFH,AAAA,AAAA+W,AAAAD;AAAAE,AAAA,AAAAxS,AAAAuS;AAAAE,AAAA,AAAArS,AAAAoS;AAAAA,AAAA,AAAAnS,AAAAmS;AAAAC,AAEQE;AAFRF,AAAA,AAAArS,AAAAoS;AAAAA,AAAA,AAAAnS,AAAAmS;AAAAC,AAEoBG;AAFpBJ,AAE0BR;AAF1BO,AAEmCnV;AAFnC,AAGE,AAAM,AAAA,AAAG,AAACyE,AAAMzE;AAAhB,AACE,AAAO,AAAA,AAA4CuB;;AADrD;;AAGA,AAACiT,AAAWpW,AAAI,AAAA0E,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAS0S,AAAI,AAACrP,AAAK,AAACzH,AAAO,AAAA,AAACoD,AAAK,AAAClD,AAAK2W,AAAiBX;;AAE1E,AAAA,AAAAa,AAAMI,AAAYzX;AAAlB,AAAA,AAAAsX,AAAAD;AAAAE,AAAA,AAAA/S,AAAA8S;AAAAE,AAAA,AAAA5S,AAAA2S;AAAAA,AAAA,AAAA1S,AAAA0S;AAAAC,AAAuBE;AAAvBF,AAAA,AAAA5S,AAAA2S;AAAAA,AAAA,AAAA1S,AAAA0S;AAAAC,AAA4BG;AAA5BJ,AAAwCf;AAAxC,AACE,AAAA3T,AACoD,AAACkV,AAA2B/X,AAAI2X;AADpF,AAAA,AAAA9U;AAAA,AAAA+U,AAAA/U;AAAA+U,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhZ,AAAA,AAAAgZ,AAAA,AAAA,AAAA,AAAA,AAAA/Y,AAAAC,AAAA8Y,AAAAA;AAAAA,AAC4CE;AAD5CD,AAAA,AAAA7Y,AAAA4Y,AAAA;AAAA,AAEE,AAAMpB,AAAK,AAAC7S,AAAiB3D,AAAIwW;AAAjC,AACE,AAACxM,AAAe,AAAAtF,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAA+BmT,AAAarB;;AAC9D,AAAC7W,AAA0B,AAAA,AAAqCgY,AAAWA;;;AAE/E,AAAA,AAAAK,AAAMI,AAAoBpY;AAA1B,AAAA,AAAAiY,AAAAD;AAAAE,AAAA,AAAA1T,AAAAyT;AAAAE,AAAA,AAAAvT,AAAAsT;AAAAA,AAAA,AAAArT,AAAAqT;AAAAC,AAA+BE;AAA/BH,AAAiD1B;AAAjD,AACE,AAGM8B,AAAiB,AAAC9X,AAAK6X;AACvBV,AAAU,AAAC5U,AAAU,AAACzC,AAAO,AAAA,AAACwV,AAAKwC,AACA,AAAA,AAAK,AAAOA,AACnC,AAAC9Y,AAAK6Y;AANxB,AAOE,AAACZ,AAAWzX,AAAI,AAAC+C,AAAU,AAAA,AAAA,AAACwV,AAAWZ,AAAUnB,AAC/B,AAAChX,AAAK6Y;;AAM5B,AAAA,AAAAG,AAAMI,AAAiB5Y;AAAvB,AAAA,AAAAyY,AAAAD;AAAAE,AAAA,AAAAlU,AAAAiU;AAAAE,AAAA,AAAA/T,AAAA8T;AAAAA,AAAA,AAAA7T,AAAA6T;AAAAC,AAA4BE;AAA5BF,AAAA,AAAA/T,AAAA8T;AAAAA,AAAA,AAAA7T,AAAA6T;AAAAC,AAAgCG;AAAhCJ,AAA0CtP;AAA1C,AACE,AAAU,AAAAzE,AAASmU;AAAnB;AAAA,AACE,AAAO,AACc3V,AACT,AAAA,AAA4C,AAAC4V,AAAOD;;;AAClE,AAAAE,AACM,AAAME,AAAM,AAACtU,AAAMwE;AAAnB,AACE,AAAI,AAAS8P;AAAb,AACGA,AAAM,AAACrU,AAAKuE;;AADf,AAAA,AAEOA;;;AAJf,AAAAjH,AAAA6W,AAAA,AAAA,AAAOpM;AAAP,AAAAzK,AAAA6W,AAAA,AAAA,AAAiB5P;AAAjB6P,AAOM,AAAMpX,AAAE,AAAC+C,AAAMwE;AAAf,AACE,AAAI,AAACxC,AAAK/E;AAAV,AACGA,AAAE,AAACgD,AAAKuE;;AADX,AAAA,AAEOA;;;AAVf,AAAAjH,AAAA8W,AAAA,AAAA,AAMOE;AANP,AAAAhX,AAAA8W,AAAA,AAAA,AAMgB7P;AAKV+P,AAAS,AAAIvM,AACF,AAAA,AAAC9E,AAAMqR,AAAcvM,AACrBuM;AAbjB,AAcE,AAACC,AAAepZ,AAAI8Y,AAAQK;;AAC5B,AAAO/P,AAAMA;AAAb,AACO2I;;AADP,AAEE,AAAI3I;AACF,AAAAiQ,AAAiB,AAACzU,AAAMwE;AAAxBkQ,AAAA,AAAA9U,AAAA6U;AAAAE,AAAA,AAAA3U,AAAA0U;AAAAA,AAAA,AAAAzU,AAAAyU;AAAAC,AAAOnX;AAAPkX,AAAW9C;AAAX,AACE,AAAAgD,AAAMpX;AAANoX,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA;AAEE,AAAO,AAAC3U,AAAKuE;AACN,AAACtE,AAAKiN,AACA,AAAC/H,AACA,AAACkG,AAAM,AAAC5P,AAAO,AAACE,AAAK4B,AAAIoU;;;;;;AALzC;AAMU,AAEE,AAAA,AAAAjS,AAAA,AAAAC,AAAA,AAAAyC,AAAA,AAAAvC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACgQ,AAAU1U,AAAiBwW;;AAC5B,AAAO,AAAC3R,AAAKuE;AAAO2I;;;;;;AAThC;AAUiB,AAAO,AAAClN,AAAKuE;AACN,AAACtE,AAAKiN,AACA,AAAC/H,AACA,AAAA,AAAA,AAAA,AAAA,AAACuO,AAA2B/B;;;;;;AAb3D;AAeE,AAAO,AAAC3R,AAAKuE;AAAO2I;;;;;;;AAftB,AAAA,AAAA5O,AAAA,AAAA,AAAAqW;;;;AAgBF,AAACxP,AAAe,AAAA,AAAA,AAACkG,AAAU6B;;;;;AAOnC,AAAA,AAAA2H,AAAME,AAAa5Z;AAAnB,AAAA,AAAA2Z,AAAAD;AAAA,AAAAvX,AAAAwX,AAAA,AAAA,AAAwB/W;AAAxB,AAAAT,AAAAwX,AAAA,AAAA,AAA0BtN;AAA1B,AACE,AAACwN,AAAe,AAAA,AAAA,AAAC/R,AAAM9H,AAAkCqM;;AAE3D,AAAA,AAAAyN,AAAME,AAAcha;AAApB,AAAA,AAAA+Z,AAAAD;AAAA,AAAA3X,AAAA4X,AAAA,AAAA,AAAyBnX;AAAzB,AAAAT,AAAA4X,AAAA,AAAA,AAA2B3C;AAA3B,AAAAjV,AAAA4X,AAAA,AAAA,AAA+B3Y;AAA/B,AACE,AAAMgW,AAAI,AAACrT,AAAAA,AAAAA,AAAQ/D,AAAAA,AAAIoX,AAAAA;AACjBhW,AAAE,AAAC2C,AAAAA,AAAAA,AAAQ/D,AAAAA,AAAIoB,AAAAA;AACfgW,AAAI,AAAC6C,AAAa7C;AAFxB,AAGE,AAACpN,AAAe,AAAAtF,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAY0S,AAAIhW;;AAMpC,AAAA,AAAM8Y,AAAQ9L;AAAd,AACE,AAAAjN,AAAa,AAAC3B,AAAK4O;AAAnB,AAAA,AAAAjN;AAAA,AAAA,AAAAA,AAAWU;AAAX,AACE,AAAAhB,AAAI,AAAA,AAAYgB;AAAhB,AAAA,AAAAhB;AAAAA;;AACI,AAAA,AAAQgB;;;AAFd;;;AAMF,AAAA,AAAMsY,AAAcna,AAAI4B;AAAxB,AACE,AAAMwM,AAAE,AAACxJ,AAAMhD;AAAf,AACE,AAAI,AAAA+C,AAASyJ;AACX,AAEMgM,AAAY,AAACpb,AAAIR,AAAa4P;AAC9BxL,AAAE,AAAA,AAAA,AAAMwX,AAAY,AAAClb,AAAkBc,AAAIoa,AAAYhM;AACvDA,AAAE,AAAAvN,AAAIuZ;AAAJ,AAAA,AAAAvZ;AAAAA;;AACI,AAAA,AAACuC,AAAepD,AAAIoO;;;AAC1BA,AAAE,AAAI,AAAK,AAACiM,AAAUjM,AACX,AAAAvN,AACC,AAACyZ,AAAalM;AADf,AAAA,AAAAvN;AAAAA;;AAEC,AAAA,AAAA,AAAIuN,AAAE5O;;AAHhB,AAAAU,AAAI,AAIDkO,AAAEA;AAVb,AAWE,AAAI,AAAK,AAACtL,AAAI,AAACyX,AAAMnM,AACZ,AAAAvN,AACCuZ;AADD,AAAA,AAAAvZ;AAAAA;;AAEC,AAACnB,AAAUjB,AAAO2P;;AAHxB;AAIF,AAAAoM,AAAMpM;AAAN,AAAA,AAAA,AAAAnN,AAAA,AAAA,AAAAuZ;AAgCI,AAAC3D,AAAa7W,AAAI4B;;AAhCtB,AAAA,AAAAX,AAAA,AAAA,AAAAuZ;AAmCS,AAAC9F,AAAU1U,AAAI4B;;AAnCxB,AAAA,AAAAX,AAAA,AAAA,AAAAuZ;AA4BO,AAAC3J,AAAY7Q,AAAI4B;;AA5BxB,AAAA,AAAAX,AAAA,AAAA,AAAAuZ;AAQW,AAAA,AAAC7S,AAAU3H,AAAI4B;;AAR1B,AAAA,AAAAX,AAAA,AAAA,AAAAuZ;AA2BK,AAAC9J,AAAU1Q,AAAI4B;;AA3BpB,AAAA,AAAAX,AAAA,AAAA,AAAAuZ;AAWkB,AAAMzI,AAAI,AAAC1E,AAAYrN,AAAI4B;AAA3B,AACEmQ;;AAZpB,AAAA,AAAA9Q,AAAA,AAAA,AAAAuZ;AAWkB,AAAMzI,AAAI,AAAC1E,AAAYrN,AAAI4B;AAA3B,AACEmQ;;AAZpB,AAAA,AAAA9Q,AAAA,AAAA,AAAAuZ;AAmBU,AAACC,AAAeza,AAAI4B;;AAnB9B,AAAA,AAAAX,AAAA,AAAA,AAAAuZ;AAKK,AAACxQ,AAAe,AAAA,AAAA,AAACjC,AACK,AAACpE,AAAiB3D,AAAI,AAACsP,AAAK1N;;AANvD,AAAA,AAAAX,AAAA,AAAA,AAAAuZ;AAoBO,AAACxL,AAAYhP,AAAI4B;;AApBxB,AAAA,AAAAX,AAAA,AAAA,AAAAuZ;AA0BQ,AAAAG,AAAS3a;AAAT4a,AAAa,AAACC,AAAa7a,AAAI4B;AAA/B,AAAA,AAAA+Y,AAAAC,AAAAD,AAAAC,AAAC7W,AAAAA,AAAAA;;AA1BT,AAAA,AAAA9C,AAAA,AAAA,AAAAuZ;AAiCqB,AAACpC,AAAmBpY,AAAI4B;;AAjC7C,AAAA,AAAAX,AAAA,AAAA,AAAAuZ;AASM,AAACrO,AAAWnM,AAAI4B;;AATtB,AAAA,AAAAX,AAAA,AAAA,AAAAuZ;AA8BU,AAAC9N,AAAe1M,AAAI4B;;AA9B9B,AAAA,AAAAX,AAAA,AAAA,AAAAuZ;AAiBQ,AAAA;AAAQ,AAAClX,AAAO1B;;AAjBxB,AAAA,AAAAX,AAAA,AAAA,AAAAuZ;AA+Bc,AAACtD,AAAYlX,AAAI4B;;AA/B/B,AAAA,AAAAX,AAAA,AAAA,AAAAuZ;AAoCK,AAAC5B,AAAgB5Y,AAAI4B;;AApC1B,AAAA,AAAAX,AAAA,AAAA,AAAAuZ;AAsBM,AAAMnX,AAAI,AAACqX,AAAW1a,AAAI4B;AAA1B,AACE,AAAI,AAAA,AAA0B5B;AAC5BqD;;AACA,AAACU,AAAAA,AAAAA,AAAQ/D,AAAAA,AAAIqD,AAAAA;;;AAzBvB,AAAA,AAAApC,AAAA,AAAA,AAAAuZ;AAOM,AAACnQ,AAAWrK,AAAI4B;;AAPtB,AAAA,AAAAX,AAAA,AAAA,AAAAuZ;AAQW,AAAA,AAAC7S,AAAU3H,AAAI4B;;AAR1B,AAAA,AAAAX,AAAA,AAAA,AAAAuZ;AAsCO,AAACR,AAAaha,AAAI4B;;AAtCzB,AAAA,AAAAX,AAAA,AAAA,AAAAuZ;AAkCM,AAAC/C,AAAWzX,AAAI4B;;AAlCtB,AAAA,AAAAX,AAAA,AAAA,AAAAuZ;AAcK,AAAC3P,AAAS7K,AAAI,AAACsP,AAAK1N;;AAdzB,AAAA,AAAAX,AAAA,AAAA,AAAAuZ;AAqCM,AAACZ,AAAY5Z,AAAI4B;;AArCvB,AAAA,AAAAX,AAAA,AAAA,AAAAuZ;AAgBO,AAACjP,AAAYvL,AAAI4B;;AAhBxB,AAAA,AAAAX,AAAA,AAAA,AAAAuZ;AAqBW,AAACrK,AAAgBnQ,AAAI4B;;AArBhC,AAAA,AAAAX,AAAA,AAAA,AAAAuZ;AA6BM,AAACpI,AAAWpS,AAAI4B;;AA7BtB,AA0CE,AAACoI,AAAe,AAACjC,AAAKqG,AAAE,AAACzK,AAAiB3D,AAAI,AAACsP,AAAK1N;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACtD,AAAA,AACE,AAAI,AAACsY,AAAO9L;AACV,AAAM2M,AAAW,AAAAC,AAAA;AAAAC,AACe,AAAA,AAAc,AAACzb,AAAK4O;AADnC,AAAA,AAAA4M,AAAAC,AAAAD,AAAAC,AAAC1b,AAAAA,AAAAA;;AAEZ6B,AAAE,AAAI2Z,AACF,AAACG,AAAM9M,AAAExM,AACF,AAAA,AAAW5B,AACXA,AACA,AAACsP,AAAK1N,AACb,AAACuZ,AAAM/M,AAAExM,AACF,AAAA,AAAW5B,AAAK,AAACsP,AAAK1N;AACjCoJ,AAAS,AAAI,AAAA,AAA0BhL,AAC5BoB,AACA,AAAC2C,AAAAA,AAAAA,AAAQ/D,AAAAA,AAAIoB,AAAAA;AAX9B,AAYE4J;;AACF,AAAChB,AAAe,AAACjC,AAAKqG,AAAE,AAACzK,AAAiB3D,AAAI,AAACsP,AAAK1N;;AAfxD,AAAA,AAAAkZ,AAgBiC3X;AAhBjC,AAAA2X,AAgB2CnU;AAhB3C,AAiBI,AAACyU,AAA8Bpb,AAAI2G,AAAE/E;;AAjBzC,AAAA,AAAAkZ;;;;;AAkBJ,AAAM/I,AAAI,AAAC/H,AAAe,AAACrG,AAAiB3D,AAAI4B;AAAhD,AACEmQ;;;AAER,AAAA,AAAMhO,AACH/D,AAAI4B;AADP,AAGE,AAAMmQ,AAAI,AAAA,AAAM,AAACsJ,AAAUzZ,AAAMA,AACjB,AAAA+C,AAAS/C,AAAM,AAAMR,AAAE,AAAA,AAACgC,AAAepD,AAAI4B;AAA5B,AACE,AAAM,AAACyZ,AAAUja;AAAGA;;AAApB,AAEM,AAACiZ,AAAUjZ;AAAG,AAAI,AAAA,AAAQ,AAAC5B,AAAK4B;AAAlB,AAAAlB,AACGkB;;AAAE,AAACka,AAAgBla;;;AAH1C,AAIY,AAACma,AAAWna,AAAE,AAAC5B,AAAKoC;;;;AANvD,AAQM,AAAC2Z,AACA,AAAA,AAAA,AAAA,AACE,AAAC3U,AAAKhF,AACN,AAAI,AAACyF,AAAO,AAAC1D,AAAiB3D,AAAI,AAACwb,AAAK5Z,AAC5B,AAAC+B,AAAiB3D,AAAI,AAACyb,AAAK7Z,AACpC8Z,AACJ,AAAI,AAAC7V,AAAQjE,AAAM,AAAC+Z,AAAK/Z,AACzB,AAAI,AAACmE,AAAK,AAAC6V,AAAMha,AAAM,AAAC+B,AAAiB3D,AAAI4B,AACzC8Z,AACJ,AAAK,AAACzT,AAAKrG,AAAM,AAAC4C,AAAI5C,AACtB,AAACuY,AAAana,AAAI4B,AACZA;AACR,AAAA,AAAA,AAAA,AAAA,AAACia,AAAY,AAACrc,AAAKoC;;AApBpC,AAuBEmQ;;AAIJ","names":["sci.impl.analyzer/special-syms","sci.impl.analyzer/macros","p__58098","map__58099","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","allow","cljs.core.get.cljs$core$IFn$_invoke$arity$2","deny","sci.impl.analyzer/check-permission!","check-sym","sym","G__58101","G__58102","sci.impl.utils/kw-identical?","cljs.core/meta","sci.impl.utils/strip-core-ns","cljs.core/contains?","sci.impl.utils.throw_error_with_location.cljs$core$IFn$_invoke$arity$2","p__58103","map__58104","env","sci.impl.analyzer/lookup*","ctx","call?","cljs.core/deref","sym-ns","G__58106","cljs.core/namespace","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","sym-name","cljs.core/name","cnn","sci.impl.vars/current-ns-name","the-current-ns","G__58107","or__4185__auto__","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs.core/find","and__4174__auto__","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","G__58109","temp__5735__auto__","v","G__58111","clazz","sci.impl.interop/resolve-class","G__58113","c","sci.impl.analyzer/tag","_ctx","expr","m","p__58117","map__58118","bindings","sci.impl.analyzer/lookup","vec__58120","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","k","kv","vec__58134","t","sci.impl.utils/mark-resolve-sym","cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","vec__58139","_","temp__5733__auto__","cljs.core/not","cljs.core/with-meta","var_args","G__58145","sci.impl.analyzer/resolve-symbol","js/Error","sci.impl.analyzer.resolve_symbol.cljs$core$IFn$_invoke$arity$3","res","cljs.core/second","n","clojure.string/starts-with?","clojure.string/ends-with?","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","sci.impl.analyzer/analyze-children","children","p1__58149#","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","sci.impl.analyzer/analyze","sci.impl.analyzer/maybe-destructured","params","body","cljs.core/every?","cljs.core/symbol?","new-params","lets","cljs.core.sequence.cljs$core$IFn$_invoke$arity$1","cljs.core/seq","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","cljs.core/List","cljs.core/Symbol","cljs.core/first","cljs.core/next","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","gparam","cljs.core.gensym.cljs$core$IFn$_invoke$arity$1","p__58159","p__58160","map__58161","fn-expr","vec__58162","seq__58163","first__58164","sci.impl.analyzer/expand-fn-args+body","fn-name","binding-vector","body-exprs","macro?","cljs.core/vector?","map__58167","cljs.core.into.cljs$core$IFn$_invoke$arity$2","fixed-args","p1__58153#","cljs.core.take_while.cljs$core$IFn$_invoke$arity$2","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","fixed-arity","cljs.core/count","var-arg-name","p1__58154#","cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2","next-body","conds","e","cljs.core/map?","pre","post","cljs.core.concat.cljs$core$IFn$_invoke$arity$1","cljs.core/vec","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/merge","cljs.core/zipmap","cljs.core.repeat.cljs$core$IFn$_invoke$arity$1","p__58174","vec__58175","seq__58176","first__58177","sci.impl.analyzer/expand-fn","_fn","name?","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/cons","bodies","cljs.core/seq?","cljs.core/assoc-in","analyzed-bodies","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__58178","map__58179","max-fixed","min-varargs","acc","arglist","new-min-varargs","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","x__4273__auto__","y__4274__auto__","cljs.core/conj","arities","arglists","sci.impl.analyzer/expand-let*","destructured-let-bindings","exprs","vec__58181","new-let-bindings","p__58184","p__58185","vec__58186","vec__58189","binding-name","binding-value","cljs.core.update.cljs$core$IFn$_invoke$arity$5","cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic","cljs.core.partition.cljs$core$IFn$_invoke$arity$2","sci.impl.utils/mark-eval-call","p__58192","vec__58193","seq__58194","first__58195","sci.impl.analyzer/expand-let","_let","let-bindings","sci.impl.destructure/destructure","p__58196","vec__58197","seq__58198","first__58199","sci.impl.analyzer/expand->","x","forms","expanded","form","threaded","p__58200","vec__58201","seq__58202","first__58203","sci.impl.analyzer/expand-as->","_as","name","vec__58204","seq__58205","first__58206","cljs.core.interleave.cljs$core$IFn$_invoke$arity$2","cljs.core/butlast","cljs.core/empty?","cljs.core/last","p__58207","vec__58208","sci.impl.analyzer/expand-def","_def","var-name","?docstring","?init","G__58211","G__58212","sci.impl.analyzer/expand-declare","cljs.core/simple-symbol?","docstring","init","sci.impl.vars/current-ns","G__58216","G__58217","p__58218","vec__58219","seq__58220","first__58221","sci.impl.analyzer/expand-defn","op","G__58225","G__58226","vec__58230","pre-body","cljs.core/split-with","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core/sequential?","ds","meta-map","G__58233","G__58234","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","fn-body","f","G__58235","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","sci.impl.analyzer/expand-comment","seq58236","G__58237","self__4776__auto__","_body","sci.impl.analyzer/expand-loop","vec__58238","bv","arg-names","cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2","init-vals","cljs.core/rest","syms","cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2","cljs.core.gensym.cljs$core$IFn$_invoke$arity$0","bv1","cljs.core.map.cljs$core$IFn$_invoke$arity$3","cljs.core/vector","bv2","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core/cat","cljs.core/nnext","expansion","cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2","sci.impl.analyzer/expand-lazy-seq","G__58247","G__58248","p__58249","vec__58250","seq__58251","first__58252","sci.impl.analyzer/expand-if","_if","G__58253","sci.impl.analyzer/expand-case","G__58254","G__58255","clauses","match-clauses","result-clauses","default","cljs.core/odd?","G__58256","G__58257","cases","assoc-new","case-map","ret-map","vec__58261","seq__58262","first__58263","cljs.core/list?","ret","p__58264","vec__58265","seq__58266","first__58267","sci.impl.analyzer/expand-try","_try","vec__58268","catches","finally","catch-exprs","finally-expr","G__58271","G__58272","vec__58273","seq__58274","first__58275","ex","binding","G__58276","G__58277","G__58278","G__58279","p__58282","vec__58283","seq__58284","first__58285","_declare","names","_expr","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","current-ns","G__58287","sci.impl.vars/->SciVar","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","sci.impl.vars/current-file","p__58291","p__58292","map__58293","vec__58294","seq__58295","first__58296","sci.impl.analyzer/do-import","import-symbols-or-lists","specs","p1__58289#","seq__58300","chunk__58301","count__58302","i__58303","cljs.core/chunked-seq?","c__4609__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","spec","p","cs","p1__58290#","fq-class-name","last-dot","clojure.string.last_index_of.cljs$core$IFn$_invoke$arity$2","class-name","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","p__58311","vec__58312","seq__58313","first__58314","sci.impl.analyzer/expand-dot","_dot","instance-expr","method-expr","args","vec__58315","seq__58316","first__58317","sci.impl.utils/vary-meta*","sci.impl.analyzer/expand-dot**","p__58321","vec__58322","seq__58323","first__58324","sci.impl.analyzer/expand-dot*","method-name","obj","p__58327","vec__58328","seq__58329","first__58330","sci.impl.analyzer/expand-new","_new","class-sym","map__58331","constructor","_opts","sci.impl.interop/resolve-class-opts","p__58333","vec__58334","seq__58335","first__58336","sci.impl.analyzer/expand-constructor","constructor-sym","constructor-name","cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3","p__58337","vec__58338","seq__58339","first__58340","sci.impl.analyzer/analyze-ns-form","_ns","ns-name","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","vec__58341","vec__58344","fexpr","attr-map","sci.impl.utils/set-namespace!","vec__58351","seq__58352","first__58353","G__58354","cljs.core/Keyword","p__58355","vec__58356","sci.impl.analyzer/analyze-var","sci.impl.analyzer.resolve_symbol.cljs$core$IFn$_invoke$arity$2","p__58359","vec__58360","sci.impl.analyzer/analyze-set!","sci.impl.types/getVal","sci.impl.analyzer/macro?","sci.impl.analyzer/analyze-call","special-sym","sci.impl.vars/var?","sci.impl.vars/isMacro","sci.impl.utils/eval?","G__58369","sci.impl.analyzer.expand_comment.cljs$core$IFn$_invoke$arity$variadic","sci.impl.for-macro/expand-for","G__58374","G__58375","sci.impl.doseq-macro/expand-doseq","e58379","needs-ctx?","G__58380","G__58381","cljs.core.apply.cljs$core$IFn$_invoke$arity$5","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","sci.impl.utils/rethrow-with-location-of-node","sci.impl.utils/constant?","sci.impl.types/->EvalVar","sci.impl.utils/merge-meta","cljs.core/keys","cljs.core/vals","sci.impl.utils/mark-eval","cljs.core/set?","cljs.core/empty","cljs.core/select-keys"],"sourcesContent":["(ns sci.impl.analyzer\n  {:no-doc true}\n  (:refer-clojure :exclude [destructure macroexpand macroexpand-all macroexpand-1])\n  (:require\n   [clojure.string :as str]\n   [sci.impl.destructure :refer [destructure]]\n   [sci.impl.doseq-macro :refer [expand-doseq]]\n   [sci.impl.for-macro :refer [expand-for]]\n   [sci.impl.interop :as interop]\n   [sci.impl.types :as types]\n   [sci.impl.utils :as utils :refer\n    [eval? mark-resolve-sym mark-eval mark-eval-call constant?\n     rethrow-with-location-of-node throw-error-with-location\n     merge-meta kw-identical? strip-core-ns set-namespace!]]\n   [sci.impl.vars :as vars]))\n\n;; derived from (keys (. clojure.lang.Compiler specials))\n;; (& monitor-exit case* try reify* finally loop* do letfn* if clojure.core/import* new deftype* let* fn* recur set! . var quote catch throw monitor-enter def)\n(def special-syms '#{try finally do if new recur quote catch throw def . var set!})\n\n;; Built-in macros.\n\n(def macros '#{do if and or -> as-> quote quote* let fn fn* def defn\n               comment loop lazy-seq for doseq case try defmacro\n               declare expand-dot* expand-constructor new . import in-ns ns var\n               set! resolve macroexpand-1 macroexpand the-ns})\n\n(defn check-permission! [{:keys [:allow :deny]} check-sym sym]\n  (when-not (kw-identical? :allow (-> sym meta :line))\n    (let [check-sym (strip-core-ns check-sym)]\n      (when-not (if allow (contains? allow check-sym)\n                    true)\n        (throw-error-with-location (str sym \" is not allowed!\") sym))\n      (when (if deny (contains? deny check-sym)\n                false)\n        (throw-error-with-location (str sym \" is not allowed!\") sym)))))\n\n(defn lookup* [{:keys [:env] :as ctx} sym call?]\n  (let [sym-ns (some-> (namespace sym) symbol)\n        sym-name (symbol (name sym))\n        env @env\n        cnn (vars/current-ns-name)\n        the-current-ns (-> env :namespaces cnn)\n        ;; resolve alias\n        sym-ns (when sym-ns (or (get-in the-current-ns [:aliases sym-ns])\n                                sym-ns))]\n    (or (find the-current-ns sym) ;; env can contain foo/bar symbols from bindings\n        (cond\n          (and sym-ns (or (= sym-ns 'clojure.core) (= sym-ns 'cljs.core)))\n          (or (some-> env :namespaces (get 'clojure.core) (find sym-name))\n              (when-let [v (when call? (get macros sym-name))]\n                [sym v]))\n          sym-ns\n          (or (some-> env :namespaces sym-ns (find sym-name))\n              (when-let [clazz (interop/resolve-class ctx sym-ns)]\n                [sym ^{:sci.impl/op :static-access} [clazz sym-name]]))\n          :else\n          ;; no sym-ns, this could be a symbol from clojure.core\n          (when-not (contains?\n                     (get-in the-current-ns [:refer 'clojure.core :exclude]) sym-name)\n            (or\n             (some-> env :namespaces (get 'clojure.core) (find sym-name))\n             (when (when call? (get macros sym))\n               [sym sym])\n             (when-let [c (interop/resolve-class ctx sym)]\n               [sym c])))))))\n\n(defn tag [_ctx expr]\n  (when-let [m (meta expr)]\n    (:tag m)))\n\n(defn lookup [{:keys [:bindings] :as ctx} sym call?]\n  (let [[k v :as kv]\n        (or\n         ;; bindings are not checked for permissions\n         (when-let [[k v]\n                    (find bindings sym)]\n           ;; never inline a binding at macro time!\n           (let [t (tag ctx v)\n                 v (mark-resolve-sym k)\n                 ;; pass along tag of expression!\n                 v (if t (vary-meta v\n                                    assoc :tag t)\n                       v)]\n             [k v]))\n         (when-let\n             [[k _ :as kv]\n              (or\n               (lookup* ctx sym call?)\n               #_(when (= 'recur sym)\n                   [sym sym]))]\n           (check-permission! ctx k sym)\n           kv))]\n    ;; (prn 'lookup sym '-> res)\n    (if-let [m (and (not (:sci.impl/prevent-deref ctx))\n                    (meta k))]\n      (if (:sci.impl/deref! m)\n        ;; the evaluation of this expression has been delayed by\n        ;; the caller and now is the time to deref it\n        [k (with-meta [v]\n             {:sci.impl/op :deref!})]\n        kv)\n      kv)))\n\n(defn resolve-symbol\n  ([ctx sym] (resolve-symbol ctx sym false))\n  ([ctx sym call?]\n   (let [sym sym ;; (strip-core-ns sym)\n         res (second\n              (or\n               (lookup ctx sym call?)\n               ;; TODO: check if symbol is in macros and then emit an error: cannot take\n               ;; the value of a macro\n               (let [n (name sym)]\n                 (cond\n                   (and call?\n                        (str/starts-with? n \".\")\n                        (> (count n) 1))\n                   [sym 'expand-dot*] ;; method invocation\n                   (and call?\n                        (str/ends-with? n \".\")\n                        (> (count n) 1))\n                   [sym 'expand-constructor]\n                   (str/starts-with? n \"'\") ;; TODO: deprecated?\n                   (let [v (symbol (subs n 1))]\n                     [v v])\n                   :else (throw-error-with-location\n                          (str \"Could not resolve symbol: \" (str sym))\n                          sym)))))]\n     ;; (prn 'resolve sym '-> res (meta res))\n     res)))\n\n(declare analyze)\n\n(defn analyze-children [ctx children]\n  (mapv #(analyze ctx %) children))\n\n(defn maybe-destructured\n  [params body]\n  (if (every? symbol? params)\n    {:params params\n     :body body}\n    (loop [params params\n           new-params (with-meta [] (meta params))\n           lets []]\n      (if params\n        (if (symbol? (first params))\n          (recur (next params) (conj new-params (first params)) lets)\n          (let [gparam (gensym \"p__\")]\n            (recur (next params) (conj new-params gparam)\n                   (-> lets (conj (first params)) (conj gparam)))))\n        {:params new-params\n         :body [`(let ~lets\n                   ~@body)]}))))\n\n(defn expand-fn-args+body [{:keys [:fn-expr] :as ctx} fn-name [binding-vector & body-exprs] macro?]\n  (when-not binding-vector\n    (throw-error-with-location \"Parameter declaration missing.\" fn-expr))\n  (when-not (vector? binding-vector)\n    (throw-error-with-location \"Parameter declaration should be a vector\" fn-expr))\n  (let [binding-vector (if macro? (into ['&form '&env] binding-vector)\n                           binding-vector)\n        fixed-args (take-while #(not= '& %) binding-vector)\n        fixed-arity (count fixed-args)\n        var-arg-name (second (drop-while #(not= '& %) binding-vector))\n        next-body (next body-exprs)\n        conds (when next-body\n                (let [e (first body-exprs)]\n                  (when (map? e) e)))\n        body-exprs (if conds next-body body-exprs)\n        conds (or conds (meta binding-vector))\n        pre (:pre conds)\n        post (:post conds)\n        body-exprs (if post\n                     `((let [~'% ~(if (< 1 (count body-exprs))\n                                    `(do ~@body-exprs)\n                                    (first body-exprs))]\n                         ~@(map (fn* [c] `(assert ~c)) post)\n                         ~'%))\n                     body-exprs)\n        body-exprs (if pre\n                     (concat (map (fn* [c] `(assert ~c)) pre)\n                             body-exprs)\n                     body-exprs)\n        {:keys [:params :body]} (maybe-destructured binding-vector body-exprs)\n        ctx (update ctx :bindings merge (zipmap params\n                                                (repeat nil)))\n        body (analyze-children ctx body)]\n    #:sci.impl{:body body\n               :params params\n               :fixed-arity fixed-arity\n               :var-arg-name var-arg-name\n               :fn-name fn-name}))\n\n(defn expand-fn [ctx [_fn name? & body :as fn-expr] macro?]\n  (let [ctx (assoc ctx :fn-expr fn-expr)\n        fn-name (if (symbol? name?)\n                  name?\n                  nil)\n        body (if fn-name\n               body\n               (cons name? body))\n        ;; fn-name (or fn-name (gensym* \"fn\"))\n        bodies (if (seq? (first body))\n                 body\n                 [body])\n        ctx (if fn-name (assoc-in ctx [:bindings fn-name] nil)\n                ctx)\n        analyzed-bodies (reduce\n                         (fn [{:keys [:max-fixed :min-varargs] :as acc} body]\n                           (let [arglist (first body)\n                                 body (expand-fn-args+body ctx fn-name body macro?)\n                                 body (assoc body :sci.impl/arglist arglist)\n                                 var-arg-name (:sci.impl/var-arg-name body)\n                                 fixed-arity (:sci.impl/fixed-arity body)\n                                 new-min-varargs (when var-arg-name fixed-arity)]\n                             (when (and var-arg-name min-varargs)\n                               (throw-error-with-location \"Can't have more than 1 variadic overload\" fn-expr))\n                             (when (and (not var-arg-name) min-varargs (> fixed-arity min-varargs))\n                               (throw-error-with-location\n                                \"Can't have fixed arity function with more params than variadic function\" fn-expr))\n                             (-> acc\n                                 (assoc :min-varargs new-min-varargs\n                                        :max-fixed (max (:sci.impl/fixed-arity body)\n                                                        max-fixed))\n                                 (update :bodies conj body)\n                                 (update :arglists conj arglist))))\n                         {:bodies []\n                          :arglists []\n                          :min-var-args nil\n                          :max-fixed -1} bodies)\n        arities (:bodies analyzed-bodies)\n        arglists (:arglists analyzed-bodies)]\n    (with-meta #:sci.impl{:fn-bodies arities\n                          :fn-name fn-name\n                          :arglists arglists\n                          :fn true}\n      {:sci.impl/op :fn})))\n\n(defn expand-let*\n  [ctx destructured-let-bindings exprs]\n  (let [[ctx new-let-bindings]\n        (reduce\n         (fn [[ctx new-let-bindings] [binding-name binding-value]]\n           (let [v (analyze ctx binding-value)]\n             [(update ctx :bindings assoc binding-name v)\n              (conj new-let-bindings binding-name v)]))\n         [ctx []]\n         (partition 2 destructured-let-bindings))]\n    (mark-eval-call `(~'let ~new-let-bindings ~@(analyze-children ctx exprs)))))\n\n(defn expand-let\n  \"The let macro from clojure.core\"\n  [ctx [_let let-bindings  & exprs]]\n  (let [let-bindings (destructure let-bindings)]\n    (expand-let* ctx let-bindings exprs)))\n\n(defn expand->\n  \"The -> macro from clojure.core.\"\n  [ctx [x & forms]]\n  (let [expanded\n        (loop [x x, forms forms]\n          (if forms\n            (let [form (first forms)\n                  threaded (if (seq? form)\n                             (with-meta (concat (list (first form) x)\n                                                (next form))\n                               (meta form))\n                             (list form x))]\n              (recur threaded (next forms))) x))]\n    (analyze ctx expanded)))\n\n(defn expand-as->\n  \"The ->> macro from clojure.core.\"\n  [ctx [_as expr name & forms]]\n  (let [[let-bindings & body] `([~name ~expr\n                                 ~@(interleave (repeat name) (butlast forms))]\n                                ~(if (empty? forms)\n                                   name\n                                   (last forms)))]\n    (expand-let* ctx let-bindings body)))\n\n(declare expand-declare)\n\n(defn expand-def\n  [ctx [_def var-name ?docstring ?init :as expr]]\n  (expand-declare ctx [nil var-name])\n  (when-not (simple-symbol? var-name)\n    (throw-error-with-location \"Var name should be simple symbol.\" expr))\n  (let [docstring (when ?init ?docstring)\n        init (if docstring ?init ?docstring)\n        init (if (= (count expr) 2)\n               :sci.impl/var.unbound\n               (analyze ctx init))\n        m (meta var-name)\n        m (analyze ctx m)\n        m (assoc m :ns @vars/current-ns)\n        m (if docstring (assoc m :doc docstring) m)\n        var-name (with-meta var-name m)]\n    (expand-declare ctx [nil var-name])\n    (mark-eval-call (list 'def var-name init))))\n\n(defn expand-defn [ctx [op fn-name & body :as expr]]\n  (when-not (simple-symbol? fn-name)\n    (throw-error-with-location \"Var name should be simple symbol.\" expr))\n  (expand-declare ctx [nil fn-name])\n  (let [macro? (= \"defmacro\" (name op))\n        [pre-body body] (split-with (comp not sequential?) body)\n        _ (when (empty? body)\n            (throw-error-with-location \"Parameter declaration missing.\" expr))\n        docstring (when-let [ds (first pre-body)]\n                    (when (string? ds) ds))\n        meta-map (when-let [m (last pre-body)]\n                   (when (map? m) m))\n        meta-map (analyze ctx (merge (meta expr) meta-map))\n        fn-body (with-meta (cons 'fn body)\n                  (meta expr))\n        f (expand-fn ctx fn-body macro?)\n        arglists (seq (:sci.impl/arglists f))\n        meta-map (assoc meta-map\n                        :ns @vars/current-ns\n                        :arglists arglists)\n        fn-name (with-meta fn-name\n                  (cond-> meta-map\n                    docstring (assoc :doc docstring)\n                    macro? (assoc :macro true)))\n        f (assoc f\n                 :sci/macro macro?\n                 :sci.impl/fn-name fn-name)]\n    (mark-eval-call (list 'def fn-name f))))\n\n(defn expand-comment\n  \"The comment macro from clojure.core.\"\n  [_ctx & _body])\n\n(defn expand-loop\n  [ctx expr]\n  (let [bv (second expr)\n        arg-names (take-nth 2 bv)\n        init-vals (take-nth 2 (rest bv))\n        [bv syms] (if (every? symbol? arg-names)\n                    [bv arg-names]\n                    (let [syms (repeatedly (count arg-names) #(gensym))\n                          bv1 (map vector syms init-vals)\n                          bv2  (map vector arg-names syms)]\n                      [(into [] cat (interleave bv1 bv2)) syms]))\n        body (nnext expr)\n        expansion (list 'let bv\n                        (list* `(fn ~(vec arg-names) ~@body)\n                               syms))]\n    (analyze ctx expansion)))\n\n(defn expand-lazy-seq\n  [ctx expr]\n  (let [body (rest expr)]\n    (mark-eval-call\n     (list 'lazy-seq\n           (analyze ctx\n                    ;; expand-fn will take care of the analysis of the body\n                    (list 'fn [] (cons 'do body)))))))\n\n(defn expand-if\n  [ctx [_if & exprs :as expr]]\n  (case (count exprs)\n    (0 1) (throw-error-with-location \"Too few arguments to if\" expr)\n    (2 3) (mark-eval-call `(~'if ~@(analyze-children ctx exprs)))\n    (throw-error-with-location \"Too many arguments to if\" expr)))\n\n(defn expand-case\n  [ctx expr]\n  (let [v (analyze ctx (second expr))\n        clauses (nnext expr)\n        match-clauses (take-nth 2 clauses)\n        result-clauses (analyze-children ctx (take-nth 2 (rest clauses)))\n        default (when (odd? (count clauses))\n                  [:val (analyze ctx (last clauses))])\n        cases (interleave match-clauses result-clauses)\n        assoc-new (fn [m k v]\n                    (if-not (contains? m k)\n                      (assoc m k v)\n                      (throw-error-with-location (str \"Duplicate case test constant \" k)\n                                                 expr)))\n        case-map (loop [cases (seq cases)\n                        ret-map {}]\n                   (if cases\n                     (let [[k v & cases] cases]\n                       (if (list? k)\n                         (recur\n                          cases\n                          (reduce (fn [acc k]\n                                    (assoc-new acc k v))\n                                  ret-map\n                                  k))\n                         (recur\n                          cases\n                          (assoc-new ret-map k v))))\n                     ret-map))\n        ret (mark-eval-call (list 'case\n                                  {:case-map case-map\n                                   :case-val v\n                                   :case-default default}\n                                  default))]\n    (mark-eval-call ret)))\n\n(defn expand-try\n  [ctx [_try & body]]\n  (let [[body-exprs\n         catches\n         finally]\n        (loop [exprs #_[expr & exprs :as all-exprs] (seq body)\n               body-exprs []\n               catch-exprs []\n               finally-expr nil]\n          (if exprs\n            (let [expr (first exprs)\n                  exprs (next exprs)]\n              (cond (and (seq? expr) (= 'catch (first expr)))\n                    (recur exprs body-exprs (conj catch-exprs expr) finally-expr)\n                    (and (not exprs) (and (seq? expr) (= 'finally (first expr))))\n                    [body-exprs catch-exprs expr]\n                    :else\n                    ;; TODO: cannot add body expression when catch is not empty\n                    ;; TODO: can't have finally as non-last expression\n                    (recur exprs (conj body-exprs expr) catch-exprs finally-expr)))\n            [body-exprs catch-exprs finally-expr]))\n        body (analyze ctx (cons 'do body-exprs))\n        catches (mapv (fn [c]\n                        (let [[_ ex binding & body] c]\n                          (if-let [clazz (interop/resolve-class ctx ex)]\n                            {:class clazz\n                             :binding binding\n                             :body (analyze (assoc-in ctx [:bindings binding] nil)\n                                            (cons 'do body))}\n                            (throw-error-with-location (str \"Unable to resolve classname: \" ex) ex))))\n                      catches)\n        finally (when finally\n                  (analyze ctx (cons 'do (rest finally))))]\n    (with-meta\n      {:sci.impl/try\n       {:body body\n        :catches catches\n        :finally finally}}\n      {:sci.impl/op :try})))\n\n(defn expand-declare [ctx [_declare & names :as _expr]]\n  (swap! (:env ctx)\n         (fn [env]\n           (let [cnn (vars/current-ns-name)]\n             (update-in env [:namespaces cnn]\n                        (fn [current-ns]\n                          (reduce (fn [acc name]\n                                    (if (contains? acc name)\n                                      ;; declare does not override an existing\n                                      ;; var\n                                      acc\n                                      (assoc acc name\n                                             (doto (vars/->SciVar nil (symbol (str cnn)\n                                                                              (str name))\n                                                                  (assoc (meta name)\n                                                                         :name name\n                                                                         :ns @vars/current-ns\n                                                                         :file @vars/current-file))\n                                               (vars/unbind)))))\n                                  current-ns\n                                  names))))))\n  nil)\n\n(defn do-import [{:keys [:env] :as ctx} [_ & import-symbols-or-lists :as expr]]\n  (let [specs (map #(if (and (seq? %) (= 'quote (first %))) (second %) %)\n                   import-symbols-or-lists)]\n    (doseq [spec (reduce (fn [v spec]\n                           (if (symbol? spec)\n                             (conj v (name spec))\n                             (let [p (first spec) cs (rest spec)]\n                               (into v (map #(str p \".\" %) cs)))))\n                         [] specs)]\n      (let [fq-class-name (symbol spec)]\n        (when-not (interop/resolve-class ctx fq-class-name)\n          (throw-error-with-location (str \"Unable to resolve classname: \" fq-class-name) expr))\n        (let [last-dot (str/last-index-of spec \".\")\n              class-name (subs spec (inc last-dot) (count spec))\n              cnn (vars/current-ns-name)]\n          (swap! env assoc-in [:namespaces cnn :imports (symbol class-name)] fq-class-name))))))\n\n;;;; Interop\n\n(defn expand-dot [ctx [_dot instance-expr method-expr & args :as _expr]]\n  (let [[method-expr & args] (if (seq? method-expr) method-expr\n                                 (cons method-expr args))\n        instance-expr (analyze ctx instance-expr)\n        instance-expr (utils/vary-meta*\n                       instance-expr\n                       (fn [m]\n                         (if-let [t (:tag m)]\n                           (let [clazz (or (interop/resolve-class ctx t)\n                                           (throw-error-with-location\n                                            (str \"Unable to resolve classname: \" t) t))]\n                             (assoc m :tag-class clazz))\n                           m)))\n        method-expr (name method-expr)\n        args (analyze-children ctx args)\n        res #?(:clj (if (class? instance-expr)\n                      `(~(with-meta [instance-expr method-expr]\n                           {:sci.impl/op :static-access}) ~@args)\n                      `(~'. ~instance-expr ~method-expr ~args))\n               :cljs `(~'. ~instance-expr ~method-expr ~args))]\n    (mark-eval-call res)))\n\n(defn expand-dot**\n  \"Expands (. x method)\"\n  [ctx expr]\n  (when (< (count expr) 3)\n    (throw (new #?(:clj IllegalArgumentException :cljs js/Error)\n                \"Malformed member expression, expecting (.member target ...)\")))\n  (expand-dot ctx expr))\n\n(defn expand-dot*\n  \"Expands (.foo x)\"\n  [ctx [method-name obj & args :as expr]]\n  (when (< (count expr) 2)\n    (throw (new #?(:clj IllegalArgumentException :cljs js/Error)\n                \"Malformed member expression, expecting (.member target ...)\")))\n  (expand-dot ctx (list '. obj (cons (symbol (subs (name method-name) 1)) args))))\n\n(defn expand-new [ctx [_new class-sym & args]]\n  (if-let [#?(:clj {:keys [:class] :as _opts}\n              :cljs {:keys [:constructor] :as _opts}) (interop/resolve-class-opts ctx class-sym)]\n    (let [args (analyze-children ctx args)] ;; analyze args!\n      (mark-eval-call (list 'new #?(:clj class :cljs constructor) args)))\n    (throw-error-with-location (str \"Unable to resolve classname: \" class-sym) class-sym)))\n\n(defn expand-constructor [ctx [constructor-sym & args]]\n  (let [;; TODO:\n        ;; here it strips the namespace, which is correct in the case of\n        ;; js/Error. but not in clj\n        constructor-name (name constructor-sym)\n        class-sym (with-meta (symbol (subs constructor-name 0\n                                           (dec (count constructor-name))))\n                    (meta constructor-sym))]\n    (expand-new ctx (with-meta (list* 'new class-sym args)\n                      (meta constructor-sym)))))\n\n;;;; End interop\n\n;;;; Namespaces\n\n(defn analyze-ns-form [ctx [_ns ns-name & exprs]]\n  (when-not (symbol? ns-name)\n    (throw (new #?(:clj IllegalArgumentException\n                   :cljs js/Error)\n                (str \"Namespace name must be symbol, got: \" (pr-str ns-name)))))\n  (let [[docstring exprs]\n        (let [fexpr (first exprs)]\n          (if (string? fexpr)\n            [fexpr (next exprs)]\n            [nil exprs]))\n        ;; skip attr-map\n        [attr-map exprs]\n        (let [m (first exprs)]\n          (if (map? m)\n            [m (next exprs)]\n            [nil exprs]))\n        attr-map (if docstring\n                   (assoc attr-map :doc docstring)\n                   attr-map)]\n    (set-namespace! ctx ns-name attr-map)\n    (loop [exprs exprs\n           ret []]\n      (if exprs\n        (let [[k & args] (first exprs)]\n          (case k\n            (:require :use)\n            (recur (next exprs)\n                   (conj ret\n                         (mark-eval-call\n                          (list* (symbol (name k)) args))))\n            :import (do\n                      ;; imports are processed analysis time\n                      (do-import ctx `(~'import ~@args))\n                      (recur (next exprs) ret))\n            :refer-clojure (recur (next exprs)\n                                  (conj ret\n                                        (mark-eval-call\n                                         (list* 'refer 'clojure.core args))))\n            :gen-class ;; ignore\n            (recur (next exprs) ret)))\n        (mark-eval-call (list* 'do ret))))))\n\n;;;; End namespaces\n\n\n;;;; Vars\n\n(defn analyze-var [ctx [_ var-name]]\n  (resolve-symbol (assoc ctx :sci.impl/prevent-deref true) var-name))\n\n(defn analyze-set! [ctx [_ obj v]]\n  (let [obj (analyze ctx obj)\n        v (analyze ctx v)\n        obj (types/getVal obj)]\n    (mark-eval-call (list 'set! obj v))))\n\n;;;; End vars\n\n;;;; Macros\n\n(defn macro? [f]\n  (when-let [m (meta f)]\n    (or (:sci/macro m) ;; TODO: deprecate\n        (:macro m))))\n\n;;;; End macros\n\n(defn analyze-call [ctx expr]\n  (let [f (first expr)]\n    (if (symbol? f)\n      (let [;; in call position Clojure prioritizes special symbols over\n            ;; bindings\n            special-sym (get special-syms f)\n            _ (when special-sym (check-permission! ctx special-sym f))\n            f (or special-sym\n                  (resolve-symbol ctx f true))\n            f (if (and (vars/var? f)\n                       (or\n                        (vars/isMacro f)\n                        (-> f meta :sci.impl/built-in)))\n                @f f)]\n        (if (and (not (eval? f)) ;; the symbol is not a binding\n                 (or\n                  special-sym\n                  (contains? macros f)))\n          (case f\n            ;; we treat every subexpression of a top-level do as a separate\n            ;; analysis/interpretation unit so we hand this over to the\n            ;; interpreter again, which will invoke analysis + evaluation on\n            ;; every sub expression\n            do (mark-eval-call (cons 'do\n                                     (analyze-children ctx (rest expr))))\n            let (expand-let ctx expr)\n            (fn fn*) (expand-fn ctx expr false)\n            def (expand-def ctx expr)\n            ;; NOTE: defn / defmacro aren't implemented as normal macros yet\n            (defn defmacro) (let [ret (expand-defn ctx expr)]\n                              ret)\n            ;; TODO: implement as normal macro in namespaces.cljc\n            -> (expand-> ctx (rest expr))\n            ;; TODO: implement as normal macro in namespaces.cljc\n            as-> (expand-as-> ctx expr)\n            quote (do nil (second expr))\n            ;; TODO: implement as normal macro in namespaces.cljc\n            comment (expand-comment ctx expr)\n            loop (expand-loop ctx expr)\n            lazy-seq (expand-lazy-seq ctx expr)\n            for (let [res (expand-for ctx expr)]\n                  (if (:sci.impl/macroexpanding ctx)\n                    res\n                    (analyze ctx res)))\n            doseq (analyze ctx (expand-doseq ctx expr))\n            if (expand-if ctx expr)\n            case (expand-case ctx expr)\n            try (expand-try ctx expr)\n            declare (expand-declare ctx expr)\n            expand-dot* (expand-dot* ctx expr)\n            . (expand-dot** ctx expr)\n            expand-constructor (expand-constructor ctx expr)\n            new (expand-new ctx expr)\n            import (do-import ctx expr)\n            ns (analyze-ns-form ctx expr)\n            var (analyze-var ctx expr)\n            set! (analyze-set! ctx expr)\n            ;; macroexpand-1 (macroexpand-1 ctx expr)\n            ;; macroexpand (macroexpand ctx expr)\n            ;; else:\n            (mark-eval-call (cons f (analyze-children ctx (rest expr)))))\n          (try\n            (if (macro? f)\n              (let [needs-ctx? (kw-identical? :needs-ctx\n                                              (:sci.impl/op (meta f)))\n                    v (if needs-ctx?\n                        (apply f expr\n                               (:bindings ctx)\n                               ctx\n                               (rest expr))\n                        (apply f expr\n                               (:bindings ctx) (rest expr)))\n                    expanded (if (:sci.impl/macroexpanding ctx)\n                               v\n                               (analyze ctx v))]\n                expanded)\n              (mark-eval-call (cons f (analyze-children ctx (rest expr)))))\n            (catch #?(:clj Exception :cljs js/Error) e\n              (rethrow-with-location-of-node ctx e expr)))))\n      (let [ret (mark-eval-call (analyze-children ctx expr))]\n        ret))))\n\n(defn analyze\n  [ctx expr]\n  ;; (prn \"ana\" expr)\n  (let [ret (cond (constant? expr) expr ;; constants do not carry metadata\n                  (symbol? expr) (let [v (resolve-symbol ctx expr false)]\n                                   (cond (constant? v) v\n                                         ;; (fn? v) (utils/vary-meta* v dissoc :sci.impl/op)\n                                         (vars/var? v) (if (:const (meta v))\n                                                         @v (types/->EvalVar v))\n                                         :else (merge-meta v (meta expr))))\n                  :else\n                  (merge-meta\n                   (cond\n                     (map? expr)\n                     (-> (zipmap (analyze-children ctx (keys expr))\n                                 (analyze-children ctx (vals expr)))\n                         mark-eval)\n                     (or (vector? expr) (set? expr))\n                     (-> (into (empty expr) (analyze-children ctx expr))\n                         mark-eval)\n                     (and (seq? expr) (seq expr))\n                     (analyze-call ctx expr)\n                     :else expr)\n                   (select-keys (meta expr)\n                                [:line :column :tag])))]\n    ;; (prn \"ana\" expr '-> ret 'm-> (meta ret))\n    ret))\n\n;;;; Scratch\n\n(comment\n  )\n"]}