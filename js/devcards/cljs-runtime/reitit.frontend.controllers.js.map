{"version":3,"sources":["reitit/frontend/controllers.cljs"],"mappings":";;AAGA,AAAA,AAAOA,AAAiBC,AAAEC;AAA1B,AACE,AAACC,AAAOF,AAAE,AAACG,AAAK,AAAG,AAACC,AAAMH,AAAG,AAACG,AAAMJ,AAAI,AAAA,AAACK;;AAE3C,AAAeC,AACb,AAAAC,AAAA;AAAA,AAAO,AAAA,AAACC;AAAR;AAEF;;;;;;;;;;;;AAAA,AAAAC,AAAMM,AAWkCI;AAXxC,AAAA,AAAAT,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAWWM;AAXX,AAAAF,AAAAJ,AAAA,AAWoBO;AAXpB,AAAAH,AAAAJ,AAAA,AAW+BQ;AAX/B,AAYE,AAAQ,AAACG,AAAI,AAAAC,AAAKN;AAAL,AAAA,AAAAM;AAAcL;;AAAdK;;;AAAb;AAAA,AAAA,AAAA,AAAAF,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAEA,AAAMF;AAAN,AAAA,AAAAK,AACGjB;;AADH;;AAEA,AACEW;AACA,AAAA,AAACO,AAAQ,AAAAC,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAA;;AAAA,AAAA,AAAAE,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAAE;AAAA,AAAA,AAAAF,AAAAE;AAAA,AAAA,AAAA,AAAAE,AAAAJ;AAAA,AAAAK,AA45EsC,AAAA4C,AAAAjD;AA55EtCM,AAAA,AAAA5B,AAAA2B;AAAAE,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAH;AAAA,AAAAI,AAAA,AAAAC,AAAAN,AAAAI;AAAA,AAAAG,AAAAF,AAAA,AAAA,AAAOY;AAAP,AAAAV,AAAAF,AAAA,AAAA,AAAkBa;AAAlB,AAAA,AAAA,AAAAV,AAAAN,AAAA,AACGe,AAAW,AAACE,AAAY,AAACpC,AAAI,AAAA,AAAaK,AAAO6B,AAAYC;;AADhE,AAAA,AAAAd,AAAA;;;;AAAA;;;;;AAAA,AAAAK,AAAA,AAAAC,AAAAR,AAAA,AAAAS,AAAA,AAAAC,AAAAjB;;AAAA,AAAAc,AAAA,AAAAC,AAAAR,AAAA;;;AAAA,AAAAW,AAAA,AAAAC,AAAAnB;AAAA,AAAAY,AAAAM,AAAA,AAAA,AAAOI;AAAP,AAAAV,AAAAM,AAAA,AAAA,AAAkBK;AAAlB,AAAA,AAAAH,AAAA,AAAA,AAAAJ,AAAA,AAAAK,AAAArB,AACGsB,AAAW,AAACE,AAAY,AAACpC,AAAI,AAAA,AAAaK,AAAO6B,AAAYC;;;AADhE;;;;AAAA,AAAA;;AAAA,AAAA,AAAAxB,AAAsBR;;;AAFjC,AAKED;AACA,AAACA,AAAAA,AAAAA,AAASG,AAAAA;;AANZ,AASED;AACA,AAACA,AAAAA,AAAAA,AAAOC,AAAAA;;AAVV,AAAA;;;;;;AAcF;;;;AAAA,AAAMgC,AAGHC,AAAWC;AAHd,AAIE,AAAAzB,AAAa,AAACd,AAAIsC,AAAWC;AAA7B,AAAA,AAAAzB;AAAA,AAAA,AAAAA,AAAW0B;AAAX,AACE,AAAAC,AAAG,AAAA,AAAYH;AAAf,AAAA,AAAAG,AAAAA,AAACD,AAAAA,AAAAA;;AADH;;;AAGF;;;;;AAAA,AAAME,AAIHC,AAAgBC;AAJnB,AAKE,AAAMC,AAAgB,AAACC,AAAK,AAAKR;AAAL,AACE,AAAA,AAACS,AAAMT,AAAsB,AAACrC,AAAaqC,AAAWM;AACxD,AAAA,AAAc,AAAA,AAAOA;AAC3CI,AAAoB,AAAK,AAACC,AAAI,AAAKC,AAAIC,AAMd,AAACE,AAAKC,AACNC;AAPK,AAEE,AAAI,AAACH,AAAKF,AAAIC;AAAd,AAAA,AAAA,AACQD,AAAUC;;AADlB;;AAEF,AAAClE,AAAgB0D,AAAgBE,AACjC,AAAC5D,AAAgB4D,AAAgBF;AARrE,AAWE,AAAAa,AAAA,AAAAzC,AAAmB,AAACgD,AAAQ,AAAA,AAACC,AAAShB;AAAtCS,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQrB;AAAR,AAAA,AACE,AAAA,AAACD,AAAiBC;;AADpB;AAAA,AAAAkB;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAA7C,AAAA,AAAAC,AAAAyC;AAAA,AAAA,AAAA1C;AAAA,AAAA,AAAA0C,AAAA1C;AAAA,AAAA,AAAA,AAAAE,AAAAwC;AAAA,AAAAI,AAAA,AAAAC,AAAAL;AAAA,AAAA,AAAA,AAAA3B,AAAA2B;AAAAI;AAAA,AAAAtE,AAAAsE;AAAA;;;;;;;AAAA,AAAA,AAAA7B,AAAAyB,AAAQlB;AAAR,AAAA,AACE,AAAA,AAACD,AAAiBC;;AADpB;AAAA,AAAA,AAAAwB,AAAAN;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AAEA,AAAAS,AAAA,AAAAlD,AAAmB,AAAA,AAACiD,AAAShB;AAA7BkB,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQ9B;AAAR,AAAA,AACE,AAAA,AAACD,AAAiBC;;AADpB;AAAA,AAAA2B;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAtD,AAAA,AAAAC,AAAAkD;AAAA,AAAA,AAAAnD;AAAA,AAAA,AAAAmD,AAAAnD;AAAA,AAAA,AAAA,AAAAE,AAAAiD;AAAA,AAAAL,AAAA,AAAAC,AAAAI;AAAA,AAAA,AAAA,AAAApC,AAAAoC;AAAAL;AAAA,AAAAtE,AAAAsE;AAAA;;;;;;;AAAA,AAAA,AAAA7B,AAAAkC,AAAQ3B;AAAR,AAAA,AACE,AAAA,AAACD,AAAiBC;;AADpB;AAAA,AAAA,AAAAwB,AAAAG;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AAEApB","names":["reitit.frontend.controllers/pad-same-length","a","b","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core.take.cljs$core$IFn$_invoke$arity$2","cljs.core/count","cljs.core.repeat.cljs$core$IFn$_invoke$arity$1","reitit.frontend.controllers/params-warning","cljs.core/Delay","js/console.warn","p__50218","map__50219","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","reitit.frontend.controllers/get-identity","identity","parameters","params","match","js/Error","cljs.core/not","and__4174__auto__","cljs.core/deref","cljs.core.into.cljs$core$IFn$_invoke$arity$2","iter__4582__auto__","s__50223","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","b__50225","cljs.core/chunk-buffer","i__50224","vec__50226","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__50222","cljs.core/chunk-rest","vec__50229","cljs.core/first","cljs.core/cons","cljs.core/rest","param-type","ks","cljs.core/select-keys","reitit.frontend.controllers/apply-controller","controller","method","f","G__50232","reitit.frontend.controllers/apply-controllers","old-controllers","new-match","new-controllers","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","changed-controllers","cljs.core.map.cljs$core$IFn$_invoke$arity$3","old","new","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.keep.cljs$core$IFn$_invoke$arity$2","cljs.core/identity","cljs.core/vec","seq__50233","chunk__50234","count__50235","i__50236","c__4609__auto__","cljs.core/chunk-first","cljs.core/next","cljs.core/reverse","cljs.core.map.cljs$core$IFn$_invoke$arity$2","seq__50237","chunk__50238","count__50239","i__50240"],"sourcesContent":["(ns reitit.frontend.controllers\n  \"Provides apply-controllers function\")\n\n(defn- pad-same-length [a b]\n  (concat a (take (- (count b) (count a)) (repeat nil))))\n\n(def ^:private params-warning\n  (delay (js/console.warn \"Reitit-frontend controller :params is deprecated. Replace with :identity or :parameters option.\")))\n\n(defn get-identity\n  \"Get controller identity given controller and match.\n\n  To select interesting properties from Match :parameters option can be set.\n  Value should be param-type => [param-key]\n  Resulting value is map of param-type => param-key => value.\n\n  For other uses, :identity option can be used to provide function from\n  Match to identity.\n\n  Default value is nil, i.e. controller identity doesn't depend on Match.\"\n  [{:keys [identity parameters params]} match]\n  (assert (not (and identity parameters))\n          \"Use either :identity or :parameters for controller, not both.\")\n  (when params\n    @params-warning)\n  (cond\n    parameters\n    (into {} (for [[param-type ks] parameters]\n               [param-type (select-keys (get (:parameters match) param-type) ks)]))\n\n    identity\n    (identity match)\n\n    ;; Support deprecated :params for transition period. Can be removed later.\n    params\n    (params match)\n\n    :else nil))\n\n(defn apply-controller\n  \"Run side-effects (:start or :stop) for controller.\n  The side-effect function is called with controller identity value.\"\n  [controller method]\n  (when-let [f (get controller method)]\n    (f (::identity controller))))\n\n(defn apply-controllers\n  \"Applies changes between current controllers and\n  those previously enabled. Reinitializes controllers whose\n  identity has changed.\"\n  [old-controllers new-match]\n  (let [new-controllers (mapv (fn [controller]\n                                (assoc controller ::identity (get-identity controller new-match)))\n                              (:controllers (:data new-match)))\n        changed-controllers (->> (map (fn [old new]\n                                        ;; different controllers, or params changed\n                                        (if (not= old new)\n                                          {:old old, :new new}))\n                                      (pad-same-length old-controllers new-controllers)\n                                      (pad-same-length new-controllers old-controllers))\n                                 (keep identity)\n                                 vec)]\n    (doseq [controller (reverse (map :old changed-controllers))]\n      (apply-controller controller :stop))\n    (doseq [controller (map :new changed-controllers)]\n      (apply-controller controller :start))\n    new-controllers))\n"]}