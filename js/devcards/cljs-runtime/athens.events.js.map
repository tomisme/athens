{"version":3,"sources":["athens/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","day8.re-frame.tracing/is-trace-enabled?","+debux-dbg-opts+","debux.common.util/send-form!","opts__46535__auto__","result__46536__auto__","debux.common.util/send-trace!","e","e61475","_","athens.db/rfdb","db","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core/not","p__61476","vec__61477","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","G__61482","fexpr__61481","e61480","p__61483","vec__61484","selected-page","fexpr__61487","cljs.core/set","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/conj","p__61488","vec__61489","item","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","p__61492","vec__61493","uid","cljs.core/dissoc","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2","p__61496","p__61497","map__61498","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","vec__61499","G__61504","cljs.core/deref","G__61505","G__61506","e61503","p__61507","p__61508","map__61509","vec__61510","block","G__61514","G__61515","G__61516","datascript.core/pull","athens.db/dsdb","new-item","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","new-items","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","inc-items","cljs.core/reduce-kv","m","k","v","cljs.core/inc","sorted-items","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/sorted-map-by","k1","k2","cljs.core/compare","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","e61517","alert","e61518","e61519","cljs.core/assoc-in","e61520","athens.events/focus-el","id","temp__5733__auto__","el","js/document","p__61521","vec__61522","e61525","e61526","p__61527","vec__61528","js/setTimeout","p__61531","vec__61532","map","p__61535","vec__61536","p__61539","p__61540","map__61541","vec__61542","map__61545","title","new-db","athens.db/e-by-av","p__61548","map__61549","rfdb","athens.db/athens-url","p__61551","vec__61552","json-str","datoms","athens.db/str-to-db-tx","datascript.core/db-with","datascript.core/empty-db","athens.db/schema","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3","G__61555","G__61556","re-frame.core/inject-cofx","p__61557","map__61558","local-storage","datascript.transit/read-transit-str","p__61560","vec__61561","p__61564","vec__61565","p__61568","vec__61569","p__61572","vec__61573","now","athens.util/now-ts","child-uid","athens.util/gen-block-uid","child","temp__5735__auto__","prev","p1__61576#","athens.db/find-prev","athens.db/history","next","p1__61577#","athens.db/find-next","athens.events/rules","athens.events/map-order","blocks","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p__61578","vec__61579","order","athens.events/inc-after","eid","G__61582","G__61583","G__61584","G__61585","G__61586","datascript.core/q","athens.events/dec-after","G__61587","G__61588","G__61589","G__61590","G__61591","athens.events/prev-sibling-uid","G__61592","G__61593","G__61594","athens.events/prev-block-uid","athens.db/get-block","parent","athens.db/get-parent","deepest-child-prev-sibling","athens.db/deepest-child-block","p__61595","vec__61596","p__61599","vec__61600","athens.events/next-sibling-block","G__61603","G__61604","G__61605","athens.events/next-sibling-block-recursively","sib","or__4185__auto__","athens.events/next-block-uid","athens.db/sort-block-children","ch","next-block-recursive","cljs.core/first","p__61606","vec__61607","p__61610","vec__61611","athens.events/backspace","value","map__61614","reindex","prev-block-uid-","prev-block-string","and__4174__auto__","p__61616","vec__61617","athens.events/split-block","val","index","state","head","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","tail","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","new-uid","new-block","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","athens.events/bump-up","athens.events/new-block","athens.events/enter","root-block?","cljs.core/boolean","cljs.core/empty?","p__61620","vec__61621","athens.events/indent","older-sib","p1__61624#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/count","reindex-blocks","p__61625","vec__61626","athens.events/unindent","grandpa","reindex-grandpa","p__61629","vec__61630","athens.events/target-child","source","source-parent","target","new-parent-children","new-target-children","athens.events/between","s","t","x","athens.events/target-sibling-same-parent","t-order","s-order","inc-or-dec","cljs.core/dec","G__61633","G__61634","G__61635","G__61636","G__61637","G__61638","G__61639","athens.events/target-sibling-diff-parent","target-parent","source-parent-children","G__61640","G__61641","G__61642","G__61643","G__61644","target-parent-children","athens.events/drop-bullet","source-uid","target-uid","kind","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","p__61645","vec__61646","e61649","p__61650","vec__61651"],"sourcesContent":["(ns athens.events\n  (:require\n    [athens.db :as db]\n    [athens.util :refer [now-ts gen-block-uid]]\n    [datascript.core :as d]\n    [datascript.transit :as dt]\n    [day8.re-frame.async-flow-fx]\n    [day8.re-frame.tracing :refer-macros [fn-traced]]\n    [re-frame.core :refer [reg-event-db reg-event-fx inject-cofx]]))\n\n\n;; -- re-frame app-db events ---------------------------------------------\n\n(reg-event-db\n  :init-rfdb\n  (fn-traced [_ _]\n             db/rfdb))\n\n\n(reg-event-db\n  :athena/toggle\n  (fn [db _]\n    (update db :athena/open not)))\n\n\n(reg-event-db\n  :athena/update-recent-items\n  (fn-traced [db [_ selected-page]]\n             (when (nil? ((set (:athena/recent-items db)) selected-page))\n               (update db :athena/recent-items conj selected-page))))\n\n\n(reg-event-db\n  :devtool/toggle\n  (fn [db _]\n    (update db :devtool/open not)))\n\n\n(reg-event-db\n  :left-sidebar/toggle\n  (fn [db _]\n    (update db :left-sidebar/open not)))\n\n\n(reg-event-db\n  :right-sidebar/toggle\n  (fn [db _]\n    (update db :right-sidebar/open not)))\n\n\n(reg-event-db\n  :right-sidebar/toggle-item\n  (fn [db [_ item]]\n    (update-in db [:right-sidebar/items item :open] not)))\n\n\n;; TODO: dec all indices > closed item\n(reg-event-db\n  :right-sidebar/close-item\n  (fn [db [_ uid]]\n    (update db :right-sidebar/items dissoc uid)))\n\n\n;; TODO: change right sidebar items from map to datascript\n(reg-event-fx\n  :right-sidebar/open-item\n  (fn-traced [{:keys [db]} [_ uid]]\n             (let [block     (d/pull @db/dsdb '[:node/title :block/string] [:block/uid uid])\n                   new-item  (merge block {:open true :index -1})\n                   new-items (assoc (:right-sidebar/items db) uid new-item)\n                   inc-items (reduce-kv (fn [m k v] (assoc m k (update v :index inc)))\n                                        {}\n                                        new-items)\n                   sorted-items (into (sorted-map-by (fn [k1 k2]\n                                                       (compare\n                                                         [(get-in new-items [k1 :index]) k2]\n                                                         [(get-in new-items [k2 :index]) k1]))) inc-items)]\n               {:db (assoc db :right-sidebar/items sorted-items)\n                :dispatch (when (false? (:right-sidebar/open db))\n                            [:right-sidebar/toggle])})))\n\n\n;; Alerts\n\n(reg-event-db\n  :alert/set\n  (fn-traced [db alert]\n             (assoc db :alert alert)))\n\n\n(reg-event-db\n  :alert/unset\n  (fn-traced [db]\n             (assoc db :alert nil)))\n\n\n;; Loading\n\n(reg-event-db\n  :loading/set\n  (fn-traced [db]\n             (assoc-in db [:loading?] true)))\n\n\n(reg-event-db\n  :loading/unset\n  (fn-traced [db]\n             (assoc-in db [:loading?] false)))\n\n\n;; Block Events\n;; TODO: refactor to an effect\n(defn focus-el\n  [id]\n  (fn []\n    (if-let [el (.. js/document (getElementById id))]\n      (.focus el))))\n\n\n(reg-event-db\n  :editing/uid\n  (fn-traced [db [_ uid]]\n             (js/setTimeout (focus-el (str \"editable-uid-\" uid)) 300)\n             (assoc db :editing/uid uid)))\n\n\n(reg-event-db\n  :drag-bullet\n  (fn [db [_ map]]\n    (assoc db :drag-bullet map)))\n\n\n(reg-event-db\n  :tooltip/uid\n  (fn [db [_ uid]]\n    (assoc db :tooltip/uid uid)))\n\n\n;; Daily Notes\n\n(reg-event-db\n  :daily-notes/reset\n  (fn [db _]\n    (assoc db :daily-notes/items [])))\n\n\n;; TODO: don't use app-db, use dsdb\n(reg-event-fx\n  :daily-note/next\n  (fn [{:keys [db]} [_ {:keys [uid title]}]]\n    (let [new-db (update db :daily-notes/items conj uid)]\n      (if (db/e-by-av :block/uid uid)\n        {:db new-db}\n        {:db        new-db\n         :dispatch [:page/create title uid]}))))\n\n\n;; -- event-fx and Datascript Transactions -------------------------------\n\n;; Import/Export\n\n(reg-event-fx\n  :get-db/init\n  (fn [{rfdb :db} _]\n    {:db (-> db/rfdb\n             (assoc :loading? true))\n     :async-flow {:first-dispatch (if false\n                                    [:local-storage/get-db]\n                                    [:http/get-db])\n                  :rules          [{:when :seen?\n                                    :events :reset-conn\n                                    :dispatch-n [[:loading/unset]\n                                                 [:navigate (-> rfdb :current-route :data :name)]]\n                                    :halt? true}]}}))\n\n\n(reg-event-fx\n  :http/get-db\n  (fn [_ _]\n    {:http {:method :get\n            :url db/athens-url\n            :opts {:with-credentials? false}\n            :on-success [:http-success/get-db]\n            :on-failure [:alert/set]}}))\n\n\n(reg-event-fx\n  :http-success/get-db\n  (fn [_ [_ json-str]]\n    (let [datoms (db/str-to-db-tx json-str)\n          new-db (d/db-with (d/empty-db db/schema) datoms)]\n      {:dispatch-n [[:reset-conn new-db]\n                    [:local-storage/set-db new-db]]})))\n\n\n(reg-event-fx\n  :local-storage/get-db\n  [(inject-cofx :local-storage \"datascript/DB\")]\n  (fn [{:keys [local-storage]} _]\n    {:dispatch [:reset-conn (dt/read-transit-str local-storage)]}))\n\n\n(reg-event-fx\n  :local-storage/set-db\n  (fn [_ [_ db]]\n    {:local-storage/set-db! db}))\n\n\n;; Datascript\n\n(reg-event-fx\n  :transact\n  (fn [_ [_ datoms]]\n    {:transact! datoms}))\n\n\n(reg-event-fx\n  :reset-conn\n  (fn [_ [_ db]]\n    {:reset-conn! db}))\n\n\n(reg-event-fx\n  :page/create\n  (fn [_ [_ title uid]]\n    (let [now (now-ts)\n          child-uid (gen-block-uid)\n          child {:db/id -2 :create/time now :edit/time now :block/uid child-uid :block/order 0 :block/open true :block/string \"\"}]\n      {:transact! [{:db/id -1 :node/title title :block/uid uid :create/time now :edit/time now :block/children [child]}]\n       :dispatch [:editing/uid child-uid]})))\n\n\n(reg-event-fx\n  :undo\n  (fn [_ _]\n    (when-let [prev (db/find-prev @db/history #(identical? @db/dsdb %))]\n      {:reset-conn! prev})))\n\n\n(reg-event-fx\n  :redo\n  (fn [_ _]\n    (when-let [next (db/find-next @db/history #(identical? @db/dsdb %))]\n      {:reset-conn! next})))\n\n\n(def rules\n  '[[(after ?p ?at ?ch ?o)\n     [?p :block/children ?ch]\n     [?ch :block/order ?o]\n     [(> ?o ?at)]]\n    [(inc-after ?p ?at ?ch ?new-o)\n     (after ?p ?at ?ch ?o)\n     [(inc ?o) ?new-o]]\n    [(dec-after ?p ?at ?ch ?new-o)\n     (after ?p ?at ?ch ?o)\n     [(dec ?o) ?new-o]]])\n\n\n;; TODO: should be able to use :keys now: https://github.com/tonsky/datascript/blob/master/docs/queries.md\n(defn map-order\n  [blocks]\n  (map (fn [[id order]] {:db/id id :block/order order}) blocks))\n\n\n(defn inc-after\n  [eid order]\n  (->> (d/q '[:find ?ch ?new-o\n              ;;:keys db/id block/order\n              :in $ % ?p ?at\n              :where (inc-after ?p ?at ?ch ?new-o)]\n            @db/dsdb rules eid order)\n       map-order))\n\n\n(defn dec-after\n  [eid order]\n  (->> (d/q '[:find ?ch ?new-o\n              :in $ % ?p ?at\n              :where (dec-after ?p ?at ?ch ?new-o)]\n            @db/dsdb rules eid order)\n       map-order))\n\n\n;; xxx 2 kinds of operations\n;; write operations, it's nice to have entire block and entire parent block to make TXes\n;; read operations (navigation), only need uids\n\n;; xxx these all assume all blocks are open. have to skip closed blocks\n;; TODO: focus AND set selection-start for :editing/uid\n\n(defn prev-sibling-uid\n  [uid]\n  (d/q '[:find ?sib-uid .\n         :in $ ?block-uid\n         :where\n         [?block :block/uid ?block-uid]\n         [?block :block/order ?block-o]\n         [?parent :block/children ?block]\n         [?parent :block/children ?sib]\n         [?sib :block/order ?sib-o]\n         [?sib :block/uid ?sib-uid]\n         [(dec ?block-o) ?prev-sib-o]\n         [(= ?sib-o ?prev-sib-o)]]\n       @db/dsdb uid))\n\n;; if order 0, go to parent\n;; if order n, go to prev siblings deepest child\n(defn prev-block-uid\n  [uid]\n  (let [block (db/get-block [:block/uid uid])\n        parent (db/get-parent [:block/uid uid])\n        deepest-child-prev-sibling (db/deepest-child-block [:block/uid (prev-sibling-uid uid)])]\n    (if (zero? (:block/order block))\n      (:block/uid parent)\n      (:block/uid deepest-child-prev-sibling))))\n\n\n(reg-event-fx\n  :up\n  (fn [_ [_ uid]]\n    {:dispatch [:editing/uid (prev-block-uid uid)]}))\n\n\n(reg-event-fx\n  :left\n  (fn [_ [_ uid]]\n    {:dispatch [:editing/uid (prev-block-uid uid)]}))\n\n\n(defn next-sibling-block\n  [uid]\n  (d/q '[:find (pull ?sib [*]) .\n         :in $ ?block-uid\n         :where\n         [?block :block/uid ?block-uid]\n         [?block :block/order ?block-o]\n         [?parent :block/children ?block]\n         [?parent :block/children ?sib]\n         [?sib :block/order ?sib-o]\n         [?sib :block/uid ?sib-uid]\n         [(inc ?block-o) ?prev-sib-o]\n         [(= ?sib-o ?prev-sib-o)]]\n       @db/dsdb uid))\n\n\n(defn next-sibling-block-recursively\n  [uid]\n  (loop [uid uid]\n    (let [sib (next-sibling-block uid)\n          parent (db/get-parent [:block/uid uid])]\n      (if (or sib (:node/title parent))\n        sib\n        (recur (:block/uid parent))))))\n\n;; if child, go to child 0\n;; else recursively find next sibling of parent\n(defn next-block-uid\n  [uid]\n  (let [block (->> (db/get-block [:block/uid uid])\n                   db/sort-block-children)\n        ch (:block/children block)\n        next-block-recursive (next-sibling-block-recursively uid)]\n    (cond\n      ch (:block/uid (first ch))\n      next-block-recursive (:block/uid next-block-recursive))))\n\n\n(reg-event-fx\n  :down\n  (fn [_ [_ uid]]\n    {:dispatch [:editing/uid (next-block-uid uid)]}))\n\n\n(reg-event-fx\n  :right\n  (fn [_ [_ uid]]\n    {:dispatch [:editing/uid (next-block-uid uid)]}))\n\n\n;; no-op if root 0th child\n;; otherwise delete block and join with previous block\n(defn backspace\n  [uid value]\n  (let [block (db/get-block [:block/uid uid])\n        parent (db/get-parent [:block/uid uid])\n        reindex (dec-after (:db/id parent) (:block/order block))\n        prev-block-uid- (prev-block-uid uid)\n        {prev-block-string :block/string} (db/get-block [:block/uid prev-block-uid-])]\n    (cond\n      (and (:node/title parent) (zero? (:block/order block))) nil\n      (:block/children block) nil\n      :else {:dispatch-later [{:ms 0 :dispatch [:transact [[:db/retractEntity [:block/uid uid]]\n                                                           [:db/add [:block/uid prev-block-uid-] :block/string (str prev-block-string value)]\n                                                           {:db/id (:db/id parent) :block/children reindex}]]}\n                              {:ms 10 :dispatch [:editing/uid prev-block-uid-]}]})))\n\n\n(reg-event-fx\n  :backspace\n  (fn [_ [_ uid value]]\n    (backspace uid value)))\n\n\n(defn split-block\n  [uid val index state]\n  (let [parent (db/get-parent [:block/uid uid])\n        block (db/get-block [:block/uid uid])\n        head (subs val 0 index)\n        tail (subs val index)\n        new-uid (gen-block-uid)\n        new-block {:db/id        -1\n                   :block/order  (inc (:block/order block))\n                   :block/uid    new-uid\n                   :block/open   true\n                   :block/string tail}\n        reindex (->> (inc-after (:db/id parent) (:block/order block))\n                     (concat [new-block]))]\n    (swap! state assoc :atom-string head) ;; FIXME: bad vibes - but easiest solution right now\n    {:transact! [[:db/add (:db/id block) :block/string head]\n                 {:db/id (:db/id parent)\n                  :block/children reindex}]\n     :dispatch  [:editing/uid new-uid]}))\n\n\n(defn bump-up\n  \"If user presses enter at the start of non-empty string, push that block down and\n  and start editing a new block in the position of originating block - 'bump up' \"\n  [uid]\n  (let [parent (db/get-parent [:block/uid uid])\n        block (db/get-block [:block/uid uid])\n        new-uid (gen-block-uid)\n        new-block {:db/id        -1\n                   :block/order  (:block/order block)\n                   :block/uid    new-uid\n                   :block/open   true\n                   :block/string \"\"}\n        reindex (->> (inc-after (:db/id parent) (dec (:block/order block)))\n                     (concat [new-block]))]\n    {:transact! [{:db/id (:db/id parent) :block/children reindex :block/string \"\"}]\n     :dispatch [:editing/uid new-uid]}))\n\n\n(defn new-block\n  \"Add a new-block after block\"\n  [block parent]\n  (let [new-uid   (gen-block-uid)\n        new-block {:block/order  (inc (:block/order block))\n                   :block/uid    new-uid\n                   :block/open   true\n                   :block/string \"\"}\n        reindex (->> (inc-after (:db/id parent) (:block/order block))\n                     (concat [new-block]))]\n    {:dispatch-n [[:transact [{:db/id          [:block/uid (:block/uid parent)]\n                               :block/children reindex}]]\n                  [:editing/uid new-uid]]}))\n\n\n(defn enter\n  [uid val index state]\n  (let [block       (db/get-block [:block/uid uid])\n        parent      (db/get-parent [:block/uid uid])\n        root-block? (boolean (:node/title parent))]\n    (cond\n      (not (zero? index)) (split-block uid val index state)\n      (and (empty? val) root-block?) (new-block block parent)\n      (empty? val) {:dispatch [:unindent uid]}\n      (and (zero? index) val) (bump-up uid))))\n\n\n(reg-event-fx\n  :enter\n  (fn [_ [_ uid val index state]]\n    (enter uid val index state)))\n\n\n(defn indent\n  [uid]\n  (let [block (db/get-block [:block/uid uid])\n        parent (db/get-parent [:block/uid uid])\n        older-sib (->> parent\n                       :block/children\n                       (filter #(= (dec (:block/order block)) (:block/order %)))\n                       first\n                       :db/id\n                       db/get-block)\n        new-block {:db/id (:db/id block) :block/order (count (:block/children older-sib))}\n        reindex-blocks (->> (dec-after (:db/id parent) (:block/order block)))]\n    {:transact! [[:db/retract (:db/id parent) :block/children (:db/id block)]\n                 {:db/id (:db/id older-sib) :block/children [new-block]} ;; becomes child of older sibling block \u2014 same parent but order-1\n                 {:db/id (:db/id parent) :block/children reindex-blocks}]}))\n\n\n(reg-event-fx\n  :indent\n  (fn [_ [_ uid]]\n    (indent uid)))\n\n\n;; TODO: no-op when user tries to unindent to a child out of current context\n(defn unindent\n  [uid]\n  (let [parent (db/get-parent [:block/uid uid])\n        grandpa (db/get-parent (:db/id parent))\n        new-block {:block/uid uid :block/order (inc (:block/order parent))}\n        reindex-grandpa (->> (inc-after (:db/id grandpa) (:block/order parent))\n                             (concat [new-block]))]\n    (when (and parent grandpa)\n      {:transact! [[:db/retract (:db/id parent) :block/children [:block/uid uid]]\n                   {:db/id (:db/id grandpa) :block/children reindex-grandpa}]})))\n\n\n(reg-event-fx\n  :unindent\n  (fn [_ [_ uid]]\n    (unindent uid)))\n\n\n(defn target-child\n  [source source-parent target]\n  (let [new-block {:block/uid (:block/uid source) :block/order 0}\n        new-parent-children (->> (dec-after (:db/id source-parent) (:block/order source)))\n        new-target-children (->> (inc-after (:dbid target) 0)\n                                 (concat [new-block]))]\n    [[:db/retract (:db/id source-parent) :block/children [:block/uid (:block/uid source)]] ;; retract source from parent\n     {:db/add (:db/id source-parent) :block/children new-parent-children} ;; reindex parent without source\n     {:db/id (:db/id target) :block/children new-target-children}])) ;; reindex target. include source\n\n\n(defn between\n  \"http://blog.jenkster.com/2013/11/clojure-less-than-greater-than-tip.html\"\n  [s t x]\n  (if (< s t)\n    (and (< s x) (< x t))\n    (and (< t x) (< x s))))\n\n\n(defn target-sibling-same-parent\n  [source target parent]\n  (let [t-order (:block/order target)\n        s-order (:block/order source)\n        new-block {:db/id (:db/id source) :block/order (inc t-order)}\n        inc-or-dec (if (> s-order t-order) inc dec)\n        reindex (->> (d/q '[:find ?ch ?new-order\n                            :in $ ?parent ?s-order ?t-order ?between ?inc-or-dec\n                            :where\n                            [?parent :block/children ?ch]\n                            [?ch :block/order ?order]\n                            [(?between ?s-order ?t-order ?order)]\n                            [(?inc-or-dec ?order) ?new-order]]\n                          @db/dsdb (:db/id parent) s-order t-order between inc-or-dec)\n                     map-order\n                     (concat [new-block]))]\n    [{:db/add (:db/id parent) :block/children reindex}]))\n\n\n(defn target-sibling-diff-parent\n  [source target source-parent target-parent]\n  (let [new-block {:db/id (:db/id source) :block/order (inc (:block/order target))}\n        source-parent-children (->> (d/q '[:find ?ch ?new-order\n                                           :in $ % ?parent ?source-order\n                                           :where (dec-after ?parent ?source-order ?ch ?new-order)]\n                                         @db/dsdb rules (:db/id source-parent) (:block/order source))\n                                    map-order)\n        target-parent-children (->> (inc-after (:db/id target-parent) (:block/order target))\n                                    (concat [new-block]))]\n    [[:db/retract (:db/id source-parent) :block/children (:db/id source)]\n     {:db/id (:db/id source-parent) :block/children source-parent-children} ;; reindex source\n     {:db/id (:db/id target-parent) :block/children target-parent-children}])) ;; reindex target\n\n\n(defn drop-bullet\n  [source-uid target-uid kind]\n  (let [source        (db/get-block [:block/uid source-uid])\n        target        (db/get-block [:block/uid target-uid])\n        source-parent (db/get-parent [:block/uid source-uid])\n        target-parent (db/get-parent [:block/uid target-uid])]\n    {:transact!\n     (cond\n       ;; child always has same behavior: move to first child of target\n       (= kind :child) (target-child source source-parent target)\n       ;; do nothing if target is directly above source\n       (and (= source-parent target-parent)\n            (= 1 (- (:block/order source) (:block/order target)))) nil\n       ;; re-order blocks between source and target\n       (= source-parent target-parent) (target-sibling-same-parent source target source-parent)\n       ;;; when parent is different, re-index both source-parent and target-parent\n       (not= source-parent target-parent) (target-sibling-diff-parent source target source-parent target-parent))}))\n\n\n(reg-event-fx\n  :drop-bullet\n  (fn-traced [_ [_ source-uid target-uid kind]]\n             (drop-bullet source-uid target-uid kind)))\n\n;;;; TODO: delete the following logic when re-implementing title merge\n\n;;(defn node-with-title\n;;  [ds title]\n;;  (d/q '[:find ?e .\n;;         :in $ ?title\n;;         :where [?e :node/title ?title]]\n;;       ds title))\n;;\n;;\n;;(defn referencing-blocks\n;;  [ds title]\n;;  (d/q '[:find ?e ?s\n;;         :in $ ?regex\n;;         :where\n;;         [?e :block/string ?s]\n;;         [(re-find ?regex ?s)]]\n;;       ds (patterns/linked title)))\n;;\n;;\n;;(defn rename-refs-tx\n;;  [old-title new-title [eid s]]\n;;  (let [new-s (str/replace\n;;                s\n;;                (patterns/linked old-title)\n;;                (str \"$1$3$4\" new-title \"$2$5\"))]\n;;    [:db/add eid :block/string new-s]))\n;;\n;;\n;;(defn rename-tx\n;;  [ds old-title new-title]\n;;  (let [eid (node-with-title ds old-title)\n;;        blocks (referencing-blocks ds old-title)]\n;;    (->> blocks\n;;         (map (partial rename-refs-tx old-title new-title))\n;;         (into [[:db/add eid :node/title new-title]]))))\n;;\n;;\n;;(reg-event-fx\n;;  :node/renamed\n;;  [(rp/inject-cofx :ds)]\n;;  (fn-traced [{:keys [db ds]} [_ old-title new-title]]\n;;             (when (not= old-title new-title)\n;;               (if (node-with-title ds new-title)\n;;                 {:db (assoc db :merge-prompt {:active true\n;;                                               :old-title old-title\n;;                                               :new-title new-title})\n;;                  :timeout {:action :start\n;;                            :id :merge-prompt\n;;                            :wait 7000\n;;                            :event [:node/merge-canceled]}}\n;;                 {:transact (rename-tx ds old-title new-title)}))))\n;;\n;;\n;;(defn count-children\n;;  [ds title]\n;;  (d/q '[:find (count ?children) .\n;;         :in $ ?title\n;;         :where [?e :node/title ?title]\n;;         [?e :block/children ?children]]\n;;       ds title))\n;;\n;;\n;;(defn get-children-eids\n;;  [ds title]\n;;  (d/q '[:find [?children ...]\n;;         :in $ ?title\n;;         :where [?e :node/title ?title]\n;;         [?e :block/children ?children]]\n;;       ds title))\n;;\n;;\n;;(defn move-blocks-tx\n;;  [ds from-title to-title]\n;;  (let [block-count (count-children ds to-title)\n;;        block-eids (get-children-eids ds from-title)]\n;;    (mapcat (fn [eid]\n;;              (let [order (:block/order (d/pull ds [:block/order] eid))]\n;;                [[:db/add [:node/title to-title] :block/children eid]\n;;                 [:db/add eid :block/order (+ order block-count)]]))\n;;            block-eids)))\n;;\n;;\n;;(reg-event-fx\n;;  :node/merged\n;;  [(rp/inject-cofx :ds)]\n;;  (fn-traced [{:keys [db ds]} [_ primary-title secondary-title]]\n;;             {:db (dissoc db :merge-prompt)\n;;              :timeout {:action :clear\n;;                        :id :merge-prompt}\n;;              :transact (concat [[:db.fn/retractEntity [:node/title secondary-title]]]\n;;                                (move-blocks-tx ds secondary-title primary-title)\n;;                                (rename-tx ds primary-title secondary-title))}))\n;;\n;;\n;;(reg-event-fx\n;;  :node/merge-canceled\n;;  (fn-traced [{:keys [db]} _]\n;;             {:db (dissoc db :merge-prompt)\n;;              :timeout {:action :clear\n;;                        :id :merge-prompt}}))\n\n"]}