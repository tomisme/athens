{"version":3,"sources":["sci/impl/max_or_throw.cljc"],"mappings":"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","names":["x__4487__auto__","m__4488__auto__","sci.impl.max-or-throw/max-or-throw","goog/typeOf","m__4485__auto__","cljs.core/missing-protocol","sci.impl.max-or-throw/MaxOrThrow","this","ctx","n","sci.impl.max-or-throw/bottom","data","cljs.core/LazySeq","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","sci.impl.max-or-throw/take*","coll","err-val","temp__5735__auto__","s","cljs.core/seq","cljs.core/cons","cljs.core/first","G__58213","G__58214","G__58215","cljs.core/rest","sci.impl.max-or-throw/take-or-throw","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core/Delay","goog.object/set","G__58222","G__58223","G__58224","G__58227","G__58228","G__58229","cljs.core/PROTOCOL_SENTINEL","cljs.core/Cons","cljs.core/Range","cljs.core/Iterate","cljs.core/Repeat"],"sourcesContent":["(ns sci.impl.max-or-throw\n  {:no-doc true})\n\n(defprotocol MaxOrThrow\n  (max-or-throw [this ctx n]))\n\n(defn bottom [n data]\n  (lazy-seq (throw (ex-info (str \"Maximum number of elements realized: \" n)\n                            data))))\n\n(defn take*\n  ([n coll err-val]\n   (lazy-seq\n    (if (pos? n)\n      (when-let [s (seq coll)]\n        (cons (first s) (take* (dec n) (rest s) err-val)))\n      err-val))))\n\n(defn take-or-throw [coll ctx n]\n  (take* n coll\n         (bottom n (merge {:column (delay coll)\n                           :type :sci.error/realized-beyond-max\n                           :realize-max n\n                           :expression (:expression ctx)}))))\n\n(extend-protocol MaxOrThrow\n\n  nil\n  (max-or-throw\n    ([this ctx n] this))\n\n  #?(:clj Object :cljs default)\n  (max-or-throw\n    ([this ctx n] this))\n\n  #?(:clj clojure.lang.LazySeq :cljs LazySeq)\n  (max-or-throw\n    ([this ctx n]\n     (take-or-throw this ctx n)))\n\n  #?(:clj clojure.lang.Cons :cljs Cons)\n  (max-or-throw\n    ([this ctx n]\n     (take-or-throw this ctx n)))\n\n  #?(:clj clojure.lang.Range :cljs Range)\n  (max-or-throw\n    ([this ctx n]\n     (take-or-throw this ctx n)))\n\n  #?@(:clj [clojure.lang.LongRange\n            (max-or-throw\n             ([this ctx n]\n              (take-or-throw this ctx n)))])\n\n  #?(:clj clojure.lang.Iterate :cljs Iterate)\n  (max-or-throw\n    ([this ctx n]\n     (take-or-throw this ctx n)))\n\n  #?(:clj clojure.lang.Repeat :cljs Repeat)\n  (max-or-throw\n    ([this ctx n]\n     ;; (prn \"TYPE\" (type this))\n     (take-or-throw this ctx n)))\n  )\n"]}