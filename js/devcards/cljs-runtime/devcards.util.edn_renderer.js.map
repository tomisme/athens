{"version":3,"sources":["devcards/util/edn_renderer.cljs"],"mappings":"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","names":["js/devcards","js/devcards.util","js/devcards.util.edn-renderer","js/devcards.util.edn-renderer.*key-counter*","devcards.util.edn-renderer/*key-counter*","devcards.util.edn-renderer/get-key","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/inc","cljs.core/deref","devcards.util.edn-renderer/literal?","x","cljs.core/map-entry?","cljs.core/seq?","cljs.core/coll?","devcards.util.edn-renderer/separator*","s","js/React.createElement","sablono.interpreter/interpret","devcards.util.edn-renderer/clearfix-separator*","devcards.util.edn-renderer/separate-fn","coll","e41734","cljs.core/every?","js/Error","e","devcards.util.edn-renderer/interpose-separator","rct-coll","sep-fn","cljs.core/rest","cljs.core.interleave.cljs$core$IFn$_invoke$arity$2","cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1","cljs.core/cons","cljs.core/first","cljs.core/to-array","devcards.util.edn-renderer/literal","class","devcards.util.utils/pprint-str","devcards.util.edn-renderer/html-val","index","v","devcards.util.edn-renderer/html","devcards.util.edn-renderer/join-html","separator","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","p__41738","vec__41739","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","devcards.util.edn-renderer/html-keyval","k","cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic","devcards.util.edn-renderer/html-keyvals","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","cljs.core/vals","devcards.util.edn-renderer/open-close","class-str","opener","closer","cljs.core/hash","devcards.util.edn-renderer/html-collection","devcards.util.edn-renderer/html-map","devcards.util.edn-renderer/html-string","cljs.core/Keyword","cljs.core/Symbol","cljs.core/map?","cljs.core/set?","cljs.core/vector?","devcards.util.edn-renderer/html-edn","*key-counter*-orig-val__41750","*key-counter*-temp-val__41751","cljs.core.atom.cljs$core$IFn$_invoke$arity$1"],"sourcesContent":["(ns devcards.util.edn-renderer\n  (:require\n   [sablono.core :as sab]\n   [devcards.util.utils :as utils]))\n\n(defonce ^:dynamic *key-counter* nil)\n\n(defn get-key []\n  (swap! *key-counter* inc)\n  (str \"k-\" @*key-counter*))\n\n(declare html)\n\n(defn literal? [x]\n  (and\n   (not (map-entry? x))\n   (not (seq? x))\n   (not (coll? x))))\n\n(defn separator* [s]\n  (sab/html [:span.seperator {:key (get-key)} s]))\n\n(defn clearfix-separator* [s]\n  (sab/html [:span {:key (get-key)} (separator* s) [:span.clearfix]]))\n\n(defn separate-fn [coll]\n  (try\n    (if (not (every? literal? coll)) clearfix-separator* separator*)\n    (catch js/Error e\n      clearfix-separator*)))\n\n(defn interpose-separator [rct-coll s sep-fn]\n  (->> (rest rct-coll)\n       (interleave (repeatedly #(sep-fn s))) \n       (cons (first rct-coll))\n       to-array))\n\n(defn literal [class x]\n  (sab/html [:span { :className class :key (get-key)} (utils/pprint-str x)]))\n\n(defn html-val [index v]\n  (sab/html [:span {:key index} (html v)]))\n\n(defn join-html [separator coll]\n  (interpose-separator (into [] (map-indexed html-val coll))\n                       separator\n                       (separate-fn coll)))\n\n(defn html-keyval [[k v]]\n  (sab/html\n   [:span.keyval { :key (prn-str k)} (html k) (html v)]))\n\n(defn html-keyvals [coll]\n  (interpose-separator (mapv html-keyval coll)\n                       \" \"\n                       (separate-fn (vals coll))))\n\n(defn open-close [class-str opener closer rct-coll]\n  (sab/html\n   [:span {:className class-str :key (str (hash rct-coll))}\n    [:span.opener {:key 1} opener]\n    [:span.contents {:key 2} rct-coll]\n    [:span.closer {:key 3} closer]]))\n\n(defn html-collection [class opener closer coll]\n  (open-close (str \"collection \" class ) opener closer (join-html \" \" coll))\n    ;; this speeds things up but fails in om\n  #_(rct/pure coll ...)\n  )\n\n(defn html-map [coll]\n  (open-close \"collection map\" \"{\" \"}\" (html-keyvals coll))\n  ;; this speeds things up but fails in om\n  #_(rct/pure coll ...))\n\n(defn html-string [s]\n  (open-close \"string\" \"\\\"\" \"\\\"\" s))\n\n(defn html [x]\n  (cond\n   (number? x)  (literal \"number\" x)\n   (keyword? x) (literal \"keyword\" x)\n   (symbol? x)  (literal \"symbol\" x)\n   (string? x)  (html-string x)\n   (map? x)     (html-map x)\n   (set? x)     (html-collection \"set\"    \"#{\" \"}\" x)\n   (vector? x)  (html-collection \"vector\" \"[\" \"]\" x)\n   (seq? x)     (html-collection \"seq\"    \"(\" \")\" x)\n   :else        (literal \"literal\" x)))\n\n(defn html-edn [e]\n  (binding [*key-counter* (atom 0)]\n    (sab/html [:div.com-rigsomelight-rendered-edn.com-rigsomelight-devcards-typog\n               {:key \"devcards-edn-block\"} (html e)])))\n"]}