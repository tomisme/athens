{"version":3,"sources":["athens/parse_renderer.cljs"],"mappings":"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","names":["athens.parse-renderer/page-link","athens.style.color.cljs$core$IFn$_invoke$arity$1","athens.style/OPACITIES","athens.style.color.cljs$core$IFn$_invoke$arity$2","athens.parse-renderer/hashtag","athens.parse-renderer/image","athens.parse-renderer/url-link","athens.parse-renderer/block-ref","athens.parse-renderer/transform","tree","G__59834","G__59835","instaparse.core/transform","contents","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","title","node","G__59836","G__59837","G__59838","posh.reagent/pull","athens.db/dsdb","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$2","e","athens.router.navigate_uid.cljs$core$IFn$_invoke$arity$2","cljs.core/deref","uid","block","G__59839","G__59840","G__59841","string","athens.sci/sci-block?","athens.router.navigate_uid.cljs$core$IFn$_invoke$arity$1","athens.parse-renderer/parse-and-render","tag-name","G__59842","G__59843","G__59844","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$1","p__59845","map__59846","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","url","alt","p__59848","map__59849","text","result","athens.parser/parse-to-ast","instaparse.core/failure?","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","instaparse.core/get-failure","cljs.core/vec"],"sourcesContent":["(ns athens.parse-renderer\n  (:require\n    [athens.db :as db]\n    [athens.parser :as parser]\n    [athens.router :refer [navigate-uid]]\n    [athens.sci :refer [sci-block?]]\n    [athens.style :refer [color OPACITIES]]\n    [instaparse.core :as insta]\n    [posh.reagent :refer [pull #_q]]\n    [stylefy.core :as stylefy :refer [use-style]]))\n\n\n(declare parse-and-render)\n\n\n;;; Styles\n\n(def page-link {:cursor \"pointer\"\n                :text-decoration \"none\"\n                :color (color :link-color)\n                :position \"relative\"\n                ::stylefy/manual [[:.formatting {:color (color :body-text-color)\n                                                 :opacity (:opacity-low OPACITIES)}]\n                                  [:&:after {:content \"''\"\n                                             :display \"inline-block\"\n                                             :position \"absolute\"\n                                             :top \"-1px\"\n                                             :right \"-0.2em\"\n                                             :left \"-0.2em\"\n                                             :bottom \"-1px\"\n                                             :z-index -1\n                                             :opacity \"0\"\n                                             :border-radius \"4px\"\n                                             :transition \"all 0.05s ease\"\n                                             :background (color :link-color 0.1)}]\n                                  [:&:hover:after {:opacity \"1\"}]]})\n\n\n(def hashtag {::stylefy/mode [[:hover {:text-decoration \"underline\"}]]\n              ::stylefy/manual [[:.formatting {:opacity (:opacity-low OPACITIES)}]]})\n\n\n(def image {:border-radius \"2px\"})\n\n\n(def url-link {:cursor \"pointer\"\n               :text-decoration \"none\"\n               :color (color :link-color)\n               ::stylefy/mode [[:hover {:text-decoration \"underline\"}]]})\n\n\n(def block-ref {:font-size \"0.9em\"\n                :transition \"background 0.05s ease\"\n                :border-bottom [[\"1px\" \"solid\" (color :highlight-color)]]\n                ::stylefy/mode [[:hover {:background-color (color :highlight-color :opacity-lower)\n                                         :cursor \"alias\"}]]})\n\n\n;;; Components\n\n\n;; Instaparse transforming docs: https://github.com/Engelberg/instaparse#transforming-the-tree\n(defn transform\n  \"Transforms Instaparse output to Hiccup.\"\n  [tree]\n  (insta/transform\n    {:block     (fn [& contents]\n                  (concat [:span {:class \"block\" :style {:white-space \"pre-line\"}}] contents))\n     :page-link (fn [title]\n                  (let [node (pull db/dsdb '[*] [:node/title title])]\n                    [:span (use-style page-link {:class \"page-link\"})\n                     [:span {:class \"formatting\"} \"[[\"]\n                     [:span {:on-click (fn [e] (navigate-uid (:block/uid @node) e))} title]\n                     [:span {:class \"formatting\"} \"]]\"]]))\n     :block-ref (fn [uid]\n                  (let [block (pull db/dsdb '[*] [:block/uid uid])\n                        string (:block/string @block)]\n                    (if (sci-block? @block)\n                      [:athens/sci-modifier string]\n                      [:span (use-style block-ref {:class \"block-ref\"})\n                       [:span {:class \"contents\" :on-click #(navigate-uid uid)} (parse-and-render string)]])))\n     :hashtag   (fn [tag-name]\n                  (let [node (pull db/dsdb '[*] [:node/title tag-name])]\n                    [:span (use-style hashtag) {:class    \"hashtag\"\n                                                :on-click #(navigate-uid (:block/uid @node))}\n                     [:span {:class \"formatting\"} \"#\"]\n                     [:span {:class \"contents\"} tag-name]]))\n     :url-image (fn [{url :url alt :alt}]\n                  [:img (use-style image {:class \"url-image\"\n                                          :alt   alt\n                                          :src   url})])\n     :url-link  (fn [{url :url} text]\n                  [:a (use-style url-link {:class \"url-link\"\n                                           :href  url})\n                   text])\n     :bold      (fn [text]\n                  [:strong {:class \"contents bold\"} text])}\n    tree))\n\n\n(defn parse-and-render\n  \"Converts a string of block syntax to Hiccup, with fallback formatting if it can\u2019t be parsed.\"\n  [string]\n  (let [result (parser/parse-to-ast string)]\n    (if (insta/failure? result)\n      [:span\n       {:title (pr-str (insta/get-failure result))\n        :style {:color \"red\"}}\n       string]\n      (vec (transform result)))))\n"]}