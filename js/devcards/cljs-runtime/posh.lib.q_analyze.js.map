{"version":3,"sources":["posh/lib/q_analyze.cljc"],"mappings":"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","names":["posh.lib.q-analyze/take-until","stop-at?","ls","or__4185__auto__","cljs.core/empty?","G__30640","cljs.core/first","cljs.core/cons","G__30641","G__30642","cljs.core/rest","posh.lib.q-analyze/rest-at","rest-at?","G__30644","posh.lib.q-analyze/split-list-at","split-at?","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","G__30645","G__30646","posh.lib.q-analyze/query-to-map","query","cljs.core/map?","cljs.core/keyword?","posh.lib.q-analyze/dbvar?","x","cljs.core/Symbol","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","posh.lib.q-analyze/qvar?","posh.lib.q-analyze/get-all-vars","cljs.core/coll?","clojure.set.union.cljs$core$IFn$_invoke$arity$2","G__30648","G__30649","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","G__30650","G__30651","posh.lib.q-analyze/qvar-gen","qvar-count","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/inc","posh.lib.q-analyze/eav?","v","cljs.core/vector?","cljs.core/second","posh.lib.q-analyze/wildcard?","s","posh.lib.q-analyze/normalize-eav-helper","eav","n","neweav","vars","and__4174__auto__","G__30654","G__30655","G__30656","G__30657","var","G__30658","G__30659","G__30660","G__30661","posh.lib.q-analyze/normalize-eav","dbeav","cljs.core/vec","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core.drop.cljs$core$IFn$_invoke$arity$2","posh.lib.q-analyze/normalize-all-eavs","where","cljs.core/list?","cljs.core/some","G__30671","G__30672","cljs.core.map.cljs$core$IFn$_invoke$arity$2","posh.lib.q-analyze/get-eavs","item","cljs.core/seq?","G__30681","G__30682","G__30683","G__30684","G__30685","ocr-30689","cljs.core/count","ocr-30689_0__30694","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","ocr-30689_0__30694_0__30696","cljs.core.match/backtrack","e30704","js/Error","e__29737__auto__","e30703","e30701","db","e","a","G__30705","G__30702","G__30706","posh.lib.q-analyze/qm-to-query","qm","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__30707","vec__30708","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","xs","k","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","posh.lib.q-analyze/create-q-datoms","results","eavs","cljs.core/set","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","r","vs","cljs.core/zipmap","p1__30711#","cljs.core.get.cljs$core$IFn$_invoke$arity$2","posh.lib.q-analyze/count-qvars","cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic","cljs.core/+","G__30712","G__30713","G__30714","posh.lib.q-analyze/fill-qvar-set","qvar","iter__4582__auto__","s__30716","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","b__30718","cljs.core/chunk-buffer","i__30717","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__30715","cljs.core/chunk-rest","posh.lib.q-analyze/seq-merge-with","f","seq1","seq2","G__30719","G__30720","G__30721","G__30722","G__30723","posh.lib.q-analyze/stack-vectors","stacked","cljs.core/conj","cljs.core.take.cljs$core$IFn$_invoke$arity$2","cljs.core.repeat.cljs$core$IFn$_invoke$arity$1","p__30726","vec__30727","posh.lib.q-analyze/pattern-from-eav--old","vec__30730","qe","qa","qv","s__30734","xs__6292__auto__","iterys__4578__auto__","s__30736","s__30738","b__30740","i__30739","iter__30737","fs__4579__auto__","iter__30735","iter__30733","ee","aa","vv","wildcard-count","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","p1__30724#","exposed-qvars","p__30741","vec__30742","p__30745","vec__30746","var?","val","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","p1__30725#","posh.lib.q-analyze/get_","m","posh.lib.q-analyze/pattern-from-eav","ocr-30749","ocr-30750","ocr-30749_0__30778","ocr-30749_1__30779","ocr-30749_2__30780","e30854","ocr-30750_2__30783","e30856","e30857","e30855","e30849","ocr-30750_1__30785","e30852","e30853","e30851","e30850","e30791","ocr-30750_0__30787","e30848","e30847","e30793","e30844","ocr-30750_1__30788","e30845","e30846","e30843","e30794","e30842","e30839","e30841","e30840","e30795","ocr-30750_2__30789","e30838","e30837","e30796","e30836","e30835","e30797","e30834","e30833","e30798","e30832","e30831","e30799","e30830","e30829","e30800","e30828","e30827","e30801","e30826","e30825","e30802","e30824","e30823","e30803","e30822","e30817","e30821","e30818","e30820","e30819","e30804","e30816","e30815","e30805","e30814","e30813","e30806","e30812","e30808","e30810","e30811","e30809","e30807","e30792","e30790","posh.lib.q-analyze/filter-pattern-from-eav","ocr-30858","ocr-30859","ocr-30858_0__30884","ocr-30858_1__30885","ocr-30858_2__30886","e30948","ocr-30859_2__30889","e30950","e30951","e30949","e30943","ocr-30859_1__30891","e30946","e30947","e30945","e30944","e30897","ocr-30859_0__30893","e30942","e30941","e30899","e30938","ocr-30859_1__30894","e30939","e30940","e30937","e30900","e30936","e30935","e30901","ocr-30859_2__30895","e30934","e30933","e30902","e30932","e30931","e30903","e30930","e30927","e30929","e30928","e30904","e30926","e30925","e30905","e30924","e30918","e30922","e30923","e30919","e30921","e30920","e30906","e30917","e30916","e30907","e30915","e30914","e30908","e30913","e30910","e30912","e30911","e30909","e30898","e30896","posh.lib.q-analyze/patterns-from-eavs","dbvarmap","patterns","cljs.core/group-by","p__30953","vec__30954","p1__30952#","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/merge","posh.lib.q-analyze/filter-patterns-from-eavs","p__30958","vec__30959","p1__30957#","posh.lib.q-analyze/just-qvars","ins","args","G__30962","G__30963","posh.lib.q-analyze/get-input-sets","q-fn","varmap","qvars","cljs.core/keys","varvals","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/vals","varsets","cljs.core/merge-with","p1__30964#","posh.lib.q-analyze/pull-pattern?","posh.lib.q-analyze/replace-find-pulls","qfind","clojure.walk/postwalk","posh.lib.q-analyze/get-pull-var-pairs","posh.lib.q-analyze/match-var-to-db","dbeavs","vec__30965","posh.lib.pull-analyze/ref?","posh.lib.q-analyze/match-vars-to-dbs","G__30968","G__30969","G__30970","posh.lib.q-analyze/index-of","posh.lib.q-analyze/db-arg?","arg","posh.lib.q-analyze/convert-args-to","type","p1__30971#","posh.lib.q-analyze/make-dbarg-map","G__30972","G__30973","posh.lib.q-analyze/split-datoms","datoms","p__30974","vec__30975","db-sym","db-datoms","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","posh.lib.q-analyze/schema-ref?","schema","posh.lib.q-analyze/indexes-of","coll","p1__30979#","p2__30978#","cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2","posh.lib.q-analyze/lookup-ref?","var-name","var-value","clause","remaining","pred__30983","expr__30984","cljs.core/=","posh.lib.q-analyze/resolve-any-idents","entid-fn","input-set","s__30987","b__30989","i__30988","iter__30986","posh.lib.q-analyze/q-analyze","dcfg","retrieve","newqm","fixed-args","p__30994","vec__30995","sym","lookup-ref-patterns","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core.every_pred.cljs$core$IFn$_invoke$arity$3","p__30998","vec__30999","p__31002","vec__31003","p__31006","vec__31007","posh.lib.util/t-for-datoms","G__31011","G__31012","fexpr__31010","in-vars","eavs-ins","p__31013","vec__31014","seq__31015","first__31016","cljs.core/next","temp__5733__auto__","linked-qvars","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","p__31017","vec__31018","rvars","prepped-eavs","p1__30992#","cljs.core/not","p1__30993#","cljs.core/chunk-first"],"sourcesContent":["(ns posh.lib.q-analyze\n  (:require\n   [posh.lib.util :as util]\n   [posh.lib.datom-matcher :as dm]\n   [posh.lib.pull-analyze :as pa]\n   #?(:clj [clojure.core.match :refer [match]]\n      :cljs [cljs.core.match :refer-macros [match]])))\n\n;;;;;;;;; Q-datoms  -- gets datoms for a query\n\n(defn take-until [stop-at? ls]\n  (if (or\n       (empty? ls)\n       (stop-at? (first ls)))\n    []\n    (cons (first ls) (take-until stop-at? (rest ls)))))\n\n(defn rest-at [rest-at? ls]\n  (if (or (empty? ls) (rest-at? (first ls)))\n    ls\n    (recur rest-at? (rest ls))))\n\n(defn split-list-at [split-at? ls]\n  (if (empty? ls)\n    {}\n    (merge {(first ls) (take-until split-at? (take-until split-at? (rest ls)))}\n           (split-list-at split-at? (rest-at split-at? (rest ls))))))\n\n(defn query-to-map [query]\n  (if-not (map? query)\n    (split-list-at keyword? query)\n    query))\n\n(defn dbvar? [x] (and (symbol? x) (= (first (str x)) \\$)))\n\n(defn qvar? [x] (and (symbol? x) (= (first (str x)) \\?)))\n\n(defn get-all-vars [query]\n  (cond\n   (empty? query) #{}\n   (coll? (first query)) (clojure.set/union (get-all-vars (first query))\n                                            (get-all-vars (rest query)))\n   (qvar? (first query)) (conj (get-all-vars (rest query)) (first query))\n   :else (get-all-vars (rest query))))\n\n(def qvar-gen\n  (let [qvar-count (atom 3284832)]\n    (fn [] (symbol (str \"?var\" (swap! qvar-count inc))))))\n\n(defn eav? [v]\n  (and (vector? v)\n       (not (or (coll? (first v))\n                (coll? (second v))))))\n\n(defn wildcard? [s] (= s '_))\n\n(defn normalize-eav-helper [eav n neweav vars]\n  (if (= n 0)\n    {:eav neweav :vars vars}\n    (if (and (first eav) (not (wildcard? (first eav))))\n      (normalize-eav-helper (rest eav) (dec n)\n                            (conj neweav (first eav))\n                            vars)\n      (let [var (qvar-gen)]\n        (normalize-eav-helper (rest eav) (dec n)\n                              (conj neweav var)\n                              (conj vars var))))))\n\n(defn normalize-eav [eav]\n  (let [dbeav (if (dbvar? (first eav))\n                eav\n                (cons (symbol \"$\") eav))]\n    (vec (cons (first dbeav) (concat (:eav (normalize-eav-helper (rest dbeav) 3 [] []))\n                                     (drop 4 dbeav))))))\n\n(defn normalize-all-eavs [where]\n  (cond\n   (empty? where) []\n\n   (list? where)\n   (if (some #{(first where)} ['or-join 'not-join]) ;; skip first vector\n     (concat [(first where) (second where)] (normalize-all-eavs (vec (drop 2 where))))\n     (cons (first where) (normalize-all-eavs (vec (rest where)))))\n\n   (eav? where)\n   (normalize-eav where)\n\n   (and (vector? where) (list? (first where)))\n   where\n\n   (coll? where)\n   (vec (map normalize-all-eavs where))\n\n   :else where))\n\n\n(defn get-eavs [where]\n  (if (empty? where)\n    []\n    (let [item (first where)]\n      (cond\n       (seq? item)\n       (if (some #{(first item)} ['or-join 'not-join]) ;; skip first vector\n         (concat (get-eavs (vec (rest where))) (get-eavs (vec (drop 2 item))))\n         (concat (get-eavs (vec (rest where))) (get-eavs (vec (rest item)))))\n\n       (eav? item)\n       (cons item (get-eavs (rest where)))\n\n       (and (vector? item) (seq? (first item)))\n       (match (vec (concat [(vec (first item))] (rest item)))\n              [['get-else db e a _] v]\n              (concat [[db e a v]] (get-eavs (vec (rest where))))\n              :else (get-eavs (vec (rest where))))\n\n       :else (get-eavs (vec (rest where)))))))\n\n\n(defn qm-to-query [qm]\n  (reduce (fn [xs [k v]]\n            (concat xs [k] v))\n          []\n          qm))\n\n(defn create-q-datoms [results eavs vars]\n  (set\n   (mapcat (fn [r] (let [vs (zipmap vars r)]\n                    (map (fn [eav]\n                           (vec (map #(if (qvar? %) (get vs %) %) eav)))\n                         eavs)))\n           results)))\n\n;;; q pattern gen ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn count-qvars [xs]\n  (cond\n   (empty? xs) {}\n   (coll? (first xs)) (merge-with + (count-qvars (first xs)) (count-qvars (rest xs)))\n   :else (merge-with +\n                     (when (qvar? (first xs)) {(first xs) 1})\n                     (count-qvars (rest xs)))))\n\n(defn fill-qvar-set [qvar results where]\n  (for [r results]\n    (let [vars (zipmap where r)]\n      (get vars qvar))))\n\n(defn seq-merge-with [f seq1 seq2]\n  (if (empty? seq1)\n    []\n    (cons (f (first seq1) (first seq2))\n          (seq-merge-with f (rest seq1) (rest seq2)))))\n\n(defn stack-vectors [vs]\n  (reduce (fn [stacked eav]\n            (seq-merge-with conj stacked eav))\n          (take (count (first vs)) (repeat #{})) vs))\n\n(defn pattern-from-eav--old [vars [e a v :as eav]]\n  (let [[qe qa qv] (map qvar? eav)]\n    (for [ee (if qe ['_ (get vars e)] [e])\n          aa (if qa ['_ (get vars a)] [a])\n          vv (if qv ['_ (get vars v)] [v])\n          :when (let [wildcard-count\n                      (reduce + (map #(if (= '_ %) 1 0) [ee aa vv]))\n                      exposed-qvars\n                      (reduce + (map (fn [[var? val]]\n                                       (if (and var? (not= val '_))\n                                         1\n                                         0))\n                                     [[qe ee] [qa aa] [qv vv]]))\n                      qvar-count (reduce + (map #(if % 1 0) [qe qa qv]))]\n                  (and (>= wildcard-count 1)\n                       (or (and (> qvar-count 1) (= 1 exposed-qvars))\n                           (<= qvar-count 1))\n                       (<= wildcard-count qvar-count)))]\n      [ee aa vv])))\n\n(defn get_ [m k]\n  \"returns '_ if k is not found\"\n  (or (get m k) '_))\n\n;; generates matching patterns from eavs.\n;; the qvars are \"connecting\" vars that are used between\n;; two eavs in the query. the '_ wildcards are either output\n;; vars or originally wildcards. Input vars and things like\n;; attribs that are hand-typed in the query are there as\n;; they are or as sets (if there was a var that inputted a set)\n(defn pattern-from-eav [vars eav]\n  (match [(vec eav) (vec (map qvar? eav))]\n         [['_ '_ '_] _] [[]]\n         [['_ '_ v] [_ _ false]] [['_ '_ v]]\n         [['_ '_ v] [_ _ true]] [['_ '_ (get_ vars v)]]\n         [['_ a '_] [_ false _]] [['_ a '_]]\n         [['_ a '_] [_ true _]] [['_ (get_ vars a) '_]]\n         [[e '_ '_] [false _ _]] [[e '_ '_]]\n         [[e '_ '_] [true _ _]] [[(get_ vars e) '_ '_]]\n         [[e a '_] [true true _]] [[(get_ vars e) '_ '_]\n                                   ['_ (get_ vars a) '_]]\n         [[e a '_] [true false _]] [[(get_ vars e) a '_]]\n         [[e a '_] [false true _]] [[e (get_ vars a) '_]]\n         [[e a '_] [false false _]] [[e a '_]]\n         [[e '_ v] [true _ true]] [[(get_ vars e) '_ '_]\n                                   ['_ '_ (get_ vars v)]]\n         [[e '_ v] [true _ false]] [[(get_ vars e) '_ v]]\n         [[e '_ v] [false _ true]] [[e '_ (get_ vars v)]]\n         [[e '_ v] [false _ false]] [[e '_ v]]\n         [['_ a v] [_ true true]] [['_ '_  (get_ vars v)]\n                                   ['_ (get_ vars a) '_]]\n         [['_ a v] [_ true false]] [['_ (get_ vars a) v]]\n         [['_ a v] [_ false true]] [['_ a (get_ vars v)]]\n         [['_ a v] [_ false false]] [['_ a v]]\n         [[e a v] [true true true]] [['_ '_  (get_ vars v)]\n                                     ['_ (get_ vars a) '_]\n                                     [(get_ vars e) '_ '_]]\n         [[e a v] [false true true]] [[e '_  (get_ vars v)]\n                                      [e (get_ vars a) '_]]\n         [[e a v] [true false true]] [['_ a  (get_ vars v)]\n                                      [(get_ vars e) a '_]]\n         [[e a v] [true true false]] [['_ (get_ vars a) v]\n                                      [(get_ vars e) '_ v]]\n         [[e a v] [false false true]] [[e a '_]]\n         [[e a v] [true false false]] [['_ a v]]\n         [[e a v] [false true false]] [[e '_ v]]\n         [[e a v] [false false false]] [[e a v]]   ;;; maybe this?\n         :else [[]]))\n\n\n\n\n;; this is the pattern that tells the filter it should update.\n;; it won't match any v's that change unless they are connected\n;; to some other part of the query. i.e. if the query is looking\n;; at :person/name it won't update when the name changes.\n(defn filter-pattern-from-eav [vars eav]\n  (match [(vec eav) (vec (map qvar? eav))]\n         [['_ '_ '_] _] []  ;; if it matches everything, it never\n         ;; needs to update itself\n         [['_ '_ v] [_ _ false]] [['_ '_ v]]\n         [['_ '_ v] [_ _ true]] [['_ '_ (vars v)]]\n         [['_ a '_] [_ false _]] [['_ a '_]]\n         [['_ a '_] [_ true _]] [['_ (vars a) '_]]\n         [[e '_ '_] [false _ _]] [[e '_ '_]]\n         [[e '_ '_] [true _ _]] [[(vars e) '_ '_]]\n         [[e a '_] [true true _]] [[(vars e) '_ '_]\n                                   ['_ (vars a) '_]]\n         [[e a '_] [true false _]] [[(vars e) a '_]]\n         [[e a '_] [false true _]] [[e (vars a) '_]]\n         [[e '_ v] [true _ true]] [[(vars e) '_ '_]\n                                   ['_ '_ (vars v)]]\n         [[e '_ v] [true _ false]] [[(vars e) '_ v]]\n         [[e '_ v] [false _ true]] [[e '_ (vars v)]]\n         [['_ a v] [_ true true]] [['_ '_  (vars v)]\n                                   ['_ (vars a) '_]]\n         [['_ a v] [_ true false]] [['_ (vars a) v]]\n         [['_ a v] [_ false true]] [['_ a (vars v)]]\n         [[e a v] [true true true]] [['_ '_  (vars v)]\n                                     ['_ (vars a) '_]\n                                     [(vars e) '_ '_]]\n         [[e a v] [false true true]] [[e '_  (vars v)]\n                                      [e (vars a) '_]]\n         [[e a v] [true false true]] [['_ a  (vars v)]\n                                      [(vars e) a '_]]\n         [[e a v] [true true false]] [['_ (vars a) v]\n                                      [(vars e) '_ v]]\n         [[e a v] [false false true]] [[e a '_]]\n         [[e a v] [true false false]] [['_ a v]]\n         [[e a v] [false true false]] [[e '_ v]]\n         :else [[]]))\n\n(defn patterns-from-eavs [dbvarmap vars patterns]\n  (->> (group-by first patterns)\n       (map (fn [[k v]]\n              {(:db-id (dbvarmap k)) (mapcat #(pattern-from-eav vars (rest %)) v)}))\n       (apply merge)))\n\n(defn filter-patterns-from-eavs [dbvarmap vars patterns]\n  (->> (group-by first patterns)\n       (map (fn [[k v]]\n              {(:db-id (dbvarmap k)) (mapcat #(filter-pattern-from-eav vars (rest %)) v)}))\n       (apply merge)))\n\n(defn just-qvars [ins args]\n  (if (empty? ins)\n    {}\n    (merge\n     (when-not (and (symbol? (first ins)) (= (first (str (first ins))) \\$))\n       {(first ins) (first args)})\n     (just-qvars (rest ins) (rest args)))))\n\n(defn get-input-sets [q-fn ins args]\n  (let [varmap  (just-qvars ins args)]\n    (if-not (empty? varmap)\n      (let\n          [qvars   (vec (get-all-vars (keys varmap)))\n           varvals (apply\n                    (partial q-fn {:find qvars\n                                   :in (keys varmap)})\n                    (vals varmap))\n           varsets (reduce (partial merge-with conj) (zipmap qvars (repeat #{}))\n                           (map #(zipmap qvars %) varvals))]\n        varsets)\n      {})))\n\n;;;; handling pulls in queries\n\n;;; needs to also extract all the pulls\n\n(defn pull-pattern? [x]\n  (and (coll? x) (= (first x) 'pull) (= 3 (count x))))\n\n(defn replace-find-pulls [qfind]\n  \"replaces pulls in query's :find with just their eid symbol\"\n  (clojure.walk/postwalk (fn [x] (if (pull-pattern? x)\n                                  (second x)\n                                  x)) qfind))\n\n(defn get-pull-var-pairs [qfind]\n  \"returns map of any vars and their pull commands in the :find\"\n  (if (coll? qfind)\n    (cond\n     (empty? qfind) {}\n     (pull-pattern? qfind) {(second qfind) (nth qfind 2)}\n     :else (apply merge (map get-pull-var-pairs qfind)))\n   {}))\n\n(defn match-var-to-db [var dbvarmap dbeavs]\n  (if (empty? dbeavs)\n    nil\n    (let [[db e a v] (first dbeavs)]\n      (if (or (= var e) (and (= var v) (pa/ref? (:schema (dbvarmap db)) a)))\n        (dbvarmap db)\n        (recur var dbvarmap (rest dbeavs))))))\n\n(defn match-vars-to-dbs [vars dbvarmap dbeavs]\n  (if (empty? vars)\n    {}\n    (merge {(first vars) (match-var-to-db (first vars) dbvarmap dbeavs)}\n           (match-vars-to-dbs (rest vars) dbvarmap dbeavs))))\n\n(defn index-of [xs x]\n  (loop [n 0\n         xs xs]\n    (cond\n     (empty? xs) nil\n     (= (first xs) x) n\n     :else (recur (inc n) (rest xs)))))\n\n\n;;;; handling db args: {:conn conn :db db}\n\n(defn db-arg? [arg]\n  (and\n   (map? arg)\n   (:db arg)\n   (:conn arg)))\n\n(defn convert-args-to [type args]\n  (map #(if (db-arg? %) (type %) %) args))\n\n(defn make-dbarg-map [ins args]\n  (if (empty? ins)\n    {}\n    (merge\n     (when (dbvar? (first ins))\n       {(first ins) (first args)})\n     (make-dbarg-map (rest ins) (rest args)))))\n\n(comment\n  (defn split-datoms [dbvarmap datoms]\n    (->> (group-by first datoms)\n         (map (fn [[db db-datoms]]\n                {(dbvarmap db)\n                 (map (comp vec rest) db-datoms)}))\n         (apply merge))))\n\n(defn split-datoms [datoms]\n  (->> (group-by first datoms)\n       (map (fn [[db-sym db-datoms]]\n              {db-sym\n               (map (comp vec rest) db-datoms)}))\n       (apply merge)))\n\n(defn- schema-ref?\n  \"Returns whether attribute identified by k is of :db/valueType :db.type/ref\"\n  [schema k]\n  (= :db.type/ref (:db/valueType (get schema k))))\n\n(defn- indexes-of [e coll] (keep-indexed #(if (= e %2) %1) coll))\n\n(defn- lookup-ref?\n  \"Returns whether var-name is used as lookup-ref inside of query's :where clauses.\n  var-name - the symbolic variable name\n  where - coll of where clauses\n  schema - map of schemas with attribute names as keys\n  Returns boolean true or false\"\n  [schema where var-name var-value]\n  (if-not (coll? var-value)\n    false\n    (loop [clause (first where)\n           remaining (rest where)]\n      (condp = (first (indexes-of var-name clause))\n        1 true\n\n        ;; If datascript supported :db/valueTuple :db.type/tuple, could check that here\n        ;; instead of needing to scan every :where clause to ensure it's not a schema-ref\n        3 (if (schema-ref? schema (nth clause 2))\n            true\n            (if (seq remaining)\n              (recur (first remaining) (rest remaining))\n              false))\n\n        (if (seq remaining)\n          (recur (first remaining) (rest remaining))\n          false)))))\n\n(defn resolve-any-idents\n  \"Given input-set from query, resolves any lookup-refs\n  Inputs:\n  entid-fn - Datomic/DS function to take lookup-ref & returns entid\n  db - value of DB\n  schemas - map with keys matching known schema attributes\n  where - where clauses of query\n  input-set - value from query :in\"\n  [entid-fn db schema where var-name input-set]\n  (set (for [var-value input-set]\n         (if (lookup-ref? schema where var-name var-value)\n           (entid-fn db var-value)\n           var-value))))\n\n;;;;;;;; q function that gives pattern, datoms, and results all in one\n;;;;;;;; query. db should be first of args (for now. later, finding\n;;;;;;;; the t of each datom will be part of the q).\n\n;; instead of passing db's to q-analyze you pass\n;; {:conn conn :db db :schema schema :db-id db-id}\n\n;; it will return the requested info, sorted by db-id.\n\n;; not necessarily working at this time...\n(comment\n  (defn q-analyze-with-pulls [dcfg retrieve query & args]\n    (if (and (= 1 (count retrieve)) (some #{:results} retrieve))\n      {:results (apply (partial (:q dcfg) query) (convert-args-to :db args))}\n      (let [qm            (if-not (map? query)\n                            (query-to-map query)\n                            query)\n            where         (normalize-all-eavs (:where qm))\n            eavs          (get-eavs where)\n            vars          (vec (get-all-vars eavs))\n            newqm         (merge qm {:find vars :where where})\n            newq          (qm-to-query newqm)\n            dbvarmap      (make-dbarg-map (:in qm) args)\n            r             (apply (partial (:q dcfg) newqm) (convert-args-to :db args))\n            ;; handle pull queries:\n            pull-vars     (get-pull-var-pairs (:find qm))\n            pull-vars-dbs (match-vars-to-dbs (keys pull-vars) dbvarmap eavs)\n            no-pulls-find (replace-find-pulls (:find qm))]\n        (merge\n         (when (some #{:pulls} retrieve)\n           {:pulls pull-vars-dbs})\n         (when (some #{:datoms :datoms-t} retrieve)\n           (let [datoms (split-datoms dbvarmap (create-q-datoms r eavs vars))]\n             (merge\n              (when (some #{:datoms} retrieve)\n                {:datoms datoms})\n              (when (some #{:datoms-t} retrieve)\n                {:datoms-t\n                 (->> datoms\n                      (map (fn [[db db-datoms]]\n                             {db\n                              (util/t-for-datoms (:q dcfg) (:db db) db-datoms)}))\n                      (apply merge))}))))\n         (when (some #{:results} retrieve)\n           {:results\n            (d/q {:find (vec no-pulls-find)\n                  :in [[vars '...]]}\n                 (vec r))})\n         (when (some #{:patterns} retrieve)\n           (let\n               [in-vars      (get-input-sets (:in qm) args)\n                eavs-ins     (clojure.walk/postwalk\n                              #(if-let [v (in-vars %)] v %) eavs)\n                qvar-count   (count-qvars eavs-ins)\n                linked-qvars (set (remove nil? (map (fn [[k v]] (if (> v 1) k)) qvar-count)))\n                rvars        (zipmap\n                              vars\n                              (stack-vectors r))\n                prepped-eavs (clojure.walk/postwalk\n                              #(if (and (qvar? %) (not (linked-qvars %))) '_ %)\n                              eavs-ins)]\n             {:patterns (patterns-from-eavs dbvarmap rvars prepped-eavs)})))))))\n\n\n(defn q-analyze [dcfg retrieve query args]\n  (let [qm           (merge\n                      {:in '[$]}\n                      (query-to-map query))\n        where        (normalize-all-eavs (vec (:where qm)))\n        eavs         (get-eavs where)\n        vars         (vec (get-all-vars eavs))\n        newqm        (merge qm {:find vars :where where})\n        ;; This doesn't seem to be getting used anymore\n        ;;newq         (qm-to-query newqm)\n        dbvarmap     (make-dbarg-map (:in qm) args)\n        fixed-args   (->> (zipmap (:in qm) args)\n                          (map (fn [[sym arg]]\n                                 (or (:db (get dbvarmap sym)) arg))))\n        r            (apply (partial (:q dcfg) newqm) fixed-args)\n        lookup-ref-patterns\n        (->> args\n             ;; Would be nice to check by the schema as well, to make sure this is actually a identity attribute\n             (filter (every-pred vector? (comp keyword? first) (comp (partial = 2) count)))\n             (map (fn [[a v]] ['$ '_ a v])))]\n    (merge\n     (when (some #{:datoms :datoms-t} retrieve)\n       (let [datoms (split-datoms (create-q-datoms r eavs vars))]\n         (merge\n          (when (some #{:datoms} retrieve)\n            {:datoms\n             (->> datoms\n                  (map (fn [[db-sym db-datoms]]\n                         {(:db-id (dbvarmap db-sym))\n                          db-datoms}))\n                  (apply merge))})\n          (when (some #{:datoms-t} retrieve)\n            {:datoms-t\n             (->> datoms\n                  (map (fn [[db-sym db-datoms]]\n                         (let [db (dbvarmap db-sym)]\n                           {(:db-id db)\n                            (util/t-for-datoms (:q dcfg) (:db db) db-datoms)})))\n                  (apply merge))}))))\n     (when (some #{:results} retrieve)\n       {:results\n        ((:q dcfg) {:find (vec (:find qm))\n                    :in [[vars '...]]}\n         (vec r))})\n     (when (some #{:patterns :filter-patterns :simple-patterns} retrieve)\n       (let\n           [in-vars      (get-input-sets (:q dcfg) (:in qm) args)\n            eavs-ins    (map (fn [[db & eav]]\n                               (vec\n                                (cons db\n                                      (map\n                                       (fn [var-name]\n                                         (if-let [var-value (in-vars var-name)]\n                                           (resolve-any-idents (:entid dcfg)\n                                                               (:db (get dbvarmap db))\n                                                               (:schema (get dbvarmap db))\n                                                               where\n                                                               var-name\n                                                               var-value)\n                                           var-name))\n                                       eav))))\n                             (concat lookup-ref-patterns eavs))\n            qvar-count   (count-qvars eavs-ins)\n            linked-qvars (set (remove nil? (map (fn [[k v]] (if (> v 1) k)) qvar-count)))\n            rvars        (zipmap\n                          vars\n                          (stack-vectors r))\n            prepped-eavs (clojure.walk/postwalk\n                          #(if (and (qvar? %) (not (linked-qvars %))) '_ %)\n                          eavs-ins)]\n         (merge\n          (when (some #{:simple-patterns} retrieve)\n            {:patterns\n             (patterns-from-eavs dbvarmap rvars\n                                 (clojure.walk/postwalk #(if (qvar? %) '_ %)\n                                                        eavs-ins))})\n          (when (some #{:patterns} retrieve)\n            {:patterns (patterns-from-eavs dbvarmap rvars prepped-eavs)\n             :linked   linked-qvars})\n          (when (some #{:filter-patterns} retrieve)\n            {:filter-patterns (filter-patterns-from-eavs dbvarmap rvars prepped-eavs)})))))))\n"]}