{"version":3,"sources":["shadow/remote/runtime/obj_support.cljc"],"mappings":"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","names":["this__4439__auto__","k__4440__auto__","this__4441__auto__","k60811","else__4442__auto__","G__60815","cljs.core/Keyword","obj","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__4458__auto__","f__4459__auto__","init__4460__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","ret__4461__auto__","p__60816","vec__60817","k__4462__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","v__4463__auto__","this__4453__auto__","writer__4454__auto__","opts__4455__auto__","pr-pair__4456__auto__","keyval__4457__auto__","cljs.core/pr-sequential-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__60810","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4437__auto__","__meta","this__4434__auto__","__hash","this__4443__auto__","cljs.core/count","this__4435__auto__","h__4297__auto__","fexpr__60820","coll__4436__auto__","cljs.core/hash-unordered-coll","this60812","other60813","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","this__4448__auto__","k__4449__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__4446__auto__","k__4447__auto__","pred__60821","cljs.core/keyword-identical?","expr__60822","G__60824","G__60825","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__4451__auto__","cljs.core/seq","cljs.core/MapEntry","this__4438__auto__","this__4444__auto__","entry__4445__auto__","cljs.core/vector?","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","shadow.remote.runtime.obj-support/Reference","this__4482__auto__","cljs.core/List","writer__4483__auto__","cljs.core/-write","G__60814","extmap__4478__auto__","G__60826","cljs.core/record?","shadow.remote.runtime.obj-support/->Reference","shadow.remote.runtime.obj-support/map->Reference","shadow.remote.runtime.obj-support/obj-ref","shadow.remote.runtime.obj-support/obj-ref?","result","shadow.remote.runtime.obj-support/now","js/Date.now","shadow.remote.runtime.obj-support/next-oid","cljs.core/random-uuid","shadow.remote.runtime.obj-support/register*","state","oid","obj-info","ts","obj-entry","cljs.core/assoc-in","shadow.remote.runtime.obj-support/obj-type-string","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","cljs.core/type","js/shadow","js/shadow.remote","js/shadow.remote.runtime","js/shadow.remote.runtime.obj-support","js/shadow.remote.runtime.obj-support.make-view","method-table__4672__auto__","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","prefer-table__4673__auto__","method-cache__4674__auto__","cached-hierarchy__4675__auto__","hierarchy__4676__auto__","fexpr__60827","cljs.core/MultiFn","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","shadow.remote.runtime.obj-support/make-view","p__60828","map__60829","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","state-ref","view-type","msg","entry","shadow.remote.runtime.obj-support/default-max-print-size","p__60831","map__60832","shadow.remote.runtime.obj-support/as-edn","data","limit","lw","shadow.remote.runtime.writer/limit-writer","cljs.core/pr-writer","cljs.core/pr-opts","shadow.remote.runtime.writer/get-string","p__60834","map__60835","shadow.remote.runtime.obj-support/as-pprint","cljs.pprint.pprint.cljs$core$IFn$_invoke$arity$2","p__60837","map__60838","shadow.remote.runtime.obj-support/as-edn-limit","shadow.remote.runtime.writer/pr-str-limit","shadow.remote.runtime.obj-support/attempt-to-sort","desc","coll","e60840","cljs.core/vec","cljs.core.sort.cljs$core$IFn$_invoke$arity$1","e","p__60841","map__60842","shadow.remote.runtime.obj-support/browseable-kv","view-order","p__60844","map__60845","idx","key","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","val","nav","clojure.datafy/nav","p__60847","map__60848","start","num","key-limit","val-limit","end","x__4276__auto__","y__4277__auto__","idxs","cljs.core.range.cljs$core$IFn$_invoke$arity$2","fragment","m","e60850","e60851","p__60852","map__60853","shadow.remote.runtime.obj-support/browseable-vec","p__60855","map__60856","p__60858","map__60859","p__60861","map__60862","shadow.remote.runtime.obj-support/browseable-seq","p__60864","map__60865","p__60867","map__60868","p__60870","map__60871","shadow.remote.runtime.obj-support/inspect-basic","opts","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/merge","cljs.core/boolean?","cljs.core/Symbol","cljs.core/map?","cljs.core/keys","cljs.core/set?","cljs.core/list?","shadow.remote.runtime.obj-support/inspect-type-info","shadow.remote.runtime.obj-support/inspect-source-info","cljs.core/select-keys","p__60873","map__60874","shadow.remote.runtime.obj-support/add-summary-op","summary","shadow.remote.runtime.obj-support/default-describe","o","clojure.datafy/datafy","p1__60876#","p1__60877#","p1__60878#","goog.object/set","shadow.remote.runtime.api/Inspectable","G__60879","shadow.remote.runtime.api/describe","G__60880","G__60881","p__60882","map__60883","shadow.remote.runtime.obj-support/add-supports","handlers","cljs.core/set","p__60885","map__60886","shadow.remote.runtime.obj-support/ensure-descriptor","p__60888","p__60889","map__60890","map__60891","shadow.remote.runtime.obj-support/obj-describe","runtime","cljs.core/deref","shadow.remote.runtime.api/reply","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/update-in","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","p__60894","p__60895","map__60896","map__60897","shadow.remote.runtime.obj-support/obj-request","request-op","request-fn","cljs.core/not","e60900","new-oid","new-entry","js/console.warn","shadow.remote.runtime.obj-support/basic-gc!","objs-to-drop","cljs.core/vals","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","cljs.core/reverse","cljs.core.drop.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/dissoc","shadow.remote.runtime.obj-support/start","svc","p1__60901#","p1__60902#","shadow.remote.runtime.api/add-extension","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","p__60903","map__60904","shadow.remote.runtime.obj-support/register","cljs.core/first","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","p__60906","map__60907","shadow.remote.runtime.obj-support/get-ref","obj-id","p__60909","map__60910","shadow.remote.runtime.obj-support/stop","shadow.remote.runtime.api/del-extension"],"sourcesContent":["(ns shadow.remote.runtime.obj-support\n  (:require\n    [clojure.datafy :as d]\n    [clojure.pprint :refer (pprint)]\n    [shadow.remote.runtime.api :as p]\n    [shadow.remote.runtime.shared :as shared]\n    [shadow.remote.runtime.writer :as lw])\n  #?(:clj (:import [java.util UUID])))\n\n(defrecord Reference [obj])\n\n(defn obj-ref [obj]\n  (when (some? obj)\n    (Reference. obj)))\n\n(defn obj-ref? [result]\n  (instance? Reference result))\n\n(defn now []\n  #?(:clj\n     (System/currentTimeMillis)\n     :cljs\n     (js/Date.now)))\n\n(defn next-oid []\n  #?(:clj\n     (str (UUID/randomUUID))\n     :cljs\n     (str (random-uuid))))\n\n(defn register*\n  [state oid obj obj-info]\n\n  (let [ts (now)\n\n        obj-entry\n        {:oid oid\n         :obj obj\n         ;; tracking that for GC purposes\n         :access-at ts\n         :obj-info (assoc obj-info :added-at ts)}]\n\n    (assoc-in state [:objects oid] obj-entry)))\n\n(defn obj-type-string [obj]\n  (if (nil? obj)\n    \"nil\"\n    #?(:clj\n       (-> (class obj) (.getName))\n       :cljs\n       (pr-str (type obj)))))\n\n(defmulti make-view\n  (fn [state-ref {:keys [view-type] :as msg} entry]\n    view-type))\n\n;; 1meg?\n(def default-max-print-size (* 1 1024 1024))\n\n(defn as-edn\n  [data {:keys [limit] :or {limit default-max-print-size} :as msg}]\n  (let [lw (lw/limit-writer limit)]\n    #?(:clj\n       (print-method data lw)\n       :cljs\n       (pr-writer data lw (pr-opts)))\n    (lw/get-string lw)))\n\n(defn as-pprint\n  [data {:keys [limit] :or {limit default-max-print-size} :as msg}]\n  ;; CLJ pprint for some reason doesn't run out of memory when printing circular stuff\n  ;; but it never finishes either\n  (let [lw (lw/limit-writer limit)]\n    (pprint data lw)\n    (lw/get-string lw)))\n\n(defn as-edn-limit\n  [data {:keys [limit] :as msg}]\n  (lw/pr-str-limit data limit))\n\n(defn attempt-to-sort [desc coll]\n  (try\n    (-> desc\n        (assoc :view-order (vec (sort coll)))\n        (assoc-in [:summary :sorted] true))\n    (catch #?(:clj Exception :cljs :default) e\n      (-> desc\n          (assoc :view-order (vec coll))\n          (assoc-in [:summary :sorted] false)))))\n\n(defn browseable-kv [{:keys [view-order data] :as desc}]\n  (-> desc\n      (assoc-in [:handlers :nav]\n        (fn [{:keys [idx]}]\n          (let [key (nth view-order idx)\n                val (get data key)\n                nav (d/nav data key val)]\n            (obj-ref nav))))\n      (assoc-in [:handlers :fragment]\n        (fn [{:keys [start num key-limit val-limit]\n              :or {key-limit 50\n                   val-limit 50}\n              :as msg}]\n\n          (let [end (min (count view-order) (+ start num))\n                idxs (range start end)\n                fragment\n                (reduce\n                  (fn [m idx]\n                    (let [key (nth view-order idx)\n                          val (get data key)]\n                      (assoc m idx {:key (try\n                                           (lw/pr-str-limit key key-limit)\n                                           (catch #?(:clj Exception :cljs :default) e\n                                             [true \"... print failed ...\"]))\n                                    :val (try\n                                           (lw/pr-str-limit val val-limit)\n                                           (catch #?(:clj Exception :cljs :default) e\n                                             [true \"... print failed ...\"]))})))\n                  {}\n                  idxs)]\n\n            fragment)))))\n\n(defn browseable-vec [{:keys [data] :as desc}]\n  (-> desc\n      (assoc-in [:handlers :nav]\n        (fn [{:keys [idx]}]\n          (let [val (nth data idx)\n                nav (d/nav data idx val)]\n            (obj-ref nav))))\n      (assoc-in [:handlers :fragment]\n        (fn [{:keys [start num key-limit val-limit]\n              :or {key-limit 50\n                   val-limit 50}\n              :as msg}]\n\n          (let [end (min (count data) (+ start num))\n                idxs (range start end)\n                fragment\n                (reduce\n                  (fn [m idx]\n                    (let [val (nth data idx)]\n                      (assoc m idx {:val (lw/pr-str-limit val val-limit)})))\n                  {}\n                  idxs)]\n\n            fragment)))))\n\n(defn browseable-seq [{:keys [data view-order] :as desc}]\n  (-> desc\n      (assoc-in [:handlers :nav]\n        (fn [{:keys [idx]}]\n          (let [val (nth view-order idx)\n                nav (d/nav data idx val)]\n            (obj-ref nav))))\n      (assoc-in [:handlers :fragment]\n        (fn [{:keys [start num key-limit val-limit]\n              :or {key-limit 50\n                   val-limit 50}\n              :as msg}]\n\n          (let [end (min (count view-order) (+ start num))\n                idxs (range start end)\n                fragment\n                (reduce\n                  (fn [m idx]\n                    (let [val (nth view-order idx)]\n                      (assoc m idx {:val (lw/pr-str-limit val val-limit)})))\n                  {}\n                  idxs)]\n\n            fragment)))))\n\n(defn inspect-basic [{:keys [data] :as desc} obj opts]\n  (cond\n    (nil? data)\n    (assoc-in desc [:summary :data-type] :nil)\n\n    (string? data)\n    (-> desc\n        (update :summary merge {:data-type :string\n                                :length (count data)})\n        ;; FIXME: substring support?\n        (assoc-in [:handlers :get-value] (fn [msg] data)))\n\n    (boolean? data)\n    (-> desc\n        (assoc-in [:summary :data-type] :boolean)\n        (assoc-in [:handlers :get-value] (fn [msg] data)))\n\n    (number? data)\n    (-> desc\n        (assoc-in [:summary :data-type] :number)\n        (assoc-in [:handlers :get-value] (fn [msg] data)))\n\n    (keyword? data)\n    (-> desc\n        (assoc-in [:summary :data-type] :keyword)\n        (assoc-in [:handlers :get-value] (fn [msg] data)))\n\n    (symbol? data)\n    (-> desc\n        (assoc-in [:summary :data-type] :symbol)\n        (assoc-in [:handlers :get-value] (fn [msg] data)))\n\n    (map? data)\n    (-> desc\n        (update :summary merge {:data-type :map\n                                :entries (count data)})\n        (attempt-to-sort (keys data))\n        (browseable-kv))\n\n    (vector? data)\n    (-> desc\n        (update :summary merge {:data-type :vec\n                                :entries (count data)})\n        (browseable-vec))\n\n    (set? data)\n    (-> desc\n        (update :summary merge {:data-type :set\n                                :entries (count data)})\n        (attempt-to-sort data)\n        (browseable-seq))\n\n    (list? data)\n    (-> desc\n        (update :summary merge {:data-type :list\n                                :entries (count data)})\n        (assoc :view-order (vec data))\n        (browseable-seq))\n\n\n    ;; FIXME: lazy seqs / other seqs / records\n    :else\n    (assoc-in desc [:summary :data-type] :unsupported)))\n\n(defn inspect-type-info [desc obj opts]\n  (assoc-in desc [:summary :obj-type] (obj-type-string obj)))\n\n(defn inspect-source-info [desc obj opts]\n  (update desc :summary merge (select-keys opts [:ns :line :column :label])))\n\n(defn add-summary-op [{:keys [summary] :as desc}]\n  (assoc-in desc [:handlers :summary] (fn [msg] summary)))\n\n(defn default-describe [o opts]\n  (let [data (d/datafy o)]\n\n    (-> {:data data\n         :summary\n         {:added-at (:added-at opts)\n          :datafied (not (identical? data o))}\n\n         ;; FIXME: only add those for clojure values\n         ;; often pointless when datafy returned original object\n         :handlers\n         {:edn-limit #(as-edn-limit data %)\n          :edn #(as-edn data %)\n          :pprint #(as-pprint data %)}}\n\n        (inspect-basic o opts)\n        (inspect-type-info o opts)\n        (inspect-source-info o opts)\n        (add-summary-op))))\n\n(extend-protocol p/Inspectable\n  #?(:clj Object :cljs default)\n  (describe [o opts]\n    (default-describe o opts)))\n\n(comment\n  (p/describe\n    {:hello \"world\"}\n    {:added-at \"NOW\" :ns \"foo.bar\"}))\n\n;; called after describe so impls don't have to worry about this\n(defn add-supports [{:keys [handlers] :as desc}]\n  (assoc-in desc [:summary :supports] (set (keys handlers))))\n\n;; FIXME: this is running inside swap! which means it can potentially\n;; end up getting executed several times for the same object (in CLJ)\n;; that is not great and should be handled differently\n(defn ensure-descriptor [{:keys [obj obj-info desc] :as entry}]\n  (if desc\n    entry\n    (assoc entry :desc (-> (p/describe obj obj-info)\n                           (add-supports)))))\n\n\n(defn obj-describe\n  [{:keys [state-ref runtime]}\n   {:keys [oid] :as msg}]\n  (if-not (contains? (:objects @state-ref) oid)\n    (p/reply runtime msg {:op :obj-not-found :oid oid})\n    (do (swap! state-ref update-in [:objects oid] ensure-descriptor)\n        (swap! state-ref assoc-in [:objects oid :access-at] (now))\n        (let [summary (get-in @state-ref [:objects oid :desc :summary])]\n          (p/reply runtime msg {:op :obj-summary\n                                :oid oid\n                                :summary summary})))))\n\n(defn obj-request\n  [{:keys [state-ref runtime]}\n   {:keys [oid request-op] :as msg}]\n  (if-not (contains? (:objects @state-ref) oid)\n    (p/reply runtime msg {:op :obj-not-found :oid oid})\n    (do (swap! state-ref update-in [:objects oid] ensure-descriptor)\n        (swap! state-ref assoc-in [:objects oid :access-at] (now))\n        (let [entry (get-in @state-ref [:objects oid])\n              request-fn (get-in entry [:desc :handlers request-op])]\n          (if-not request-fn\n            (p/reply runtime msg {:op :obj-request-not-supported\n                                  :oid oid\n                                  :request-op request-op})\n            (try\n              (let [result (request-fn msg)]\n\n                ;; FIXME: add support for generic async results\n                ;; all handlers should already be sync but allow async results\n                (if-not (obj-ref? result)\n                  (p/reply runtime msg {:op :obj-result\n                                        :oid oid\n                                        :result result})\n\n                  (let [new-oid (next-oid)\n                        ts (now)\n\n                        new-entry\n                        {:oid new-oid\n                         :obj (:obj result)\n                         :access-at ts\n                         ;; FIXME: should keep some info on how this ref came to be\n                         :obj-info {:added-at ts\n                                    :added-via oid}}]\n\n                    (swap! state-ref assoc-in [:objects new-oid] new-entry)\n\n                    (p/reply runtime msg {:op :obj-result-ref\n                                          :oid oid\n                                          :ref-oid new-oid}))))\n\n              (catch #?(:clj Exception :cljs :default) e\n                #?(:cljs (js/console.warn \"action-request-action failed\" (:obj entry) e))\n                (p/reply runtime msg {:op :obj-request-failed\n                                      :oid oid\n                                      :msg msg\n                                      ;; FIXME: (d/datafy e) doesn't work for CLJS\n                                      :e (str e) #_#?(:clj  (.toString e)\n                                                      :cljs (.-message e))})))))\n        )))\n\n(defn basic-gc! [state]\n  (let [objs-to-drop\n        (->> (:objects state)\n             (vals)\n             (sort-by :access-at)\n             (reverse)\n             (drop 100) ;; FIXME: make configurable\n             (map :oid))]\n\n    (reduce\n      (fn [state oid]\n        (update state :objects dissoc oid))\n      state\n      objs-to-drop)))\n\n(defn start [runtime]\n  (let [state-ref (atom {:objects {}\n                         :id-seq-ref 0})\n\n        svc\n        {:runtime runtime\n         :state-ref state-ref}]\n\n    (p/add-extension runtime\n      ::ext\n      {:ops {:obj-describe #(obj-describe svc %)\n             :obj-request #(obj-request svc %)}\n       :on-idle #(swap! state-ref basic-gc!)})\n\n    svc))\n\n(defn register [{:keys [state-ref] :as svc} obj obj-info]\n  (let [oid (next-oid)]\n    (if-not (and (vector? obj) (= :shadow.remote/wrap (first obj)) (= (count obj) 3))\n      (swap! state-ref register* oid obj obj-info)\n      (swap! state-ref register* oid (nth obj 1) (merge obj-info (nth obj 2))))\n    oid))\n\n(defn get-ref [{:keys [state-ref]} obj-id]\n  (get-in @state-ref [:objects obj-id]))\n\n(defn stop [{:keys [runtime]}]\n  (p/del-extension runtime ::ext))\n\n(comment\n  (def obj-support (:clj-runtime-obj-support (shadow.cljs.devtools.server.runtime/get-instance)))\n  (swap! (:state-ref obj-support) assoc :objects {})\n  )"]}