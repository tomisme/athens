{"version":3,"sources":["sci/impl/interop.cljc"],"mappings":"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","names":["sci.impl.interop/toJS","v","cljs.core/MetaFn","cljs.core/clj->js","sci.impl.interop/js-object-array","args","cljs.core/to-array","cljs.core.map.cljs$core$IFn$_invoke$arity$2","sci.impl.interop/invoke-instance-method","obj","_target-class","method-name","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","temp__5733__auto__","method","js/Error","p__58575","vec__58576","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","sci.impl.interop/get-static-field","class","field-name-sym","goog.object/get","sci.impl.interop/invoke-js-constructor","constructor","ctor","js/Function.prototype.bind.apply","G__58579","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","sci.impl.interop/invoke-constructor","p__58580","vec__58581","sci.impl.interop/invoke-static-method","vec__58584","field","sub-method-name","clojure.string.split.cljs$core$IFn$_invoke$arity$2","clojure.string/ends-with?","p__58587","map__58588","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","env","cljs.core.get.cljs$core$IFn$_invoke$arity$2","class->opts","sci.impl.interop/fully-qualify-class","sym","or__4185__auto__","ns*","cljs.core/namespace","cljs.core/contains?","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","cljs.core/name","cljs.core/deref","cnn","sci.impl.vars/current-ns-name","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","p__58590","map__58591","sci.impl.interop/resolve-class-opts","class-opts","temp__5735__auto__","sci.impl.interop/resolve-class","ctx"],"sourcesContent":["(ns sci.impl.interop\n  {:no-doc true}\n  #?(:clj (:import [sci.impl Reflector]))\n  (:require #?(:cljs [goog.object :as gobj])\n            [sci.impl.vars :as vars]\n            #?(:cljs [clojure.string])))\n\n;; see https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/Reflector.java\n;; see invokeStaticMethod, getStaticField, etc.\n\n#?(:clj (set! *warn-on-reflection* true))\n\n\n#?(:cljs\n   (do\n     (defn toJS [v]\n       (if (instance? MetaFn v)\n         ;; when returning a function, make it callable from JS\n         (.-afn v)\n         (clj->js v)))\n\n     (defn js-object-array [args]\n       (to-array (map toJS args)))))\n\n(defn invoke-instance-method\n  #?@(:cljs [[obj _target-class method-name args]\n             ;; gobj/get didn't work here\n             (if (identical? \\- (.charAt method-name 0))\n               (aget obj (subs method-name 1))\n               (if-let [method (aget obj method-name)]\n                 (.apply method obj (js-object-array args))\n                 (throw (js/Error. (str \"Could not find instance method: \" method-name)))))]\n      :clj\n      [#_([obj method args]\n        (invoke-instance-method obj nil method args))\n       ([obj target-class method args]\n        (if-not target-class\n          (Reflector/invokeInstanceMethod obj method (object-array args))\n          (let [methods (Reflector/getMethods target-class (count args) method false)]\n            (Reflector/invokeMatchingMethod method methods obj (object-array args)))))]))\n\n(defn get-static-field #?(:clj [[^Class class field-name-sym]]\n                          :cljs [[class field-name-sym]])\n  #?(:clj (Reflector/getStaticField class (str field-name-sym))\n     :cljs (gobj/get class field-name-sym)))\n\n#?(:cljs\n   (defn invoke-js-constructor [constructor args]\n     (let [ctor (js/Function.prototype.bind.apply constructor)\n           args (js-object-array args)]\n       (case (count args)\n         0 (new ctor)\n         1 (new ctor (nth args 0))\n         2 (new ctor (nth args 0) (nth args 1))\n         3 (new ctor (nth args 0) (nth args 1) (nth args 2))\n         4 (new ctor (nth args 0) (nth args 1) (nth args 2) (nth args 3))\n         5 (new ctor (nth args 0) (nth args 1) (nth args 2) (nth args 3) (nth args 4))\n         6 (new ctor (nth args 0) (nth args 1) (nth args 2) (nth args 3) (nth args 4) (nth args 5))\n         7 (new ctor (nth args 0) (nth args 1) (nth args 2) (nth args 3) (nth args 4) (nth args 5) (nth args 6))\n\n         (throw (ex-info \"Constructors with more than 7 arguments are not supported\" {:constructor constructor}))))))\n\n(defn invoke-constructor #?(:clj [^Class class args]\n                            :cljs [constructor args])\n  #?(:clj (Reflector/invokeConstructor class (object-array args))\n     :cljs (invoke-js-constructor constructor args)))\n\n(defn invoke-static-method #?(:clj [[^Class class method-name] args]\n                              :cljs [[class method-name] args])\n  #?(:clj\n     (Reflector/invokeStaticMethod class (str method-name) (object-array args))\n     :cljs (if-let [method (gobj/get class method-name)]\n             (.apply method class (js-object-array args))\n             (let [method-name (str method-name)\n                   [field sub-method-name] (clojure.string/split method-name #\"\\.\")]\n               (cond\n                 sub-method-name\n                 (invoke-instance-method (get-static-field [class field]) nil sub-method-name args)\n\n                 (clojure.string/ends-with? method-name \".\")\n                 (invoke-js-constructor (get-static-field [class field]) args)\n\n                 :else\n                 (throw (js/Error. (str \"Could not find static method \" method-name))))))))\n\n(defn fully-qualify-class [{:keys [:env :class->opts]} sym]\n  (or #?(:clj (when (contains? class->opts sym) sym)\n         :cljs (if-let [ns* (namespace sym)]\n                 (when (identical? \"js\" ns*)\n                   (when (contains? class->opts (symbol (name sym)))\n                     sym))\n                 (when (contains? class->opts sym)\n                   sym)))\n      (let [env @env]\n        (or (get (:imports env) sym)\n            (let [cnn (vars/current-ns-name)]\n              (get-in env [:namespaces cnn :imports sym]))))))\n\n(defn resolve-class-opts [{:keys [:env :class->opts]} sym]\n  (let [class-opts (or #?(:clj (get class->opts sym)\n                     :cljs (if-let [ns* (namespace sym)]\n                             (when (identical? \"js\" ns*)\n                               (get class->opts (symbol (name sym))))\n                             (get class->opts sym)))\n                       (let [env @env]\n                         (or\n                          (when-let [v (get-in env [:imports sym])]\n                            (get class->opts v))\n                          (let [cnn (vars/current-ns-name)]\n                            (when-let [v (get-in env [:namespaces cnn :imports sym])]\n                              (get class->opts v))))))]\n    class-opts))\n\n(defn resolve-class [ctx sym]\n  (:class (resolve-class-opts ctx sym)))\n"]}