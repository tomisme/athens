{"version":3,"sources":["posh/lib/update.cljc"],"mappings":"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","names":["p__31023","map__31024","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","posh.lib.update/update-pull","dcfg","retrieve","posh-tree","storage-key","vec__31026","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","_","poshdb","pull-pattern","eid","analysis","posh.lib.pull-analyze/pull-analyze","cljs.core/cons","posh.lib.db/poshdb->analyze-db","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","p__31029","map__31030","posh.lib.update/update-filter-pull","vec__31032","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/first","cljs.core/vals","p__31035","map__31036","posh.lib.update/update-pull-many","vec__31038","eids","posh.lib.pull-analyze/pull-many-analyze","p__31041","map__31042","posh.lib.update/update-q-with-dbvarmap","vec__31044","query","args","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","qm","posh.lib.q-analyze/query-to-map","dbvarmap","posh.lib.q-analyze/make-dbarg-map","poshdbmap","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p__31047","vec__31048","db-sym","cljs.core/merge","fixed-args","cljs.core/zipmap","p__31051","vec__31052","sym","arg","or__4185__auto__","posh.lib.q-analyze/q-analyze","posh.lib.update/update-q","posh.lib.update/reduce-entities","r","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","acc","xs","x","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","posh.lib.update/filter-q-transform-analysis","posh.lib.update/update-filter-q","posh.lib.update/update-posh-item","G__31056","cljs.core/Keyword","js/Error"],"sourcesContent":["(ns posh.lib.update\n  (:require [posh.lib.util :as util]\n            [posh.lib.datom-matcher :as dm]\n            [posh.lib.pull-analyze :as pa]\n            [posh.lib.q-analyze :as qa]\n            [posh.lib.db :as db]))\n\n(defn update-pull [{:keys [dcfg retrieve] :as posh-tree} storage-key]\n  ;;(println \"updated pull: \" storage-key)\n  (let [[_ poshdb pull-pattern eid] storage-key]\n    (let [analysis (pa/pull-analyze dcfg\n                                    (cons :patterns retrieve)\n                                    (db/poshdb->analyze-db posh-tree poshdb)\n                                    pull-pattern\n                                    eid)]\n      (dissoc\n       (merge analysis\n              {:reload-patterns (:patterns analysis)\n               :reload-fn posh.lib.update/update-pull})\n       :patterns))))\n\n(defn update-filter-pull [{:keys [dcfg retrieve] :as posh-tree} storage-key]\n  ;;(println \"updated filter-pull: \" storage-key)\n  (let [[_ poshdb pull-pattern eid] storage-key]\n    (let [analysis (pa/pull-analyze dcfg\n                                    (concat [:patterns :ref-patterns] retrieve)\n                                    (db/poshdb->analyze-db posh-tree poshdb)\n                                    pull-pattern\n                                    eid)]\n      (dissoc\n       (merge analysis\n              {:pass-patterns (first (vals (:patterns analysis)))\n               :reload-patterns (:ref-patterns analysis)\n               :reload-fn posh.lib.update/update-filter-pull})\n       :patterns :ref-patterns))))\n\n(defn update-pull-many [{:keys [dcfg retrieve] :as posh-tree} storage-key]\n  ;;(println \"updated pull-many: \" storage-key)\n  (let [[_ poshdb pull-pattern eids] storage-key]\n    (let [analysis (pa/pull-many-analyze dcfg\n                                         (cons :patterns retrieve)\n                                         (db/poshdb->analyze-db posh-tree poshdb)\n                                         pull-pattern\n                                         eids)]\n      (dissoc\n       (merge analysis\n              {:reload-patterns (:patterns analysis)\n               :reload-fn posh.lib.update/update-pull-many})\n       :patterns))))\n\n(declare update-q)\n\n(defn update-q-with-dbvarmap [{:keys [dcfg retrieve] :as posh-tree} storage-key]\n  \"Returns {:dbvarmap .. :analysis ..}\"\n  (let [[_ query args] storage-key\n        retrieve       (concat [:results :simple-patterns] (remove #{:patterns} retrieve))\n        qm             (merge {:in '[$]} (qa/query-to-map query))\n        dbvarmap       (qa/make-dbarg-map (:in qm) args)\n        ;; no longer using\n        ;poshdbs        (vals dbvarmap)\n        poshdbmap      (->> dbvarmap\n                            (map (fn [[db-sym poshdb]]\n                                   {db-sym\n                                    (db/poshdb->analyze-db posh-tree poshdb)}))\n                            (apply merge))\n        fixed-args     (->> (zipmap (:in qm) args)\n                            (map (fn [[sym arg]]\n                                   (or (get poshdbmap sym) arg))))\n        analysis       (qa/q-analyze dcfg retrieve query fixed-args)]\n    {:dbvarmap dbvarmap\n     :analysis (dissoc\n                (merge analysis\n                       {:reload-patterns (:patterns analysis)\n                        :reload-fn posh.lib.update/update-q})\n                :patterns)}))\n\n(defn update-q [posh-tree storage-key]\n  ;;(println \"updated q: \" storage-key)\n  (:analysis (update-q-with-dbvarmap posh-tree storage-key)))\n\n(defn reduce-entities [r]\n    (reduce (fn [acc xs] (reduce (fn [acc x] (conj acc x)) acc xs)) #{} r))\n\n(declare update-filter-q)\n\n(defn filter-q-transform-analysis [analysis]\n  (dissoc\n   (merge analysis\n          {:pass-patterns [[(reduce-entities (:results analysis))]]\n           :reload-patterns (:patterns analysis)\n           :reload-fn posh.lib.update/update-filter-q})\n   :results :patterns))\n\n(defn update-filter-q [posh-tree storage-key]\n  ;;(println \"update-filter-q\" storage-key)\n  (filter-q-transform-analysis (:analysis (update-q-with-dbvarmap posh-tree storage-key))))\n\n(defn update-posh-item [posh-tree storage-key]\n  (case (first storage-key)\n    :pull (update-pull posh-tree storage-key)\n    :q    (:analysis (update-q posh-tree storage-key))\n    :filter-pull (update-filter-pull posh-tree storage-key)))\n"]}