{"version":3,"sources":["shadow/remote/runtime/eval_support.cljs"],"mappings":"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","names":["shadow.remote.runtime.eval-support/obj-support-inst","shadow.remote.runtime.eval-support/get-ref","oid","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","shadow.remote.runtime.obj-support/get-ref","p__60906","map__60907","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","shadow.remote.runtime.eval-support/eval-cljs","runtime","obj-support","svc","msg","p__60909","map__60910","eval-results","result","js/console.log","seq__60912","cljs.core/seq","chunk__60913","count__60914","i__60915","map__60920","temp__5735__auto__","cljs.core/chunked-seq?","c__4609__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","map__60922","cljs.core/first","cljs.core/next","value","shadow.remote.runtime.api/reply","ref-oid","shadow.remote.runtime.obj-support/register","p__60924","p__60925","map__60926","map__60927","shadow.remote.runtime.eval-support/eval-js","code","e60930","res","e","shadow.remote.runtime.eval-support/start","p1__60931#","p1__60932#","shadow.remote.runtime.api/add-extension","p__60933","map__60934","shadow.remote.runtime.eval-support/stop","shadow.remote.runtime.api/del-extension"],"sourcesContent":["(ns shadow.remote.runtime.eval-support\n  (:require\n    [shadow.remote.runtime.api :as p]\n    [shadow.remote.runtime.obj-support :as obj-support]))\n\n(def ^:dynamic obj-support-inst nil)\n\n(defn get-ref [oid]\n  (when-not obj-support-inst\n    (throw (ex-info \"obj-support not bound, can only call this from eval\" {:oid oid})))\n  (obj-support/get-ref obj-support-inst oid))\n\n(defn eval-cljs\n  [{:keys [runtime obj-support] :as svc} msg]\n  ;; can't use binding because this has to go async\n  (set! obj-support-inst obj-support)\n  (.eval-cljs runtime msg\n    ;; FIXME: do we allow multiple actions per msg?\n    ;; {:code \"1 2 3\"} would trigger 3 results\n    (fn [{:keys [eval-results] :as result}]\n      (set! obj-support-inst nil) ;; cleanup\n      (js/console.log \"eval-cljs result\" result)\n      (doseq [{:keys [value]} eval-results]\n        (if (nil? value)\n          (p/reply runtime msg\n            {:op :eval-result\n             :result nil})\n          (let [ref-oid (obj-support/register obj-support value {:msg msg})]\n            (p/reply runtime msg\n              {:op :eval-result-ref\n               :ref-oid ref-oid})))))))\n\n(defn eval-js\n  [{:keys [runtime obj-support] :as svc} {:keys [code] :as msg}]\n\n  (try\n    ;; FIXME: protocol-ize? eval semantics are different in node/browser\n    (let [res (.eval-js runtime code)\n          ref-oid (obj-support/register obj-support res {:js-code code})]\n\n      (p/reply runtime msg\n        ;; FIXME: separate result ops for :eval-cljs :eval-js :eval-clj?\n        {:op :eval-result-ref\n         :ref-oid ref-oid}))\n\n    (catch :default e\n      (p/reply runtime msg\n        {:op :eval-error\n         :e (.-message e)}))))\n\n(defn start [runtime obj-support]\n  (let [svc\n        {:runtime runtime\n         :obj-support obj-support}]\n\n    (p/add-extension runtime\n      ::ext\n      {:ops\n       {:eval-js #(eval-js svc %)\n        :eval-cljs #(eval-cljs svc %)}})\n\n    svc))\n\n(defn stop [{:keys [runtime] :as svc}]\n  (p/del-extension runtime ::ext))"]}