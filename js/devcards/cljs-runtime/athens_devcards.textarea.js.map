{"version":3,"sources":["athens_devcards/textarea.cljs"],"mappings":"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","names":["p1__49092#","athens-devcards.textarea/ll","x","js/console.log","athens-devcards.textarea/state","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","athens-devcards.textarea/get-caret-pos-num","athens-devcards.textarea/get-caret-px-pos","athens-devcards.textarea/append-to-input","char","f","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/update","cljs.core/str","cljs.core/conj","p__49093","map__49094","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","athens-devcards.textarea/handle-post-change","queue","ctx","temp__5733__auto__","vec__49096","seq__49097","cljs.core/seq","first__49098","cljs.core/first","cljs.core/next","step","next-queue","G__49099","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","athens-devcards.textarea/on-input-change","e","fexpr__49100","target","value","selectionStart","selectionEnd","_","G__49102","fexpr__49101","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","seq__49103","chunk__49104","count__49105","i__49106","temp__5735__auto__","cljs.core/chunked-seq?","c__4609__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/deref","athens-devcards.textarea/on-input-key-down","fexpr__49107","G__49108","athens-devcards.textarea/block-input","map__49109","str-content","devcards.core/register-card","devcards.core/card-base","js/athens-devcards","js/athens-devcards.textarea","js/athens-devcards.textarea.t_athens_devcards$textarea49111","athens-devcards.textarea/t_athens_devcards$textarea49111","_49113","meta49112","this__48926__auto__","devcard-opts__48927__auto__","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","v__48945__auto__","cljs.core/fn?","data-atom__48946__auto__","owner__48947__auto__","reagent.core/as-element","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","devcards.core/assert-options-map","this__4428__auto__","writer__4429__auto__","opt__4430__auto__","cljs.core/-write","athens-devcards.textarea/->t_athens_devcards$textarea49111"],"sourcesContent":["(ns athens-devcards.textarea\n  (:require\n   [reagent.core :as rg]\n   [devcards.core :refer [defcard defcard-rg]]))\n\n(defn ll [x]\n  #(js/console.log x \": \" %))\n\n(def state (rg/atom {:editing? true\n                     :str-content \"Hello I am a block\"\n                     :target nil\n                     :post-change '()}))\n\n; onBeforeInput\n; onBlur\n; onChange\n; onKeyDown\n; onKeyUp\n; onMouseDown\n; onMouseUp\n; onPaste\n\n(defn get-caret-pos-num [])\n\n(defn get-caret-px-pos [])\n\n(defn append-to-input [char]\n  (let [\n        f #(swap! state update :str-content str char)]\n    (swap! state update :post-change conj f)))\n\n(defn handle-post-change [{:keys [queue] :as ctx}]\n  (if-let [[step & next-queue] (seq queue)]\n    (recur (step (assoc ctx :queue next-queue)))\n    ctx))\n\n(defn on-input-change [e]\n  ((ll \"onChange\") e)\n  (let [target (.-target e)\n        value (.-value target)\n        selectionStart (.-selectionStart target)\n        selectionEnd (.-selectionEnd target)\n        _ ((ll \"sel\") (str selectionStart \",\" selectionEnd))]\n    (swap! state assoc :str-content value)\n    (swap! state assoc :target target)\n    (doseq [f (seq (:post-change @state))]\n      (f))\n    (swap! state assoc :post-change '())))\n\n(defn on-input-key-down [e]\n  ((ll \"onKeyDown\") e)\n  (case (.-keyCode e)\n    57 (append-to-input \")\")\n    219 (append-to-input \"]\")\n    nil))\n\n(defn block-input []\n  (let [{:keys [str-content]} @state]\n    [:div\n     [:textarea {:style {:font-size \"1em\"\n                         :padding 10\n                         :font-family \"'Helvetica Neue', Helvetica, Arial, sans-serif\"}\n                 :spell-check false\n                 :value str-content\n                 ; :on-before-input (ll \"onBeforeInput\")\n                 ; :on-blur (ll \"onBlur\")\n                 :on-change on-input-change\n                 :on-key-down on-input-key-down}]\n                 ; :on-key-up (ll \"onKeyUp\")}]\n                 ; :on-mouse-down (ll \"onMouseDown\")\n                 ; :on-mouse-up (ll \"onMouseUp\")\n                 ; :on-paste (ll \"onPaste\")}]\n     [:div {:on-click js/console.log\n            :style {:background \"#5dc2ff\"\n                    :cursor \"text\"\n                    :padding 10}}\n      str-content]]))\n\n(defcard-rg textbox\n  block-input)\n\n(defcard state state)\n"]}